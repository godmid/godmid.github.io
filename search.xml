<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021全国电赛（F题）图像识别__数字识别</title>
      <link href="posts/694f8495/"/>
      <url>posts/694f8495/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><span id="more"></span><h3 id="基于openmv的图像识别"><strong>基于openmv的图像识别</strong></h3><h4 id="openmv简介"><strong>openmv简介</strong></h4><p>OpenMV是一个开源，低成本，功能强大的机器视觉模块，以STM32F427CPU为核心，集成了OV7725摄像头芯片，在小巧的硬件模块上，用C语言高效地实现了核心机器视觉算法，提供Python编程接口 。同时 OpenMV也是一个可编程的摄像头，通过Python语言可实现你想要的逻辑。而且摄像头本身也内置了一些图像处理的算法，使用起来也更加的方便，仅需要写一些简单的Python代码，即可轻松的完成各种机器视觉相关的任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在本次赛事中我们听到的最多的怨言就是（openmv4运行内存只有1MB，而openmv4plus运行内存有32MB！）</span><br><span class="line">，因为很多神经网络模型需要更大的内存才能运行。但是这个其实是可以实现的，后面我会简单说明一下。</span><br></pre></td></tr></table></figure><h5 id="一-打开openmv-ide软件"><strong>一、打开OpenMV IDE软件</strong></h5><p><img src="https://img-blog.csdnimg.cn/c84f2fc2a13b4c408867322efa96691a.png" alt="img" loading="lazy"></p><p>选择Cancel（不升级即可）！</p><h5 id="二-openmv4的数字模板匹配识别"><strong>二、openmv4的数字模板匹配识别</strong></h5><p>openmv4的数字识别的基础是需要配置使用NCC模板匹配。通过NCC模板的匹配可把</p><p>需要识别的数字模板图片保存到SD卡中，然后可进行下一步的识别。</p><p><strong>1、我们通过打开模板匹配的历程来直接打开代码使用</strong></p><p>点击文件——示例——openmv——feature detection——template_matching.py</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121343657.png" alt="" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121335156.png" alt="" loading="lazy"></p><p><strong>2、如果运行出现这个窗口那就说明你没有保存模板图片。</strong></p><p><img src="https://img-blog.csdnimg.cn/4043f3c29e4847d59d86ae582e3874d0.png" alt="img" loading="lazy"></p><p><strong>这时我们就需要创建一个模板图片。</strong></p><p><strong>3、首先要打开一个helloworld历程文件</strong></p><p>点击file——examples——01-basics——<a href="http://helloworld.py">helloworld.py</a></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121344295.png" alt="" loading="lazy"></p><p><strong>4、在helloworld历程文件中进行匹配0~9这样的数字</strong></p><p>对这些数字进行一一截取（打开摄像头，图像中出现数字之和关闭摄像头，在图像中截取数字，右键选择将图像选择保存到PC），用它们来作为我们的模板图片（此时图片格式后缀为bmp格式）。</p><p>在右边的Frame Buffer框中进行截取</p><p><strong>注意</strong>：不要点Zoom，因为Zoom展示的是放大后的效果，在识别时可能会导致失帧。</p><p><strong>例如：本人截取的一张图片（目前后缀还是bmp）</strong></p><p><img src="https://img-blog.csdnimg.cn/c29ea05f024d4e5c9f01b8d110eb3bb7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA546L5ZOl5p2l5LqG5b-r6LeR,size_8,color_FFFFFF,t_70,g_se,x_16" alt="img" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/2e6e9ea350664008a0908f27e633e6ca.bmp" alt="img" loading="lazy"></p><p><strong>注意：模板图片的格式一定要是pgm的格式</strong></p><p>星瞳科技给了一个网址：<strong><a href="https://convertio.co/zh/bmp-pgm/">https://convertio.co/zh/bmp-pgm/</a></strong>，其他的网站也是大同小异</p><p>这个网站用不了的话可以去百度啥的地方随便搜一个</p><p>点击选择文件（刚刚截图的模板图片）</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121346073.png" alt="" loading="lazy"></p><p>打开所选的图片，点击转换（注意是不是转换到PGM格式，如果不是请换到PGm格式）</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121337807.png" alt="" loading="lazy"></p><p>转换完成之后点击下载即可，此时图片后缀为PGM格式。</p><p><strong>5、将转换的数字图片（PGM）进行保存，一定要保存到OpenMV4的SD卡中，名称自定义</strong></p><p><strong>6、把template.pgm改为你命名的模板图片（PGM）的名称</strong></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/202111121338466.png" alt="" loading="lazy"></p><p>例如：我命名的为11</p><p><img src="https://img-blog.csdnimg.cn/ef46e5ea5b614c3ab6b4b2b6de485f03.png" alt="img" loading="lazy"></p><p><strong>7、改完即可运行</strong></p><p><a href="https://book.openmv.cc/image/template-match.html">官方数字识别源代码</a>，此代码为源代码，可在此基础上进行改动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Template Matching Example - Normalized Cross Correlation (NCC)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to use the NCC feature of your OpenMV Cam to match</span></span><br><span class="line"><span class="comment"># image patches to parts of an image... expect for extremely controlled enviorments</span></span><br><span class="line"><span class="comment"># NCC is not all to useful.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: NCC supports needs to be reworked! As of right now this feature needs</span></span><br><span class="line"><span class="comment"># a lot of work to be made into somethin useful. This script will reamin to show</span></span><br><span class="line"><span class="comment"># that the functionality exists, but, in its current state is inadequate.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, sensor, image</span><br><span class="line"><span class="keyword">from</span> image <span class="keyword">import</span> SEARCH_EX, SEARCH_DS</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset sensor</span></span><br><span class="line">sensor.reset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set sensor settings</span></span><br><span class="line">sensor.set_contrast(<span class="number">1</span>)</span><br><span class="line">sensor.set_gainceiling(<span class="number">16</span>)</span><br><span class="line"><span class="comment"># Max resolution for template matching with SEARCH_EX is QQVGA</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line"><span class="comment"># You can set windowing to reduce the search image.</span></span><br><span class="line"><span class="comment">#sensor.set_windowing(((640-80)//2, (480-60)//2, 80, 60))</span></span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load template.</span></span><br><span class="line"><span class="comment"># Template should be a small (eg. 32x32 pixels) grayscale image.</span></span><br><span class="line">template = image.Image(<span class="string">&quot;/template.pgm&quot;</span>)</span><br><span class="line"></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run template matching</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># find_template(template, threshold, [roi, step, search])</span></span><br><span class="line">    <span class="comment"># ROI: The region of interest tuple (x, y, w, h).</span></span><br><span class="line">    <span class="comment"># Step: The loop step used (y+=step, x+=step) use a bigger step to make it faster.</span></span><br><span class="line">    <span class="comment"># Search is either image.SEARCH_EX for exhaustive search or image.SEARCH_DS for diamond search</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Note1: ROI has to be smaller than the image and bigger than the template.</span></span><br><span class="line">    <span class="comment"># Note2: In diamond search, step and ROI are both ignored.</span></span><br><span class="line">    r = img.find_template(template, <span class="number">0.70</span>, step=<span class="number">4</span>, search=SEARCH_EX) <span class="comment">#, roi=(10, 0, 60, 60))</span></span><br><span class="line">    <span class="keyword">if</span> r:</span><br><span class="line">        img.draw_rectangle(r)</span><br><span class="line"></span><br><span class="line">    print(clock.fps())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="openmv的lenet数字识别">openmv的Lenet数字识别</h3><h4 id="1-简单的de个bug">1、简单的de个bug</h4><p>我估计很多人看到了这个nn识别的方案，但是我估计很多人倒在的这个地方</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/202111121438620.png" alt="" loading="lazy"></p><p>因为官方把这个model给删除了（笑），另外还要注意一点，这个nn模型只支持3.6.5及以前的固件版本，如果你的固件是最新的版本的话，请刷回来老的固件版本才能使用。固件的话，自己去github找去。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/202111121439528.png" alt="" loading="lazy"></p><p>这个模型，我队友通过万能的淘宝给找回来了（笑）。点击下载<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/lenet.network">模型文件</a>，注意：该文件分享有效期为该文章发表日期起十日</p><h4 id="2-简单的跑个例程">2、简单的跑个例程</h4><p>刷好固件，存进去模型之后就可以运行了,例程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LetNet数字识别例程</span></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, os, nn</span><br><span class="line"></span><br><span class="line">sensor.reset()                         <span class="comment"># 复位并初始化传感器。</span></span><br><span class="line"></span><br><span class="line">sensor.set_contrast(<span class="number">3</span>)</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line"><span class="comment">#设置图像色彩格式，有RGB565色彩图和GRAYSCALE灰度图两种</span></span><br><span class="line"></span><br><span class="line">sensor.set_framesize(sensor.QVGA)      <span class="comment"># 将图像大小设置为QVGA (320x240)</span></span><br><span class="line"></span><br><span class="line">sensor.set_windowing((<span class="number">128</span>, <span class="number">128</span>))       <span class="comment"># 设置128 x128窗口。</span></span><br><span class="line">sensor.skip_frames(time=<span class="number">100</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)</span><br><span class="line">sensor.set_auto_exposure(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载lenet神经网络模型</span></span><br><span class="line">net = nn.load(<span class="string">&#x27;/lenet.network&#x27;</span>)</span><br><span class="line">labels = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">clock = time.clock()                <span class="comment"># 创建一个时钟对象来跟踪FPS帧率。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># 更新FPS帧率时钟。</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># 拍一张照片并返回图像。</span></span><br><span class="line">    out = net.forward(img.copy().binary([(<span class="number">150</span>, <span class="number">255</span>)], invert=<span class="literal">True</span>))</span><br><span class="line">    max_idx = out.index(<span class="built_in">max</span>(out))</span><br><span class="line">    score = <span class="built_in">int</span>(out[max_idx]*<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">70</span>):</span><br><span class="line">        score_str = <span class="string">&quot;??:??%&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        score_str = <span class="string">&quot;%s:%d%% &quot;</span>%(labels[max_idx], score)</span><br><span class="line">    img.draw_string(<span class="number">0</span>, <span class="number">0</span>, score_str)</span><br><span class="line"></span><br><span class="line">    print(clock.fps())             </span><br><span class="line">    <span class="comment"># 注意: 当连接电脑后，OpenMV会变成一半的速度。当不连接电脑，帧率会增加。</span></span><br><span class="line">    <span class="comment">#打印当前的帧率。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的效果图我忘记存了，改天重现一下，但是这个方案的结果是：<strong>识别效果很垃圾！<strong>3，6，9不分1，7不分，2，4不分，再加上帧率只有tm的</strong>5帧</strong>，不适合放在车上边移动边识别（哪怕你停下来识别效果也很拉）</p><h4 id="3-简单的训个模型">3、简单的训个模型</h4><p>这个是使用的官方的nnlenet模型，其实我们蛮可以自己训练一个，官方也在下面说过，可以自己训练模型。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/202111121449178.png" alt="" loading="lazy"></p><p>所以我自己训练了一个简单的模型，<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/train.png">点击打开模型示意图</a></p><p>因为没学过相关内容，就简单找了找教程，自己搞个足够大的数据集，然后丢进炼丹炉，然后练好后取出。<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/train.tflite">模型文件</a>(注意：该文件十日后失效)</p><p>官方例程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenMV Image Classification Example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, os, tf</span><br><span class="line"></span><br><span class="line">sensor.reset()                         <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)    <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)      <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.set_windowing((<span class="number">240</span>, <span class="number">240</span>))       <span class="comment"># Set 240x240 window.</span></span><br><span class="line">sensor.skip_frames(time=<span class="number">2000</span>)          <span class="comment"># Let the camera adjust.</span></span><br><span class="line"></span><br><span class="line">net = <span class="string">&quot;trained.tflite&quot;</span><span class="comment">#模型名称</span></span><br><span class="line">labels = [line.rstrip(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;labels.txt&quot;</span>)]<span class="comment">#标签，训练集自带的那个就行</span></span><br><span class="line"></span><br><span class="line">clock = time.clock()</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line"></span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># default settings just do one detection... change them to search the image...</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> tf.classify(net, img, min_scale=<span class="number">1.0</span>, scale_mul=<span class="number">0.8</span>, x_overlap=<span class="number">0.5</span>, y_overlap=<span class="number">0.5</span>):</span><br><span class="line">        print(<span class="string">&quot;**********\nPredictions at [x=%d,y=%d,w=%d,h=%d]&quot;</span> % obj.rect())<span class="comment">#打印坐标</span></span><br><span class="line">        img.draw_rectangle(obj.rect())</span><br><span class="line">        <span class="comment"># This combines the labels and confidence values into a list of tuples</span></span><br><span class="line">        predictions_list = <span class="built_in">list</span>(<span class="built_in">zip</span>(labels, obj.output()))<span class="comment">#定义数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(predictions_list)):</span><br><span class="line">            print(<span class="string">&quot;%s = %f&quot;</span> % (predictions_list[i][<span class="number">0</span>], predictions_list[i][<span class="number">1</span>]))<span class="comment">#对应的数字和概率</span></span><br><span class="line"></span><br><span class="line">    print(clock.fps(), <span class="string">&quot;fps&quot;</span>)<span class="comment">#打印个帧率不过分吧</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好巧不巧，这个效果图我也忘记保存了，改天补上。这个模型的识别效果就比nn好多了，但是仍然有一些不足，3，6，9仍然会有混滫错误。没办法，内存就那一丁点，跑不了太大的model。</p><h3 id="基于k210的数字识别">基于k210的数字识别</h3><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>int8_t等数据类型的区别</title>
      <link href="posts/52c127a1/"/>
      <url>posts/52c127a1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>工作中经常碰到int8_t、int16_t、int32_t、int64_t、uint8_t、size_t、ssize_t等数据类型，所以有必要对此进行梳理。</p><p><strong>int_t同类</strong></p><p>int_t 为一个结构的标注，可以理解为type/typedef的缩写，表示它是通过typedef定义的，而不是一种新的数据类型。因为跨平台，不同的平台会有不同的字长，所以利用预编译和typedef可以最有效的维护代码。</p><ul><li>int8_t   : typedef signed char;</li><li>uint8_t  : typedef unsigned char;</li><li>int16_t  : typedef signed short ;</li><li>uint16_t : typedef unsigned short ;</li><li>int32_t  : typedef signed int;</li><li>uint32_t : typedef unsigned int;</li><li>int64_t  : typedef signed long long;</li><li>uint64_t : typedef unsigned long long;</li></ul><table><thead><tr><th style="text-align:left">Specifier</th><th style="text-align:left">Common Equivalent</th><th style="text-align:left">Signing</th><th style="text-align:left">Bits</th><th style="text-align:left">Bytes</th><th style="text-align:left">Minimum Value</th><th style="text-align:left">Maximum Value</th></tr></thead><tbody><tr><td style="text-align:left"><code>int8_t</code></td><td style="text-align:left"><code>signed char</code></td><td style="text-align:left">Signed</td><td style="text-align:left">8</td><td style="text-align:left">1</td><td style="text-align:left">-128</td><td style="text-align:left">127</td></tr><tr><td style="text-align:left"><code>uint8_t</code></td><td style="text-align:left"><code>unsigned char</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">8</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">255</td></tr><tr><td style="text-align:left"><code>int16_t</code></td><td style="text-align:left"><code>short</code></td><td style="text-align:left">Signed</td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">-32,768</td><td style="text-align:left">32,767</td></tr><tr><td style="text-align:left"><code>uint16_t</code></td><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">0</td><td style="text-align:left">65,535</td></tr><tr><td style="text-align:left"><code>int32_t</code></td><td style="text-align:left"><code>int</code></td><td style="text-align:left">Signed</td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">-2,147,483,648</td><td style="text-align:left">2,147,483,647</td></tr><tr><td style="text-align:left"><code>uint32_t</code></td><td style="text-align:left"><code>unsigned int</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">0</td><td style="text-align:left">4,294,967,295</td></tr><tr><td style="text-align:left"><code>int64_t</code></td><td style="text-align:left"><code>long long</code></td><td style="text-align:left">Signed</td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">-9,223,372,036,854,775,808</td><td style="text-align:left">9,223,372,036,854,775,807</td></tr><tr><td style="text-align:left"><code>uint64_t</code></td><td style="text-align:left"><code>unsigned long long</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">0</td><td style="text-align:left">18,446,744,073,709,551,615</td></tr></tbody></table><p><strong>size_t与ssize_t</strong></p><p>size_t主要用于计数，如sizeof函数返回值类型即为size_t。在不同位的机器中所占的位数也不同，size_t是无符号数，ssize_t是有符号数。</p><ul><li>在32位机器中定义为：typedef  unsigned int size_t; （4个字节）</li><li>在64位机器中定义为：typedef  unsigned long size_t;（8个字节）</li></ul><p>由于size_t是无符号数，因此，<strong>当变量有可能为负数时，必须使用ssize_t</strong>。因为当有符号整型和无符号整型进行运算时，有符号整型会先自动转化成无符号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> b = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    a = b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//b=-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//a=65535</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，int 无论在32位还是64位机器中，都是4个字节, 且带符号，可见size_t与int 的区别之处。</p><p>下面是stdint.h中的详细定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 7.18.1.1  Exact-width integer types */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>   <span class="keyword">uint8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">uint32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7.18.1.2  Minimum-width integer types */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int_least8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>   <span class="keyword">uint_least8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int_least16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint_least16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int_least32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">uint_least32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int_least64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint_least64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  7.18.1.3  Fastest minimum-width integer types</span></span><br><span class="line"><span class="comment"> *  Not actually guaranteed to be fastest for all purposes</span></span><br><span class="line"><span class="comment"> *  Here we use the exact-width types for 8 and 16-bit ints.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int_fast8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">uint_fast8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int_fast16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint_fast16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int_fast32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>  <span class="keyword">int</span>  <span class="keyword">uint_fast32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int_fast64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint_fast64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7.18.1.5  Greatest-width integer types */</span></span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">intmax_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uintmax_t</span>;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c/c++ long int与long long的区别</title>
      <link href="posts/66a918cc/"/>
      <url>posts/66a918cc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><h1>long int</h1><p>long int即long，给人的感觉好像是长整型，但实际上，它和int一样，只有32位。cppreference给出的定义是——</p><blockquote><p><strong>int</strong> - basic integer type. The keyword int may be omitted if any of the modifiers listed below are used. If no length modifiers are present, it’s guaranteed to have a width of at least 16 bits. However, on 32/64 bit systems it is almost exclusively guaranteed to have width of at least 32 bits.<br><strong>long</strong> - target type will have width of at least 32 bits.</p></blockquote><p>在实际的使用中，long与int几乎没有区别，比如——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;l = %d\n&quot;</span>,l);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2018122510141490.png" alt="在这里插入图片描述" loading="lazy"><br>　　既然long int与int相同，那么为什么还有long int这种尴尬的类型呢？<br>　　原因是早期的C编译器定义了long int占用4个字节，int占用2个字节，long int是名副其实的<strong>长整型</strong>。在ANSI C的标准中，对长整型的定义也是<strong>long int应该至少和int一样长</strong>，而不是long int 一定要比int占用存储字节长。新版的C/C++标准兼容了早期的这一设定。</p><span id="more"></span><h1>long long</h1><p>long long则不同，long long是C++的64位整型的基本类型，“现任”长整型，从C99开始引入这个概念，在后续的标准中完善概念和定义，C++11官方正式标准如下——</p><blockquote><p><strong>long long</strong> - target type will have width of at least 64 bits.(since C++11)</p></blockquote><p>long long占用8个字节，数据表示范围也从int的[ − 2 31 , 2 31 − 1 ] [-2^{31},2^{31}-1][−231,231−1]，升级到[ − 2 63 , 2 63 − 1 ] [-2^{63},2^{63}-1][−263,263−1]。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ll = <span class="number">100000000000000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;l = %d\n&quot;</span>,l);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;ll = %lld\n&quot;</span>,ll);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181225103911667.png" alt="在这里插入图片描述" loading="lazy"><br>　　long long是C++的正式标准，这也就意味着，该类型不会因为编译器或者开发平台的不同而有所差异，放之四海而皆准，而且与一些系统函数、类库都有很好的交互（如常见的printf、scanf、cin和cout等）。与之相反，出身MS的__int64就有点不受待见了，在不同的编译器上可能水土不服。</p><h1>__int64</h1><p>在早期的代码中，可能会遇到<code>__int64</code>这种类型，这应该算是“历史遗留”问题。早期的C/C++标准中并没有规定64位长整型的规范，因此不同的编译器对这一模糊概念有不同的定义，我们熟知的VC6.0采用了<code>__int64</code>这种类型来表示64位长整型——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">__int64 i64 = -<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">63</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__int64:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(__int64)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;i64 = &quot;</span>&lt;&lt;i64&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181225104812530.png" alt="在这里插入图片描述" loading="lazy"><br>　　与long long具有相同的效果，但是，__int64并不是正式规范，比如，如果你使用的是MinGW的编译器的话，打开__int64的定义会发现——<br><img src="https://img-blog.csdnimg.cn/20181225105553149.png" alt="img" loading="lazy"><br>　　VS 2017虽然把__int64作为了一种内置类型，但是也做了类似的处理，使得__int64与long long没有肉眼可见的差别。但如果你使用的开发环境比较早期，那么可能就要专门研究一下__int64了。比如说，古老的VC6.0并没有long long这种类型，而__int64的输入输出，又需要printf和%I64d的配合，而不是%lld或者直接用cout。</p><h1>总结</h1><p>C/C++与Java等语言不同，具有较高的自由度，由于某些历史原因，某些概念在不同的平台上有不同的解释，虽然现在新版本的C++标准和编译器都在做兼容性工作，你可以在__int64与long long之间无缝切换，但至少，我们要清楚两者的不同。</p><table><thead><tr><th>类型</th><th>存储字节</th><th>表示范围</th></tr></thead><tbody><tr><td>int</td><td>4</td><td>-2147483648~2147483647</td></tr><tr><td>short int</td><td>2</td><td>-32768～+32767</td></tr><tr><td>long</td><td>4</td><td>-2147483648~2147483647（二十亿，约1 0 10 10^{10}1010）</td></tr><tr><td>long long</td><td>8</td><td>9223372036854775808～+9223372036854775807(九百亿亿，约1 0 19 10^{19}1019)</td></tr><tr><td>__int64</td><td>8</td><td>9223372036854775808～+9223372036854775807</td></tr></tbody></table><h1>参考链接</h1><p>1.<a href="https://blog.csdn.net/qq_31736627/article/details/52912691">https://blog.csdn.net/qq_31736627/article/details/52912691</a><br>2.<a href="https://en.cppreference.com/w/cpp/language/types">https://en.cppreference.com/w/cpp/language/types</a><br>3.<a href="https://www.cnblogs.com/ChenDinghao/p/6480937.html">https://www.cnblogs.com/ChenDinghao/p/6480937.html</a><br>4.<a href="https://blog.csdn.net/sk18192449347/article/details/55000087">https://blog.csdn.net/sk18192449347/article/details/55000087</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug</title>
      <link href="posts/dc1f9f4/"/>
      <url>posts/dc1f9f4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debug</title>
      <link href="posts/ad6468a3/"/>
      <url>posts/ad6468a3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center> <span id="more"></span><h5 id="00x01-命名">00x01 命名</h5><p>这是有个远古之前犯的bug，今天来复现一下。</p><p>如图所示，一个极其简单的入门级别的操作代码，没有啥问题吧？</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/20210928193215.png" alt="" loading="lazy"></p><p>但是吼，报错了嘿</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/20210928194231.png" alt="" loading="lazy"></p><p>仔细一看，发现了么，是因为命名出现了问题。<img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/20210928194412.png" alt="" loading="lazy"></p><p>改一下名字就好了，(<em>^_^</em>)</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/20210928194508.png" alt="" loading="lazy"></p><p>00x03</p><p>00x04</p><p>00x05</p><p>00x06</p><p>00x07</p><p>00x08</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写这句话的人建议拉去并网发电</title>
      <link href="posts/3391b988/"/>
      <url>posts/3391b988/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109272108878.jpg" alt="1" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宽禁带半导体材料的电力电子器件概述</title>
      <link href="posts/946a5cb7/"/>
      <url>posts/946a5cb7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="百字总结">百字总结</h4><p>宽禁带半导体材料被誉为第三代半导体材料，典型的材料代表有碳化硅、氮化镓、金刚石。在电力电子元件以及材料的研制中，碳化硅的研究时间最为长久，紧接其后的便是氮化镓。第三代半导体材料相比较传统工艺材料有明显的三大特性。比硅高得多的临界雪崩击穿电场强度和载流子饱和漂移速度、较高的热导率和相差不大的载流子迁移率，因此，基于宽禁带半导体材料(如碳化硅)的电力电子器件将具有比硅器件高得多的耐受高电压的能力、低得多的通态电阻、更好的导热性能和热稳定性以及更强的耐受高温和射线辐射的能力，许多方面的性能都是成数量级地提高。<br>之所以最近该材料广受关注，是因为人们普遍认为硅基材料已经接近材料特性的理论极限。为了人类的进步，以及国家的战略发展，众多攻城狮和科学家将精力放在了此处。目前该新型材料（其实不新了，最早可以追溯到上个世纪）的发展一直受制于材料的提炼、制造以及随后半导体制造工艺的困难。目前金刚石在这些宽禁带半导体材料中性能是最好的，很多人称之为最理想的或最具前景的电力半导体材料。但是金刚石材料提炼和制造以及随后的半导体制造工艺也是最困难的（所以才有人去研究石墨烯）。目前，碳化硅的工艺较为成熟。其优异的特性使其在研制高温、高频、大功率、抗辐射器件以及紫外探测器、短波发光二极管等方面具有广阔的应用前景。</p><span id="more"></span><h3 id="何为宽禁带半导体材料">何为宽禁带半导体材料</h3><p>固体中电子的能量具有不连续的量值，电子都分布在一些相互之间不连续的能带上。价电子所在能带与自由电子所在能带之间的间隙称为禁带或带隙。所以禁带的宽度实际上反映了被束缚的价电子要成为自由电子所必须额外获得的能量。硅的禁带宽度为1.12电子伏特(eV)，而宽禁带半导体材料是指禁带宽度在2.3eV及以上的<a href="https://baike.baidu.com/item/%E5%8D%8A%E5%AF%BC%E4%BD%93%E6%9D%90%E6%96%99/5078">半导体材料</a>，典型的是<a href="https://baike.baidu.com/item/%E7%A2%B3%E5%8C%96%E7%A1%85/245856">碳化硅</a>(SiC)、氮化镓(GaN)、金刚石等材料。宽禁带半导体材料是被称为第三代半导体材料。</p><h3 id="sic器件概要">SIC器件概要</h3><p>以碳化硅(SiC)和氮化镓(GaN)为代表的第三代半导体材料具有非常显著的性能优势和巨大的产业带动作用，欧美日等发达国家和地区都将发展碳化硅半导体技术列入国家战略，积极投入巨资支持发展。随着SiC衬底、外延材料、工艺制造技术的改进，器件性能和生产成本不断降低。SiC电力电子器件打破了传统Si器件由于材料特性极限所造成的性能瓶颈，推动着电力电子技术领域的革新与发展。当前，传统电网正向以电力电子技术广泛应用为代表的智能电网方向发展。以未来电力电子变压器的核心应用为代表，对超高压大功率器件提出了更高的性能要求。碳化硅(SiC)器件具有高耐压、大电流、高频率、低损耗等优势，大大推动了设备小型化、轻量化、高效化、低能耗的发展，因此，高压大功率SiC材料及器件的实用化将决定电力电子设备的发展未来。</p><p>对于 10 kV 超高压 SiC 电力电子器件，一些工艺难度较低的器件，如 PiN 二极管、肖特基势垒二极管(SBD)等，发展较早，正趋向成熟；对于栅控器件，如 MOSFET、 IGBT，由 SiC 材料所带来的一些问题，如栅氧界面态密度高、沟道迁移率低、器件可靠性差等，随着近年来材料及工艺技术的提高，逐渐获得解决和完善，尽管起步较晚，但是发展迅速。 本文将重点针对近年来国内外智能电网用 10 kV以上 SiC 二极管(PiN、 SBD、 JBS 与 MPS)和晶体管(SiC MOSFET 与 IGBT)的器件结构、技术手段、发展现状来阐述超高压 SiC 电力电子器件的设计思路及其性能特点。</p><h4 id="超高压-sicpin-二极管">超高压 SiCPiN 二极管</h4><p>国外对于 SiCPiN 二极管的研究始于 20 世纪 90年代，凭借其简单且成熟的工艺优势， SiCPiN 二极管成为 SiC 电力电子器件的主力之一，尤其在超高压领域的研究已较为成熟。通过不断优化与改进结终端技术， SiCPiN 二极管成为目前超高压领域发展最完善的电力电子器件  。</p><p>2001 年日本关西电力研究中心和 CREE 共同报道了耐压达到 12~19 kV 的 MESA-JTE 结构的SiCPiN 二极管， 成为世界上首个超过 10 kV 的 SiC功率整流器。 器件通过结合 MESA 与单区 JTE 两种结终端技术，从而降低边缘电场集中效应，提高了器件击穿电压。</p><p>对于不同外延层浓度与厚度的SiCPiN二极管(A：N-漂移区掺杂浓度2×1014cm–3，厚度120μm；B：N-漂移区掺杂浓度8×1013cm–3，厚度200μm)，击穿电压分别达到了14.9 kV与19 kV，100 A/cm2时导通压降UF分别为4.4 V与6.5 V，关断延迟仅为商业化400 V耐压的Si基PiN二极管的1/4，动态损耗大大降低，如图1所示。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271830648.png" alt="image-20210927183034494" loading="lazy"></p><p>做为首个超过10 kV的SiC功率整流器，该研究对未来超高压SiC功率器件的发展具有重要的意义及借鉴作用。但是，MESA结构的缺点在于斜面角度与掺杂浓度需要进行优化，而且实际工艺中往往受到氧化层间电荷的影响。另一方面，器件击穿电压对于单区JTE区的掺杂浓度范围很敏感，因此在实际工艺中，要获得最大击穿电压对应的最优JTE掺杂浓度非常困难。因此，近年来国内外学者不断优化改进JTE终端结构，进一步提高了SiCPiN二极管性能。</p><p>2015年，Naoki Kaji等人通过结合间距调变JTE(space-modulated JTE，SM-JTE)与双区JTE(double zone JTE)结构，研制出了一种击穿电压超过26.9 kV的SiCPiN二极管，是目前报道的击穿电压最高的SiC电力电子器件，如图2所示。新结构通过优化SM-JTE的宽度与间距，降低了单区JTE边缘处的电场集中现象，从而克服了传统单区JTE存在的优化掺杂浓度范围窄的缺点。同时，与传统双区JTE结构相比，JTE区同样只需要2次离子注入，没有增加工艺步骤与难度。该结构器件特性如图3所示。一方面，相比传统单区JTE与双区JTE结构，新结构JTE优化掺杂浓度范围显著扩宽；另一方面，当N-区厚度分别为98μm和268μm时二极管的击穿电压超过13 kV和26.9 kV，达到了理论平行平面结击穿电压的70%，同时差分导通电阻分别为1.87 mΩ·cm2及9.7 mΩ·cm2，正向压降分别为3.1 V和4.72 V，在保证优良正向导通特性的条件下，大大提高了器件的击穿电压。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271831805.png" alt="image-20210927183155665" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271832155.png" alt="image-20210927183209986" loading="lazy"></p><h4 id="超高压sic-sbd二极管">超高压SiC SBD二极管</h4><p>肖特基势垒二极管(schottky barrier diode，SBD)是一种金半接触的整流器件，SiC SBD相较于SiCPiN二极管，其主要优势在于导通压降只有1 V左右，仅为PiN二极管的1/3，大大降低了器件的导通损耗。但是，金半接触也导致其反向耐压较低，泄漏电流较大，如今商业化的SiC SBD大多在千伏量级，对于10 kV以上的超高压领域，目前国内外的研究均较少。2003年，赵建华等人报道了首个10 kV SiC SBD二极管。该器件的终端利用刻蚀与外延生长形成多级JTE结构，如图4所示。二极管击穿电压为10.8 kV，电流密度48 A/cm2时正向导通压降为6 V，比导通电阻187 mΩ·cm2。器件的缺点显而易见，反向泄漏电流较大。</p><h4 id="超高压sic-jbs与mps二极管">超高压SiC JBS与MPS二极管</h4><p>JBS与MPS二极管结构上类似，均是结合PiN高耐压大电流与SBD低导通压降、高开关速度的优点，其区别在于：JBS二极管选用肖特基势垒较低的金属接触，漂移区较薄，导通时仅SBD部分参与导电，关断时PN结反偏形成耗尽层承受耐压，多用于低压领域；而MPS选用肖特基势垒相对较高的金属接触，漂移区较厚，导通时SBD与PiN均参与导电，多用于高压领域。JBS与MPS的综合性能均高于单一PiN和SBD器件，且工艺难度不大，因此，在超高压应用领域，SiC JBS与MPS二极管扮演着重要角色。</p><h4 id="超高压sic-mosfet与igbt晶体管">超高压SiC MOSFET与IGBT晶体管</h4><p>金属氧化物场效应半导体(MOSFET)与绝缘栅双极型晶体管(IGBT)均是栅控型电力电子器件，其输入阻抗高、温度稳定性好、安全工作区大，是目前中高压领域发展的主流器件，尤其IGBT更是结合了MOSFET与BJT的优点，在高压大电流应用领域远超其他器件，是目前发展最为迅速的功率器件。同样，在10 kV领域，SiC MOSFET与SiC IGBT相比传统器件具有巨大优势。一方面，SiC MOSFET与SiC IGBT大大降低了功率损耗，减少了系统元器件数目，简化了电路拓扑结构，提高了效率。另一方面，超高压SiC MOSFET与SiC IGBT为一些<br>受到Si材料极限限制的应用领域，如固态电力电子变压器，提供了扩展发展空间的途径。由CREE公司设计研制的10~15 kV SiCMOSFET和15 kV SiC IGBT代表了目前超高压功率器件发展的最高技术水平，并引起了国际上对于超高压SiC MOSFET和SiC IGBT晶体管的广泛研究。2015年Jeffrey B等人报道了新一代的10 kVSiC MOSFET，如图8所示，对于8.1 mm×8.1 mm的器件，通过优化改进，其室温下导通电阻从第一代的160 mΩ降低至100 mΩ。</p><h4 id="sic器件在电力电子变压器中的应用">SiC器件在电力电子变压器中的应用</h4><p>电力电子变压器与传统变压器相比具有重量轻、体积小、单位功率因数高等优点。随着分布式发电系统、智能电网技术以及可再生能源的发展，面向智能电网的电力电子变压器逐渐发展为具有电气隔离、可再生能源并网接入等多种功能的智能化电力电子设备。然而，早期电力电子变压器的理论和实验研究受到当时大功率器件和高压大功率变换技术发展水平以及Si基器件材料性能极限带来的开关频率的限制，未能实用化。随着10 kV以上SiC电力电子器件的出现，电力电子变压器的研究取得了新的突破。</p><p>2009年W Sung等人报道了15 kV SiCIGBT，打破了传统Si基功率开关器件的频率限制，使固态变压器取代传统配电变压成为可能。如图14所示的FREEDM系统中，15 kV SiC IGBT将被用于固态变压器技术中，取代系统中变压器和配电控制，实现可再生能源的发展，提高电能质量。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271859338.png" alt="image-20210927185929187" loading="lazy"></p><p>2014年J. W. Palmour等人报道了15 kVSiC MOSFET，与商业化6.5 kV的Si IGBT比较，如表2所示，击穿电压高2倍多，且开关损耗仅为其1/30。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271901898.png" alt="image-20210927190134793" loading="lazy"></p><p>15 kV的SiC MOSFET和JBS被应用在第二代电力电子变压器中，与第一代采用6.5 kV的硅基IGBT电力电子变压器(如图15所示)相比较，不再使用复杂的器件或拓扑串联结构，开关频率由原来的1 kHz提升至20 kHz，开关损耗大大降低，并且可靠性大大提高。</p><h4 id="超高压sic器件在直流及交流断路器中的应用">超高压SiC器件在直流及交流断路器中的应用</h4><p>直流断路器凭借其高速的开关特性和方便的控制能力，以及瞬时、高频、低损耗和高安全性的特性得到了广泛的关注。15 kV SiC ETO器件被应用于直流断路器，如图所示，实现了9 kV/50 A下的可靠性工作。在大容量柔性直流输电技术发展的推动下，超高压大容SiC器件在未来直流断路器的应用中必定具有光明的应用前景。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271908466.png" alt="image-20210927190806346" loading="lazy"></p><p>交流固态断路器的主要特点就是快速性和可靠性，对电网故障的快速检测系统起着十分重要的作用。目前已有研究者提出基于15 kV SiC ETO及15 kV PiN二极管的混合交流断路器，如图所示，实现了中压领域超过100 A的故障电流条件下，4 ms内快速断路。相比传统机械断路器40~100 ms，速度提升了一个数量级，大大提高了交流固态断路器的快速性和可靠性。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/pic/202109271910964.png" alt="image-20210927191023879" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB的常用函数</title>
      <link href="posts/6b735cd/"/>
      <url>posts/6b735cd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="第一篇：matlab软件函数">第一篇：Matlab软件函数</h3><h4 id="一-软件操作函数">一、软件操作函数</h4><h5 id="1-命令窗口函数：">1）命令窗口函数：</h5><p>clc：清空命令窗口，使用向上箭头翻看命令。</p><p>open:打开文件，文本文件（<em>.doc），可执行文件（</em>.exe），图形文件（<em>.fig），超文本文件（</em>.html，<em>.htm），MATLAB数据库文件（</em>.mat），simulink模型文件*.mdl），MATLAB p文件（<em>.p），PDF文件（</em>,pdf），PPT文件（<em>.ppt），工程文件（</em>.prj），网址(*.url)和变量等。</p><p>format：设置数据输出格式。format（‘command’）</p><p>disp:在commandwindow中显示字符和矩阵。</p><p>​    disp(x)—x为矩阵</p><p>​    disp(‘x’)—x为字符</p><p>​    disp([‘x’ a ‘y’])—打印字符合集</p><p>clear：从工作空间中清空变量。clear, clear name,clear global name, clear –regexpexpr1 expr2</p><p>​    clear:清空工作空间的所有变量</p><p>​    clear name—clear(‘name’):清空以name命名的m文件，mex文件或变量名</p><p>​    clear globe name:完全清空以name命名的全局变量，清空后该全局变量不能被函数调用。</p><h5 id="2-帮助函数">2)帮助函数</h5><p>demo：通过help浏览器访问工具箱的演示文件。—demo’MATLAB’</p><p>doc:在help浏览器中打开相应帮助页面。</p><p>help：在MATLAB命令窗口中显示MATLAB的m函数，mdl文件，工具箱等的帮助信息。</p><h4 id="二-文件编程函数">二、文件编程函数</h4><h5 id="1-文件目录操作函数">1)文件目录操作函数</h5><p>dir:显示当前工作空间目录文件  dir; dirname;</p><p>files=dir(‘directory’):返回指定目录中的文件信息到结构体file中，结构体file中包含的信息为：name,data,bytes,isdir,datenum</p><h5 id="2-文件编辑调试函数">2)文件编辑调试函数</h5><p>dbstep:从当前断点中执行一行或多行代码 dbstep; dbstep nlines;dbstep in</p><p>dbstop:设置断点  dbstop inmfile ; dbstop in mfile at lineno</p><p>debug:列举出m文件的调试函数</p><p>mlint:检查m文件可能出现的问题，并报告结果—mlint(‘m-filename’)</p><p>profile:调试优化m文件代码—界面Desktop–Profiler</p><h5 id="3-文件脚本函数">3)文件脚本函数</h5><p>function:声明函数  function [out1, out2, …]=funname(in1,in2,…)：定义一个名为funname的函数，该函数输入参数为in1、in2、……输出参数为out1、out2、……</p><p>input:请求用户输入  user_entry=input(‘prompt’) ：在屏幕上显示prompt作为提示，等待键盘输入，并返回用户输入的值。user_entry=input(‘prompt’,‘s’)：将键入的字符返回为文本变量而非变量名或数值。</p><h5 id="4-语句控制函数">4）语句控制函数</h5><p>break:终止执行for循环或者while循环, break语句结束循环，把语句控制返回给循环结束后的语句。</p><p>continue:传递控制给下一个for或while循环</p><p>case:条件为真时执行代码,case是switch语法中的允许有条件执行语句的一部分。case语句块由case函数，case表达式和其后的一条或多条语句构成。</p><p>switch:有条件执行的代码，在基本语法中，当switch_expr ==case_expr时执行相关语句，如果没有实例表达式与switch表达式相匹配，则语句控制传递给otherwise语句块。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`method=&#x27;bigger&#x27;;`</span><br><span class="line">`switch method`</span><br><span class="line">`case&#x27;bigger&#x27;`</span><br><span class="line">`a=3;`</span><br><span class="line">`case&#x27;middle&#x27;`</span><br><span class="line">`a=2;`</span><br><span class="line">`case&#x27;small&#x27;`</span><br><span class="line">`a=1;`</span><br><span class="line">`otherwise`</span><br><span class="line">`a=0;`</span><br><span class="line">`end`</span><br></pre></td></tr></table></figure><p>If:如果条件为真，则执行相关语句  if expression, statements, end</p><p>elseif:—if expression1,statement1,elseifexpresstion,statement2,end</p><p>else:如果条件为假时执行语句</p><p>end:终止代码块，或为数组的最后一位数字索引, end用来终止for、while、switch、try和if语句—end函数也作为数组的最后一个索引，如X(3:end)和X(1,1:2:end-1)。可以用end增加数组，如X存在的情况下使用X(end+1)=5。</p><p>error:显示信息并终止函数—error(‘说明信息’)</p><p>for：反复运算指定代码块 forvariable=initval:endval, statements, end</p><p>while:当条件为真时重复执行语句—whileexpression,statement,end</p><p>return:从调用函数中返回</p><h5 id="5-内存控制函数">5)内存控制函数</h5><p>global:声明全局变量  初始化为一个空矩阵</p><p>isglobal:判断一个变量是否是全局变量</p><p>persistent:定义静态全局常量</p><h3 id="第二篇：数据类型函数">第二篇：数据类型函数</h3><h4 id="三-基本数据类型函数">三、基本数据类型函数</h4><h5 id="1-数值函数">1）数值函数</h5><p>double：转换为双精度浮点数</p><p>single:转换为单精度浮点数</p><p>typecast：在不改变数据大小情况下转换数据类型 Y=typecast(X,type)</p><p>​    type可选范围:‘uint8’、‘int8’、‘uint16’、‘int16’、‘uint32’、‘int32’、‘uint64’、‘int64’、‘single’、‘double’</p><p>arrayfun:把函数应用到数组中的每个元素 A=arrayfun(fun, S)应用fun函数到数组S中的每个元素，将结果返回给数组A。</p><p>​    A=arrayfun(fun, S, T, …)</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x(1).f1&#x3D;2;x(2).f1&#x3D;3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x(1).f2&#x3D;3;x(2).f2&#x3D;3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result&#x3D;arrayfun(@(x)isequal(x.f1,x.f2),x)</span><br></pre></td></tr></table></figure><p>cast:转变数值数据类型 B=cast(A,newclass)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`a=int16(2);`</span><br><span class="line">`b=cast(a,&#x27;char&#x27;);`</span><br><span class="line">`cate=class(b)`</span><br></pre></td></tr></table></figure><p>cat:连接数组  C=cat(dim, A,B)–cat(2,A,B)与[A,B]相同，cat(1,A,B)与[A;B]相同</p><p>class:创建对象或者返回对象类型  obj=class(s,‘class_name’)</p><p>find：寻找非零元素的索引和值</p><p>​    ind=find(X)；X可以是逻辑式，返回非零元素的索引</p><p>​    ind=find(X, k, ‘first’) 返回数组X中所有非零元素的前k个元素。</p><p>​    ind=find(X, k, ‘last’) 返回数组X中所有非零元素的后k个元素。</p><p>​    [row,col,v]=find(X,…)返回列向量，行向量，v表示非零值</p><p>isequal ：判断两个对象是否相等 比较结构体是否相等时，结构体中子域的顺序不重要 NaNs在此函数中认识不相等—isequal(A,B,…)相同返回1，不同返回0</p><p>isequalwithequalnans:把NaN视为相等的情况下判断两个数组是否相等</p><h5 id="2-字符串转化数值函数">2）字符串转化数值函数</h5><p>base2dec :把指定进制的数字字符串转换为十进制数 d=base2dec(‘strn’, base)</p><p>bin2dec :把二进制数字字符串转换为十进制数 bin2dec(binarystr)</p><p>hex2dec :把十六进制数字字符串转换为十进制数 d=hex2dec(‘hex_value’)</p><p>hex2num :把十六进制数字字符串转换为双精度浮点数 n=hex2num(S)</p><p>str2double :把字符串转换为双精度浮点数</p><p>str2num :把字符串转换为数字</p><h5 id="3-数值转化为字符串函数">3）数值转化为字符串函数</h5><p>dec2base:把十进制数转换为指定基下的数值字符串 str=dec2base(d, base)</p><p>dec2bin :把十进制数转换为二进制数值字符串</p><p>dec2hex :把十进制数转换为十六进制的数值字符串</p><p>int2str :把整数转换为字符串</p><p>mat2str :把矩阵转换为字符串</p><p>num2str :把数字转换为字符串</p><h4 id="四-高级数据类型函数">四、高级数据类型函数</h4><h5 id="1-结构体函数">1）结构体函数</h5><p>cell2struct :把元胞数组转换成结构体数组 s=cell2struct(c, fields,dim) fields指结构体数组的域名，fields可以说字符数组或者字符串元胞数组。</p><p>size(c,dim)==length(fields)%如果fields是元胞数组 size</p><p>(c,dim)==size(fields,1)%如果fields是字符数组</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`c=&#123;&#x27;Tom&#x27;,&#x27;math&#x27;,80;&#x27;Jane&#x27;,&#x27;math&#x27;,70&#125;`</span><br><span class="line">`feilds=&#123;&#x27;name&#x27;,&#x27;subject&#x27;,&#x27;grade&#x27;&#125;;`</span><br><span class="line">`s=cell2struct(c,fields,2)`</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>struct:创建结构体数组 s=struct(‘field1’, values1, ‘field2’,values2, …)</p><p>struct2cell :把结构体数组转换为元胞数组</p><p>structfun :把函数应用于结构体中的每一个子域 A=structfun(fun, s)</p><h5 id="2-元胞数组函数">2)元胞数组函数</h5><p>cell ：创建元胞数组  c=cell(n)c=cell(m,n)</p><p>celldisp ：显示元胞数组的内容</p><p>cellfun ：把函数应用于元胞数组中的每个元素 A=cellfun(fun, C, D,…)</p><p>cellplot ：以图形形式显示元胞数组的结构</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`c&#123;1,1&#125;=&#x27;2-by-2&#x27;;c&#123;1,2&#125;=&#x27;eigenvalues ofeye(2)&#x27;;`</span><br><span class="line">`c&#123;2,1&#125;=eye(2);c&#123;2,2&#125;=eig(eye(2));`</span><br><span class="line">`cellplot(c)`</span><br></pre></td></tr></table></figure><p>cellstr ：根据字符串数组创建字符串元胞数组</p><p>mat2cell ：把矩阵分割为元胞数组 c=mat2cell(x,m, n)</p><p>num2cell ：把数值数组转变为元胞数组  C=num2cell(A)</p><h5 id="3-字符串函数">3)字符串函数</h5><p>func2str ：根据函数句柄构建函数名称字符串 s=func2str(fhandle)</p><p>char ：把整数数组转化为字符串 S=char(X)</p><p>eval ：执行包含MATLAB表达式的字符串 eval(expression)</p><p>findstr ：在长字符串中寻找匹配的短字符串,返回字符串索引</p><p>sprintf ：把一定格式把数据写入字符串  [s, errmsg]=sprintf(format,A, …)</p><p>strcat ：水平连接字符串  t=strcat(s1,s2, s3, …)</p><p>strcmp,strcmpi ：比较字符串—strcmp(‘str1’,‘str2’)相同返回1，不同返回0</p><p>strings函数：连接字符串name=[‘abc’ ‘def’ ‘ghj’]</p><p>strread ：从字符串中读取指定格式数据</p><p>strrep :发现和替换子字符串  str=strrep(str1, str2, str3) —将str1内的所有子字符串str2替换为str3</p><p>strtrim :删除字符串开头和结尾的空字符</p><p>blanks :创建空格字符串数组</p><p>isletter :判断字符串中字符是否为英文字母</p><p>isspace :判断字符串中字符是否为空格</p><p>isstrprop :判断字符串中是否含有指定类别的字符tf=isspace(‘str’)</p><p>dblank :删除字符串末尾空格</p><h3 id="第三篇：矩阵函数">第三篇：矩阵函数</h3><h4 id="五-数组和矩阵函数">五、数组和矩阵函数</h4><h5 id="1-数组基本函数">1）数组基本函数</h5><p>display：显示字符或者数组</p><p>isempty :判断数组是否为空，空返回1，不空返回0</p><p>isequal :判断数组是否相同 （认为NaN不同）</p><p>isequalwithequalnans:判断数组是否相同，把NaN看成相同的数</p><p>isfinite :判断数组元素是否为有限数</p><p>isfloat :判断数组元素是否为浮点数</p><p>isinf :判断数组元素是否为无限数</p><p>isinteger :判断元素是否为整数</p><p>islogical ：判断元素是否为逻辑变量</p><p>isnan ：判断元素是否为NaN</p><p>isnumeric ：判断数组元素是否为数值</p><p>isscalar ：判断输入是不是离散量</p><p>issparse ：判断矩阵是否为稀疏矩阵</p><p>isvector ：判断输入是否为向量</p><p>length ：计算向量的长度</p><p>max ：找出向量中的最大元素</p><p>C=max(A) A为一个向量，返回向量最大值，矩阵A，返回每列向量最大值</p><p>C=max(A,B) A、B维数一样，返回对应位置最大元素</p><p>max(A,[],dim)</p><p>[C,I]=max(A)找出最大值和索引</p><p>min ：找出向量中的最小元素</p><p>ndims ：计算矩阵的维数  ndims同length(size(x)) 一致</p><p>numel：计算数组中元素的个数或者下标数组表达式的个数</p><p>size ：计算数组维数大小 d=size(X) [m,n]=size(X)m行n列 m=size(X,dim)</p><h5 id="2-数组操作函数">2）数组操作函数</h5><p>bsxfun：两个数组间元素逐个计算 C=bsxfun(fun,A,B)</p><p>@plus(加)@minus（减）@times(数组乘)@rdivide（左除）@ldivide（右除）@power（幂）@max@min@rem（整除）@mod（模除）</p><p>dot :向量点乘 C=dot(A,B)</p><h5 id="3-基础矩阵函数">3）基础矩阵函数</h5><p>create :生成随机数流  [s1,s2,…]=RandStream.create(‘gentype’,‘NumStreams’,n)</p><p>eye :生成单位矩阵 Y=eye([m,n])对角线1，其他0</p><p>ones :生成元素为1的数组 Y=ones(n) Y=ones(m,n)</p><p>rand :生成均匀分布的伪随机数矩阵 r=rand(n) rand(m,n,p,…)</p><p>randi :生成均匀分布的伪随机整数矩阵 randi(imax) r=randi(imax,n)</p><p>r=randi(imax,m,n,p,…) r=randi([imin,imax],…) 例：r=randi([5,10],[2,3])</p><p>randn :生成[-1,1]之间随机分布数矩阵 r=randn(n) randn(m,n)randn(m,n,p,…)</p><p>randstream :生成随机数据流</p><p>set (RandStream) :设置随机数据流属性set(S,‘PropertyName’,Value)</p><p>set(S,‘Property’)</p><h5 id="4-矩阵处理函数">4)矩阵处理函数</h5><p>reshape ：改变矩阵维数  B=reshape(A,m,n)</p><p>sort :把数组元素按升序或降序排列</p><p>B=sort(A,dim) B=sort(…,mode) [B,IX]=sort(A,2)返回B元素在A中的位置的索引</p><p>sortrows :矩阵行按照升序排列</p><h5 id="5-矩阵分析函数">5）矩阵分析函数</h5><p>det :求方阵行列式值</p><p>norm :计算向量或者矩阵范数  n=norm(A) n=norm(A,p)</p><p>normest :返回矩阵2-范数估计值</p><p>null :计算矩阵零空间</p><p>rank :返回矩阵的秩</p><p>subspace :返回两个子空间夹角</p><p>trace :返回矩阵的迹对角元素之和</p><h5 id="6-矩阵特征值函数">6）矩阵特征值函数</h5><p>eig :计算矩阵特征值和特征向量</p><p>condeig :计算特征值对应的条件数</p><p>eigs :计算矩阵的最大特征值和特征向量</p><p>gsvd :矩阵广义奇异值分解</p><p>svd :矩阵奇异值分解</p><h3 id="第四篇-数学函数">第四篇 数学函数</h3><h4 id="六-基本数学函数">六、基本数学函数</h4><h5 id="1-基本运算符">1）基本运算符</h5><p>+：加法运算符</p><p>-：减法运算符</p><p>*：矩阵乘法</p><p>.*：数组乘法</p><p>/：斜杠或者矩阵右除  B/A等于公式B*inv(A)</p><p>./：数组右除  A./B等于A(i,j)/B(i,j)</p><p>\：反斜杠或者矩阵左除  A\B等于inv(A)*B</p><p>.\：数组左除   A.\B等于B(i,j)/A(i,j)</p><p>^：矩阵幂计算</p><p>.^：数组幂计算  A.^B等于A(i,j)的B(i,j)次幂</p><p>’：矩阵转置</p><p>[]：表示空矩阵，A(m,:)删除A中的一行，A(:,n)删除A中的一列</p><p>{}：元胞组赋值</p><p>关系操作符：&lt; &lt;= &gt; &gt;= == ~ =</p><p>逻辑操作符 : 逻辑：&amp;&amp; || 数组：&amp; | ~</p><h5 id="2-数据操作函数">2）数据操作函数</h5><p>sort ：数组元素按升序或降序排列 B=sort(A) B=sort(A,dim) B=sort(…,mode)[B,IX]=sort(A,…)</p><p>sortrows ：把矩阵中每行按照升序排列  B=sortrows(A) B=sortrows(A,column)</p><p>sum ：求数列元素的和  B=sum(A) A是向量，向量求和，A是矩阵就没列求和 B=sum(A,dim)</p><h5 id="3-统计分析函数">3）统计分析函数</h5><p>brush:交互式标记、删除、修改以及保存图片中的观测量位  data brush</p><p>corrcoef ：计算相关性系数 R=corrcoef(X)</p><p>cov ：返回协方差矩阵 cov(x)</p><p>max ：求数组中的最大元素   C=max(A) C=max(A,B) C=max(A,[],dim)</p><p>mean ：求数组的平均数或者均值 M=mean(A) M=mean(A,dim)</p><p>median ：返回数组的中间值 M=median(A) M=median(A,dim)</p><p>mode ：求数组中出现频率最多的值  M=mode(X) M=mode(X, dim)</p><p>[M,F]=mode(X, …)</p><p>std ：计算标准差 s=std(X)</p><p>var ：计算方差 V=var(X)</p><h5 id="4-三角函数">4）三角函数</h5><p>acos ：以弧度的形式返回反余弦值</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`x=-1:.05:1;`</span><br><span class="line">`plot(x,acos(x));grid on`</span><br></pre></td></tr></table></figure><p>acosd ：以角度的形式返回反余弦值</p><p>acosh ：以弧度形式返回反双曲余弦值</p><p>acot ：以弧度的形式返回反余切值</p><p>acotd ：以角度的形式返回反余切值</p><p>acoth ：以弧度的形式返回反双曲余切值</p><p>acsc :以弧度的形式返回反余割值</p><p>acscd :以角度的形式返回反正割值</p><p>acsch :以弧度的形式反双曲余割值</p><p>asec :以弧度的形式返回反正割值</p><p>asecd :以角度的形式返回反正割值</p><p>asech :以弧度的形式返回反双曲正割值</p><p>asin :以弧度的形式返回反正弦值</p><p>asind :以角度形式返回反正弦值</p><p>asinh :以弧度的形式返回反双曲正弦值</p><p>atan :以弧度的形式返回反正切值</p><p>atand :以角度的形式返回反正切值</p><p>atanh :以弧度的形式返回反双曲正切值</p><p>cos :以弧度的形式返回输入的余弦值</p><p>cosd :以角度的形式返回输入的余弦值</p><p>cosh :以弧度的形式返回输入的双曲余弦值</p><p>cot :以弧度的形式返回输入的余切</p><p>cotd :以角度的形式返回输入的余切值</p><p>coth :以弧度的形式返回输入的双曲余切值</p><p>csc :以弧度的形式返回输入的余割值</p><p>cscd :以角度形式返回输入的余割值</p><p>csch :以弧度的形式返回双曲余割值</p><p>sec :以弧度的形式返回输入的正割值</p><p>secd :以角度的形式返回输入的正割值</p><p>sech :以弧度的形式返回双曲正割值</p><p>sin :以弧度的形式返回输入的正弦</p><p>sind :以角度的形式返回输入的正弦值</p><p>sinh :以弧度的形式返回输入的双曲正弦值</p><p>tan :以弧度的形式返回输入的正切值</p><p>tand :以角度的形式返回输入的正切值</p><p>tanh :以弧度的形式返回双曲正切</p><h5 id="5-指数函数">5）指数函数</h5><p>exp ：计算指数</p><p>log ：计算自然对数</p><p>log10 ：计算平凡对数（以10为底）</p><p>log2 ：计算以2为底数的对</p><p>pow2 ：计算以2为底的幂</p><p>nthroot：计算实数值的实n阶方根。y=nthroot(X,n)</p><p>sqrt ：计算平方根</p><p>abs ：计算绝对值和复数模值</p><h5 id="6-除法函数">6）除法函数</h5><p>ceil ：向正无穷方向舍入</p><p>fix ：向零方向舍入</p><p>floor ：向负无穷方向舍入</p><p>idivide ：舍入操作  C=idivide(A,B, opt)</p><p>mod ：计算相除后的模值</p><h5 id="7-排列函数">7）排列函数</h5><p>factorial：阶乘—factorial（N），N！</p><p>perms：元素所有可能的全排列</p><h4 id="七-高级数学函数">七、高级数学函数</h4><h5 id="1-微分方程解函数">1）微分方程解函数</h5><p>decic ：计算和ode15i（ode常微分方程）相容的初始条件</p><p>[y0mod,yp0mod]=decic(odefun,t0,y0,fixed_y0,yp0,fixed_yp0)</p><p>deval ：计算微分方程的解   sxint=deval(sol,xint)  sol是求解器返回的结构体，（ode45, ode23, dde23 xint是点或向量，函数求解的是该点上的值。</p><p>deval :计算微分方程的解   sxint=deval(sol,xint)</p><h5 id="2-极值函数">2）极值函数</h5><p>fminbnd ：在指定区间上求解单变量函数的最小值x=fminbnd(fun,x1,x2)x=fminbnd(fun,x1,x2,options)  结构体options用于指定优化参数</p><p>[x,fval]=fminbnd(…)   [x,fval,exitflag]=fminbnd(…)</p><p>[x,fval,exitflag,output]=fminbnd(…)</p><p>fminsearch ：利用derivative-free算法求无约束多变量函数的最小值</p><p>x=fminsearch(fun,x0)x=fminsearch(fun,x0,options)</p><p>[x,fval,exitflag]=fminsearch(…)</p><p>fzero：求单变量连续函数的零值点 x=fzero(fun,x0) x=fzero(fun,x0,options)</p><p>isqnonneg :求解非负最小二乘法约束问题</p><p>x=lsqnonneg(C,d)返回一个向量x，满足x &gt;= 0时(C*x-d)的范数最小。</p><p>x=lsqnonneg(C,d,x0) x=lsqnonneg(C,d,x0,options)</p><h5 id="3-数值积分函数">3）数值积分函数</h5><p>dblquad ：计算矩形区域的二重定积分</p><p>q=dblquad(fun,xmin,xmax,ymin,ymax)</p><p>q=dblquad(fun,xmin,xmax,ymin,ymax,tol)q=dblquad(fun,xmin,xmax,ymin,ymax,tol,method)</p><p>quad ：求基于变步长Simpson法的函数定积分数值解 q=quad(fun,a,b)</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F&#x3D;@(x)1.&#x2F;(x.^3-2*x-5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Q&#x3D;quad(F,0,2)</span><br></pre></td></tr></table></figure><p>quad2d ：在平面区域求二重积分的数值解  q=quad2d(fun,a,b,c,d)</p><p>实例：Q=quad2d(@(x,y)y.*sin(x)+x.<em>cos(y),pi,2</em>pi,0,pi)</p><h5 id="4-微分积分函数">4）微分积分函数</h5><p>dblquad ：计算矩形区域的二重定积分 q=dblquad(fun,xmin,xmax,ymin,ymax)</p><p>cumtrapz ：累积梯形数值积分 Z=cumtrapz(Y)Z=cumtrapz(X,Y) 对于多维数组从第一维开始计算 Z=cumtrapz(X,Y,dim)</p><p>diff :差分与微分近似 Y=diff(X) Y=diff(X,n) Y=diff(X,n,dim)</p><p>gradient :计算函数数值梯度  FX=gradient(F) [FX,FY]=gradient(F)</p><p>实例：绘制函数z=exp(-x.^2-y.^2)的梯度图形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`v=-2:0.2:2;`</span><br><span class="line">`[x,y]=meshgrid(v);`</span><br><span class="line">`z=exp(-x.^2-y.^2);`</span><br><span class="line">`[px,py]=gradient(z,0.2,0.2);`</span><br><span class="line">`contour(v,v,z)`</span><br><span class="line">`hold on`</span><br><span class="line">`quiver(v,v,px,py)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926095356.png" alt="image-20210926095340360" loading="lazy"></p><p>trapz :梯形数值积分 Z=trapz(Y) Z=trapz(X,Y) Z=trapz(…,dim)</p><h5 id="5-赋值函数">5)赋值函数</h5><p>biltin:重载方法中执行MATLAB内部自带的函数  builtin(…) 函数和 feval(…)函数相同</p><p>evalc :计算表达式值  T=evalc(S)：同函数eval(S)用法相同</p><p>feval :计算函数值  [y1, y2, …]=feval(fhandle, x1, …, xn)</p><h3 id="第五篇：方程函数">第五篇：方程函数</h3><h4 id="八-插值函数-线性方程解函数和多项式函数">八、插值函数、线性方程解函数和多项式函数</h4><h5 id="1-插值函数">1）插值函数</h5><p>interp1q ：1维快速线性插值法 yi=interp1q(x,Y,xi)</p><p>​    interp1q正常执行条件：</p><p>（1）x单调递增列向量</p><p>（2）Y为列向量or行数为length(x)(3)xi为列向量，如果xi值在x的坐标范围外，返回NaN</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`x=(-5:0.5:5)&#x27;;`</span><br><span class="line">`y=sin(x);`</span><br><span class="line">`xi=(-5:0.5:5)&#x27;;`</span><br><span class="line">`yi=interp1q(x,y,xi);`</span><br><span class="line">`plot(x,y,&#x27;o&#x27;,xi,yi)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926095806.png" alt="image-20210926095802196" loading="lazy"></p><p>interp2 ：2维数据插值法</p><p>​    ZI=interp2(X,Y,Z,XI,YI)</p><p>​    ZI=interp2(Z,XI,YI)</p><p>​    ZI=interp2(X,Y,Z,XI,YI,method)</p><p>​    （1）‘nearest’：最邻近插值法；</p><p><img src="C:/Users/49475/AppData/Roaming/Typora/typora-user-images/image-20210926095826309.png" alt="image-20210926095826309" loading="lazy"></p><p>​    （2）‘linear’：线性插值法（默认插值方法）；</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100005.png" alt="image-20210926095912064" loading="lazy"></p><p>​    （3）‘spline’：三次样条插值法；</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100043.png" alt="image-20210926100040286" loading="lazy"></p><p>​    （4）’cubic’：三次插值法</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100104.png" alt="image-20210926100100798" loading="lazy"></p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`[X,Y]=meshgrid(-2:0.5:2);`</span><br><span class="line">`Z=peaks(X,Y);`</span><br><span class="line">`[XI,YI]=meshgrid(-2:0.125:2);`</span><br><span class="line">`ZI=interp2(X,Y,Z,XI,YI);`</span><br><span class="line">`mesh(X,Y,Z)`</span><br><span class="line">`hold on`</span><br><span class="line">`mesh(XI,YI,ZI+10)</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100153.png" alt="image-20210926100150073" loading="lazy"></p><p>interp3 ：3维数据插值法</p><p>​    VI=interp3(X,Y,Z,V,XI,YI,ZI)</p><p>​    VI=interp2(X,Y,Z,V,XI,YI,ZI,method)</p><p>​    （1）‘nearest’：最邻近插值法；</p><p>​    （2）‘linear’：线性插值法（默认插值方法）；</p><p>​    （3）‘spline’：三次样条插值法；</p><p>​    （4）’cubic’：三次插值法</p><p>​</p><p>interpft ：基于FFT方法的1维插值法 y=interpft(x,n) y=interpft(x,n,dim)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`y=[1 2 3 2 1 23];`</span><br><span class="line">`N=length(y);`</span><br><span class="line">`L=5;`</span><br><span class="line">`M=N*L;`</span><br><span class="line">`x=0:L:L*N-1`</span><br><span class="line">`xi=0:M-1`</span><br><span class="line">`yi=interpft(y,M)`</span><br><span class="line">`plot(x,y,&#x27;o&#x27;,xi,yi,&#x27;*&#x27;)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100231.png" alt="image-20210926100216325" loading="lazy"></p><p>interpn ：n维数据插值（表格查询）VI=interpn(X1,X2,X3,…,V,Y1,Y2,Y3,…)</p><p>meshgrid ：为3维绘图生成X和Y矩阵</p><p>[X,Y]=meshgrid(x,y) [X,Y,Z]=meshgrid(x,y,z)</p><p>ndgrid ：生成可为函数和插值算法使用的n维矩阵</p><p>[X1,X2,X3,…]=ndgrid(x1,x2,x3,…)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`[X1,X2]=ndgrid(-1:0.1:1,-1:0.1:1);`</span><br><span class="line">`Z=exp(-X1.^2-X2.^2);`</span><br><span class="line">`mesh(Z)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100349.png" alt="image-20210926100345433" loading="lazy"></p><p>pchip ：分段三次厄密插值多项式（PCHIP） yi=pchip(x,y,xi)pp=pchip(x,y)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`x=-4:4`</span><br><span class="line">`y=[-3 -2 -2 0 0 0 2 2 3];`</span><br><span class="line">`t=-4:0.01:4;`</span><br><span class="line">`p=pchip(x,y,t);`</span><br><span class="line">`s=spline(x,y,t);`</span><br><span class="line">`plot(x,y,&#x27;o&#x27;,t,p,&#x27;-&#x27;,t,s,&#x27;-.&#x27;)`</span><br><span class="line">`legend(&#x27;data&#x27;,&#x27;pchip&#x27;,&#x27;spline&#x27;,4)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100422.png" alt="image-20210926100418901" loading="lazy"></p><p>spline ：曲线三次样条插值  yy=spline(x,Y,xx)  pp=spline(x,Y)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`x=0:10;`</span><br><span class="line">`y=cos(x);`</span><br><span class="line">`xx=0:0.1:10;`</span><br><span class="line">`yy=spline(x,y,xx);`</span><br><span class="line">`plot(x,y,&#x27;o&#x27;,xx,yy)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926100518.png" alt="image-20210926100515126" loading="lazy"></p><h5 id="2-线性方程解函数">2)线性方程解函数</h5><p>linsolve ：使用部分主元LU因子分解法求解线性方程组  X = linsolve(A,B) [X, R] = linsolve(A,B)  X = linsolve(A,B,opts)</p><p>lscov ：已知协方差时求解方程的最小二乘解</p><p>x = lscov(A,b)  线性方程组A*x = b的一般最小二乘解</p><p>x = lscov(A,b,w)  线性方程组A*x = b的加权最小二乘解</p><p>x = lscov(A,b,V)  线性方程组A*x = b 的广义最小二乘解</p><p>x =lscov(A,b,V,alg)</p><p>bicg ：求解线性方程的双共轭梯度法</p><p>x=bicg(A,b) bicg(A,b,tol)bicg(A,b,tol,maxit)</p><p>bicg(A,b,tol,maxit,M1,M2)bicg(A,b,tol,maxit,M1,M2,x0)[x,flag]=bicg(A,b,…)</p><p>[x,flag,relres]=bicg(A,b,…)[x,flag,relres,iter]=bicg(A,b,…)</p><p>[x,flag,relres,iter,resvec]=bicg(A,b,…)</p><p>bicgstab ：求解线性方程的稳定的双共轭梯度法</p><p>bicgstabl ：求解线性方程的双共轭梯度l稳定法</p><p>bicgstab ：求解线性方程的稳定的双共轭梯度法</p><p>bicgstabl ：求解线性方程的双共轭梯度l稳定法</p><p>cgs ：求解线性方程的共轭梯度平方法</p><p>gmres ：求线性方程的广义最小残差法</p><p>lsqr ：求解线性方程的LSQR 方法</p><p>minres :求解线性方程的最小残差法</p><p>pcg :求解线性方程的预处理共轭梯度法</p><p>qmr :求解线性方程的准最小残差法</p><p>symmlq :求解线性方程的对称 LQ 法</p><p>tfqmr :求解线性方程的自由转置准最小残差法</p><h5 id="3-多项式函数">3)多项式函数</h5><p>polyfit ：多项式拟合</p><p>​    p=polyfit(x,y,n) 根据拟合数据x,y求n阶多项式p(x)的系数，p是系数</p><p>​    [p,S]=polyfit(x,y,n) p是系数，使用S和多项式的值能得到误差估计值或预测</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`x=(-3:0.2:3)&#x27;;`</span><br><span class="line">`y=erf(x);`</span><br><span class="line">`p=polyfit(x,y,3)`</span><br><span class="line">`f=polyval(p,x);`</span><br><span class="line">`plot(x,y,&#x27;*&#x27;,x,f,&#x27;-&#x27;)`</span><br></pre></td></tr></table></figure><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210926101210.png" alt="image-20210926101206088" loading="lazy"></p><p>polyval ：多项式求值   y=polyval(p,x)</p><p>poly ：根据根求解多项式</p><p>polyder ：解析求解多项式微分表达式k=polyder§ k=polyder(a,b)</p><p>polyint ：解析求解多项式积分表达式系数  polyint(p,k)</p><p>mkpp ：构建分段多项式  pp=mkpp(breaks,coefs)</p><p>breaks是一个长度为L+1的向量，该向量元素严格递增。coefs为L*k的矩阵，每行元素代表</p><p>[breaks(i),breaks(i+1)]的k阶多项式的系数。</p><h4 id="十一-基本文件操作函数">十一、基本文件操作函数</h4><h5 id="1-文件创建函数">1）文件创建函数</h5><p>filemaker ：把文件名与文件中函数名分开 。</p><p>filesep ：文件目录分隔。</p><p>fileparts ：把目标文件名拆分成字符串形式输出 。</p><p>tempdir ：返回系统暂存地址名 。</p><p>tempname ：返回系统暂存文件名 。</p><p>fullfile :创建文件名</p><h5 id="2-文件打开-读取-存储函数">2）文件打开、读取、存储函数</h5><p>open:打开文件 —用法：open(‘name’)</p><p>load :将文件导入到MATLABworkspace中。loadfilename load filename X Y Z,</p><p>load-asciifilename ,load-mat filename,load(‘arg1’, ‘arg2’, ‘arg3’, …)</p><p>save:存储文件.save filename, save filename content, savefilename options</p><p>save(‘filename’, ‘var1’, ‘var2’, …)</p><p>daqread ：读数据采集工具箱(.daq)中的文件 。</p><p>​     [data, time, abstime, events, daqinfo]= daqread(‘filename’)</p><p>uiimport :调用文件导入助手</p><h5 id="3-简单文件输入输出函数">3)简单文件输入输出函数</h5><p>fopen ：打开文件。</p><p>​    fid = fopen(filename)</p><p>​    fid = fopen(filename,permission)</p><table><thead><tr><th>Permission值</th><th>打开模式</th></tr></thead><tbody><tr><td>‘r’</td><td>只读模式</td></tr><tr><td>‘w’</td><td>可写入模式，覆盖已有内容</td></tr><tr><td>‘a’</td><td>可写入模式，写入数据到文件末尾</td></tr><tr><td>‘r+’</td><td>可读写模式，</td></tr><tr><td>‘w+’</td><td>可写入模式，覆盖已有内容</td></tr><tr><td>‘a+’</td><td>可写入模式，写入数据到文件末尾</td></tr><tr><td>‘A’</td><td>无自动删除添加</td></tr><tr><td>‘W’</td><td>无自动删除写入</td></tr></tbody></table><p>fclose 关闭文件。status=fclose(fid) ,status=fclose(‘all’)</p><p>fprintf:以指定格式将数据写入文件 。count = fprintf(fid, format, A, …)</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> `x=1:0.1:2;`</span><br><span class="line">. `y=[x,sin(x)];`</span><br><span class="line">3. `fid=fopen(&#x27;sin.txt&#x27;,&#x27;wt&#x27;);`</span><br><span class="line">4. `fprintf(fid,&#x27;%5.2f %5.6f\n&#x27;,y);`</span><br><span class="line">5. `fclose(fid)`</span><br></pre></td></tr></table></figure><p>fscanf ：以指定格式读取文件中的内容 。A =fscanf(fid, format) , [A,count] = fscanf(fid, format, size)</p><p>fread ：读取文件中的二进制数据 。A =fread(fid, count ,precision, skip, machineformat)</p><p>fwrite ：将二进制数据写入到文件中 。</p><p>fseek ：设置文件位置指针 。status = fseek(fid,offset, origin)</p><p>ftell ：获取文件位置指针 。position = ftell(fid)</p><p>fwind ：把文件位置指针移动到文件起始位置 。fwind(fid)</p><p>fgetl ：按行读取文件内容，并删去换行符 。tline = fgetl(fid)</p><p>fgets ：按行读取文件内容，并保留换行符 。tline = fgets(fid, nchar)</p><p>frewind ：将文件指针移到文件的起始位置。 frewind(fid)</p><p>feof ：测试是否为文件的末尾 。message = ferror(fid)</p><p>ferro ：测试文件输入输出是否有错误 。message = ferror(fid,‘clear’) , [message,errnum] = ferror(…)</p><p>disp ：将目标文件所包含的信息以不同形式显示，如文本、数组等形式。</p><p>disp(obj)</p><h5 id="4-电子表格操作函数">4)电子表格操作函数</h5><p>xlsfinfo ：检测文件中是否包含Microsoft Excel电子表格文件 。</p><p>typ = xlsfinfo(filename) [typ,desc, fmt] = xlsfinfo(filename)</p><p>xlsread ：读Microsoft Excel电子表格文件中的内容 。</p><p>num = xlsread(filename)，num = xlsread(filename,sheet)，num =xlsread(filename, range)，num = xlsread(filename, sheet, range, ‘basic’)</p><p>[num,txt,raw,X]=xlsread(filename,sheet, range, ‘basic’)</p><p>xlswrite :将数据写入Microsoft Excel电子表格文件中 。</p><p>xlswrite(filename, M)，xlswrite(filename, M, sheet, range)，</p><p>[status, message] = xlswrite(filename, …)</p><p>wk1finfo ：检测文件中是否包含Lotus 1-2-3 WK1电子表格。</p><p>[extens, typ] = wk1finfo(filename)</p><p>wk1read ：读取Lotus 1-2-3 WK1电子表格文件 。</p><p>M = wk1read(filename) ，M = wk1read(filename,r,c,range)</p><p>wk1write ：将数据写入Lotus1-2-3 WK1电子表格文件中 。</p><p>wk1write(filename,M,r,c)</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB基础__软件初展望</title>
      <link href="posts/305021c5/"/>
      <url>posts/305021c5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="matlab最基础教程-零-：基本数学概念"><strong>MATLAB最基础教程（零）：基本数学概念</strong></h3><p>前言：matlab只是个软件，用来完成相关数学的计算，而如何安排这些计算，需要用户掌握最基本的数学概念。如果不理解相关的数学概念，则自然不会使用这个软件。</p><h4 id="1-数值与符号"><strong>1.数值与符号</strong></h4><p>如果给工程数学问题分类，最大的两类肯定是数值问题和符号问题，对应matlab的数值运算和符号运算。简而言之，数值运算就是所有的变量的值已知，求解的也是一些具体的值；符号运算则刚好相反，不要求所有的变量都已知，求解的结果也不是变量具体的值，而是变量之间的关系。一个简单的例子是<br>①数值问题：求解一元二次方程，<strong>ax2+bx+c=0</strong>，其中<strong>a=b=c=1</strong>，所求得的结果一定是<strong>x=几点几+几点几i</strong>，是个复数，是个具体的数值。<br>②符号问题：求解一元二次方程，<strong>ax2+bx+c=0</strong>，所求的的结果一定是<strong>x=求根公式</strong>，是abc的函数，是个关系<br>可见，一个问题是数值问题还是符号问题，很大程度上决定于结果需要求解的是数值还是关系。当然两个问题也可以相互转化，比如数值问题的一元二次方程，我们一般会先转化成符号问题，把abc代入求根公式，求出来变量x的具体数值。但实际中，一般我们并不推荐这样做，原因是matlab的数值和符号是完全不同的两套系统，相互转化不仅需要多余的数值符号转换语言，更可能带来查错的不便。</p><h4 id="2-典型数值问题"><strong>2.典型数值问题</strong></h4><p>以下是常见的数值问题，文中提到的解法均可在数值计算、科学计算、数值算法这类书中找到。</p><h4 id="2-1代数方程"><strong>2.1代数方程</strong></h4><p>代数方程又分为线性方程和非线性方程，线性方程一般可以转化为矩阵形式<strong>AX=b</strong>，对A求逆即可。求逆的数值解法一般有高斯赛德尔迭代，超松弛迭代等。非线性方程一般转化为<strong>f(x)=zeros</strong>其中x是个向量，右侧的<strong>zeros</strong>表示<strong>f</strong>是个多输出函数，数值解法一般是迭代，常见的有牛顿迭代，最速梯度，点斜式等。</p><h4 id="2-2常微分方程"><strong>2.2常微分方程</strong></h4><p>常微分方程一般转化为<strong>Dy=f(y,t)，且y(0)=y0</strong>是初始条件，其中<strong>y和Dy都是向量</strong>，f也是个多输出函数，数值解法有<strong>欧拉法，龙格库塔法</strong>。</p><h4 id="2-3偏微分方程"><strong>2.3偏微分方程</strong></h4><p>偏微分方程比较复杂，matlab处理偏微分方程也不专业，我也几乎不用matlab处理这类问题。但工程数学上，偏微分方程的解法有两类，差分法和有限元法。差分法需要采用中心差分，迎风差分等。有限元需要计算刚度矩阵等。</p><h4 id="2-4插值和拟合"><strong>2.4插值和拟合</strong></h4><p>插值和拟合是完全不同的两个数学概念，虽然很多时候很多人都混淆了。两者的描述都可以归结为：已知函数上的点**(x1,y1),(x2,y2)…(xn,yn)<strong>，求一个已知的</strong>x**，对应的<strong>y</strong>的数值。插值常用的<strong>多项式插值，三次样条插值</strong>。拟合的本质是一个<strong>最优化</strong>问题，其中最常用的一种拟合是线性拟合，求解方法是最小二乘法。</p><h4 id="2-5离散周期傅里叶变换"><strong>2.5离散周期傅里叶变换</strong></h4><p>严格说来，这并不能算一个数学问题，只是一种运算方式，就好像加减乘除一样。特殊性在于这种变换是对于一个向量进行，且运算后的结果依然是个向量。这里提出来是为了强调这种傅里叶变换的限定，要求是离散周期，这也是数值方法能处理的唯一一种傅里叶变换。</p><h4 id="2-6最优化问题"><strong>2.6最优化问题</strong></h4><p>最优化问题比较宽泛，一般可以归结为求目标函数f(x)的最大或者最小值，其中f是一个单输出的函数，x是一个向量。其中x需要满足线性约束条件、非线性约束条件、上下界。具体的解法有<strong>最速梯度，遗传，蚁群，退火等算法</strong>。</p><h4 id="2-7数值积分"><strong>2.7数值积分</strong></h4><p>已知函数上的点(x1,y1),(x2,y2),…(xn,yn)，求函数在x1到xn的定积分。常见算法有矩形公式，梯形公式，辛普森公式。类似的问题还有数值求导。</p><h4 id="3-典型符号问题"><strong>3.典型符号问题</strong></h4><p>以下是常见的符号问题，需要特别指出的是，无解问题。数值问题中也有一部分无解问题，但大多数工程中是碰不到的。而符号问题恰好相反，绝大部分我们遇到的符号问题都是没有解的，或者准确的说，没有解析解。比如求一元五次方程，我们知道x和这些系数存在关系，但无法写出显式的表达式，也就是说没有解析解。</p><h4 id="3-1递推转通项"><strong>3.1递推转通项</strong></h4><p>这个问题可以归结为：已知<strong>xn+1=f(xn)，求xn</strong>，常见于数列的推导。</p><h4 id="3-2代数方程"><strong>3.2代数方程</strong></h4><p>区别于数值问题中的代数方程， 这里的代数方程问题可以描述为：<strong>f(x,c)=0，求x=x©</strong>，这里需要求解的其实是x和c的关系。</p><h4 id="3-3常微分方程"><strong>3.3常微分方程</strong></h4><p>区别于数值问题中的常微分数方程， 这里的代数方程问题可以描述为：<strong>Dy=f(y,t,c)，求y=x(t,c)</strong>，一般无需初值条件。</p><h4 id="3-4符号积分"><strong>3.4符号积分</strong></h4><p>区别于数值问题中的数值积分，这里的符号积分可以描述为：已知函数关系<strong>y=f(x)</strong>，求<strong>y</strong>的不定积分。同样的问题还有符号求导。</p><h3 id="matlab最基础教程-一-：软件基本概念">matlab最基础教程（一）：软件基本概念</h3><h4 id="1-matlab的界面-汉化的可略过"><strong>1.matlab的界面</strong>（汉化的可略过）</h4><p>左上角，home标签下，找到layout进行设置/复位，可以设置各板块的显示与隐藏。其中有几个部分，请务必要显示<br>①<strong>Current Folder</strong>：中文一般翻译成工作路径，一般设置成一个自己建立的、有读写权限的文件夹，例如我的文档下建立一个matlab文件夹<br>②<strong>Command Window</strong>：字面意思是命令窗口，用来运行代码，所有的代码都是在这里输入<br>③<strong>Workspace</strong>：字面意思是工作空间，其实就是暂存所有运行结果的地方，“暂”的具体含义是：关闭matlab后丢失</p><h4 id="2-软件中的基本概念"><strong>2.软件中的基本概念</strong></h4><h5 id="2-1-函数"><strong>2.1 函数</strong></h5><p>matlab之所以强大，就是因为提供大量的函数，你也可以建立自定义函数，方法是：Home-&gt;New-&gt;function。自定义函数一般保存在工作路径下。函数文件的特征是：扩展名m，内容的第一行以function开头，后续内容是“输出变量=函数名(输入变量)”。且函数名和文件名相同。<br>每个函数在Command Window中运行，用来完成特定的计算任务，运行方式是输入“输出变量=函数名(输入变量)”，然后按回车。例如有个系统自带的函数是用来求绝对值的，函数名abs，所以在Command Window里输入“a=abs(-1)”，就会显示运算结果为“a=1”。且运算结果会在Workspace里出现一个变量a，双击后可看到a的值是1。</p><h5 id="2-2-脚本"><strong>2.2 脚本</strong></h5><p>可以理解为特殊的函数，这种函数内容的开头没有function那行，因此没有输入、输出变量，也没有函数名。文件扩展名和函数一样是m，也需要在Command Window里运行。脚本都是用户建立的，方法是：Home-&gt;New Script。一般保存在工作路径下。脚本的功能就是完成用户需要的、复杂的计算任务，通常脚本里会调用很多函数。</p><h5 id="2-3-gui"><strong>2.3 GUI</strong></h5><p>一般翻译为界面，就是人机交互界面的意思。写脚本处理问题的方法有点麻烦，让人看起来更像是码农，所以现在很多问题可以通过界面点点鼠标解决。这时候就需要打开界面，打开方法是：在APPS标签里可以找到所有已安装的GUI工具，单击即可。注意右边有个小三角可以点开。和函数一样，用户也可以自己建立自定义GUI，这部分较为复杂，对新手而言有点遥远。</p><h5 id="2-4-toolbox"><strong>2.4 toolbox</strong></h5><p>一般翻译成工具箱，matlab将功能相近或者应用上自成体系的一组函数和GUI打包成一个toolbox。正版的matlab在购买时，几乎每一个toolbox都是要单独收费的，所以toolbox也可以理解为matlab产品的模块，一个工具箱就是一个产品/商品。</p><h5 id="2-5-simulink-仿真"><strong>2.5 simulink</strong>（仿真）</h5><p>一般用matlab解决问题的过程是：用户自定义脚本，在Command Window里运行脚本。而脚本的运行逻辑是顺序执行，和一般的编程一样。simulink则提供另一种思路，图形化编程，有点像labview，这种方法很适合于物理模型的仿真，因此有时用“matlab编程”和“simulink仿真”强调。使用方法是在home标签下点击simulink。</p><h4 id="3-获得帮助"><strong>3.获得帮助</strong></h4><p>常用的获得帮助有四种方法<br>①home标签里，有个Help标志，点开后可以获得各工具箱/产品的完整帮助文档。新版本中默认使用在线，改用本地帮助的办法是在home标签里，Preferences下的matlab/Help里选择installed locally<br>②cn.mathworks.com官网上找到支持，然后可以获得教程。这种方法获得的帮助文档和第一种方法一样。<br>③在Command Window里输入 doc+函数名 来获得帮助。比如输入&quot;doc fft&quot;可以获得离散傅里叶变换函数fft的帮助和范例。这种方法获得的文档是前两种方法文档中的部分。当然，前提是你要知道函数名，才能找到帮助。这种方法适合于获得系统自带函数的使用说明。<br>④使用GUI时，通常界面的角落里有Help，点开可以获得帮助。这种方法获得的文档是第一和第二种方法文档中的部分。这种方法适合于获得系统自带GUI的使用说明。<br>这几种方法中，最常用的是第三种，只要知道自己需要的函数名，就可以用这种方式获得说明和范例。而实际使用中，一般常用的系统自带函数，也并不是非常多，大概几十个？真正需要牢记使用方法的可能就几个，通常都是知道函数名，要用的时候doc一下。</p><h3 id="matlab最基础教程-二-：变量类型与赋值"><strong>matlab最基础教程（二）：变量类型与赋值</strong></h3><p>前言：matlab解决问题的最基本思路是建立脚本文件，那么脚本文件的第一段就是定义一些变量，这和C语言等编程思想是一样的。matlab提供的变量类型很多，最基础的是三种：数值变量、符号变量、字符串，其他的类型还有cell、table等。这里仅说明最基础的变量类型。</p><h4 id="1-数值变量"><strong>1.数值变量</strong></h4><p>matlab中所有的数值变量都是矩阵，赋值时，以方括号作为开头和结尾，以英文逗号或空格分割同行元素，以英文分号分割各列。例如在Command Window里输入<br><strong>a=[1 2;3 4]</strong>* *可以看到运算结果，a是一个数值变量。同时workspace里出现一个田字形的变量a，说明变量a的类型是数值型。</p><p>向量和数字可以视为特殊的矩阵，例如</p><ol><li><strong>a=[1 2]</strong></li><li><strong>a=[1;2]</strong></li></ol><p>分别是行向量和列向量，<strong>a=[1]<strong>可以简写为<br><strong>a=1</strong> 是数字。<br>数值变量的命名要求是英文字母开头，不能包含特殊符号，大小写敏感。这里推荐采用下划线来进行分割，例如</strong>value_of_A</strong>，这和其他编程语言的命名规则大体相当。<br>赋值中，有时需要用到等差数列，例如定义一个向量<strong>a=[1 2 3]</strong>，如果比较长，赋值很麻烦，所以matlab提供了一个简单的方法<br>**a=[1:1:3]**这里两个冒号的意思是起始值:步长:终值。采用这种赋值方式时可以获得一个等差数列行向量，并可以省略两侧的方括号。当步长为1时，可以省略步长和一个冒号，于是可以简写为<br><strong>a=1:3</strong> 另一种灵活的赋值方法是分块矩阵，其方法是变量名后面加圆括号，圆括号中加序号。例如</p><ol><li><strong>a=[1 2;3 4]</strong></li></ol><p>定义变量a之后，<br><strong>b=a(1,2)</strong> 就可以把a的第一行第二列元素赋值给b，当然也可以用<br><strong>a(1,2)=1</strong> 来修改矩阵中部分元素的值。这里需要注意，序号必须是自然数，且不能是零。当矩阵中有多个元素需要赋值时，可以将序号部分改成向量，例如<br><strong>a([1 2],[1 2])=[1 2;3 4]</strong> 中把行数和列数都用向量表示，就是说对矩阵a的第1和2行，第1和2列，总共4个元素赋值。更进一步，也可以有**a([1 2],1)**表示a的第一列，也可以写成<br>**a(1:end,1)**这里的end表示终点，即a的行数2，也可以更进一步简写成<br>**a(:,1)**这里的冒号表示从头至尾。这类赋值方法最为常用，但基本的语法非常简单，方括号表示矩阵开头和结尾，圆括号表示从矩阵中选取部分，把握这个原则，有利于读懂程序。<br>当然分块矩阵也可以<br>**b=[a a]**这样的赋值方法，但需要注意的是，方括号中的元素必须满足矩阵的行列数要求，例如</p><ol><li><strong>a=[1 1]</strong></li><li><strong>b=[1;1]</strong></li><li><strong>c=[a b]</strong></li></ol><p>就会引起错误，因为此时matlab无法确定c的行列数。</p><h4 id="2-符号变量"><strong>2.符号变量</strong></h4><p>总体而言，符号变量比数值变量简单得多，因为变化非常少，常用的赋值命令是<br>syms a b这里syms表示这里要定义一些符号变量，a和b是变量名，符号变量的命名规则和数值变量一样。有时候也采用<br>syms a real来强调a是实数变量，具体可以doc syms来获得帮助。<br>有些变量之间存在依赖关系，此时可以定义<br>syms x y(x) 这里声明x是一个符号变量，又声明y是一个符号变量，且y的值由x决定，这相当于数学中函数的概念。当然具体的函数关系并没有明确规定。也可以<br>syms x y z(x,y)来定义符号变量z，z依赖x和y。这相当于二元函数的概念。这里的圆括号显然和数值变量中的圆括号含义完全不同，这也是学习matlab最不习惯的地方，同一个符号，由于变量类型不同会有完全不同的含义。所以在学习matlab的过程中，一定要区分数值变量和符号变量。<br>上述方法定义的符号变量是一个数，或者1*1矩阵，matlab中也可以定义符号矩阵，例如</p><ol><li><strong>syms a11 a12 a21 a22</strong></li><li><strong>A=[a11 a12;a21 a22]</strong></li></ol><p>就可以获得一个矩阵符号变量A。<br>定义符号变量后，workspace中出现相应的变量名，图形不是数值变量的田字形，而是方框里有个立方体，双击后可以看到行列数。</p><h4 id="3-字符串"><strong>3.字符串</strong></h4><p>比数值、符号更为简单的就是字符串了，其定义方法是以单引号开头和结尾，例如<br><strong>a='hello world’<strong>就定义了一个字符串</strong>a</strong>，其值为<strong>hello world</strong>。matlab中较为特殊的是，字符串可视为行向量，例如</p><ol><li><strong>b='hello '</strong></li><li><strong>c='world’</strong></li><li><strong>a=[b c]</strong></li></ol><p>也可以获得字符串a，其值为你好世界。另外，有时也可以将字符串视为矩阵，例如<strong>a=[‘ab’;‘cd’]<strong>但这种用法很罕见，同时要求各行字符串长度一样，否则将违反矩阵行列数规定。当然字符串的值也可以是特殊符号，比如’,'就定义了逗号，而最特殊的就是定义单引号，因为单引号会和字符串定义中的单引号混淆，因此matlab中用两个单引号表示一个单引号，也就是</strong>a=’’’'<strong>表示a是一个字符变量，值是一个单引号。语句中第一和第四个单引号是字符串类型的开头和结尾，中间两个单引号用来表示一个单引号。定义字符串变量后，workspace中出现相应的变量名，图像是方框里写了</strong>ch</strong>，双击后可以看到行列数。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PWM与PFM</title>
      <link href="posts/aeef000a/"/>
      <url>posts/aeef000a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="pwm-和-pfm">PWM 和 PFM</h3><p>PWM 不是用来调节开关式转换器输出电压的唯一技术。 这种技术不是通过改变固定频率方波的占空比来调节电源输出，而是采用恒定占空比，然后以调制方波频率方式来实现调节。 采用恒定导通和关断时间控制方式的 DC/DC 电压转换器是 PFM 架构的典型例子。</p><p>另外一个 PFM 例子就是所谓的滞后电压转换器。这种转换器采用一种简单调节方法，使 <a href="http://www.elecfans.com/tags/mosfet/">MOSFET</a> 能根据转换器检测到的输出电压变化导通和关断。 这种架构使输出电压在设定点左右往连续摆动，因此有时也称作“纹波稳压器”或“双滞环控制器”。 滞后作用用于保持预期运行，避免开关抖动。 因为滞后架构会根据<a href="http://www.hqpcb.com/">电路</a>的运行情况改变 MOSFET 的驱动信号，所以开关频率会改变。</p><p>PFM 架构在 DC/DC 转换方面确实拥有一定的优势，具体包括更优的低功耗转换效率、更低的总解决方案成本和简单的转换器拓扑结构，这种架构不需要控制环补偿网络，但由于一些明显的不足而不及 PWM 受欢迎。</p><p>首先是 EMI 控制。 相对于工作频率范围宽的器件，固定开关<a href="http://www.elecfans.com/tags/%E9%A2%91%E7%8E%87%E8%BD%AC%E6%8D%A2%E5%99%A8/">频率转换器</a>的滤波电路更易于设计。 第二，PFM 架构容易在输出端导致更大的电压纹波，进而给被供电的敏感性硅器件造成问题。 第三，低频（或甚至频率为零）的 PFM 会增加开关转换器的瞬态响应时间，导致一些便携式应用响应缓慢，引起客户不满。</p><p>然而，将 PWM 架构的优点与单晶片“双模式”开关转换器中的 PEM 器件的优点相结合，制造商能为我们提供在整个运行范围内具有高效率的解决方案。 与 PFM 有关的 EMI 问题已大大缓解，此类干扰的根本原因是高电流和高电压条件下的快速切换，反之，在双模式芯片中，仅在低电流和低电压运行时才会变频运行。</p><h4 id="开关稳压器中的能量损耗"><a href="http://www.elecfans.com/tags/%E5%BC%80%E5%85%B3%E7%A8%B3%E5%8E%8B%E5%99%A8/">开关稳压器</a>中的能量损耗</h4><p>最常见的开关设备调压技术是采用<a href="http://www.elecfans.com/tags/%E6%8C%AF%E8%8D%A1%E5%99%A8/">振荡器</a>和 PWM 控制器产生方形脉冲波， 这种方波会按照通常为数百兆赫兹范围内的一组频率，对装置的内部 MOSFET（或者同步设备中的 MOSFET）进行切换操作。 （如果不考虑更严重的电磁干扰 ［EMI］，就允许采用体积越小的<a href="http://www.hqchip.com/app/868">磁性元件</a>。） 稳压器的输出电压与 PWM 波形占空比成比例关系。</p><p>这种技术一般情况下运行良好，但低频时效率降低。 要了解其中原因，就需要考虑那里出现损耗，即稳压器输入端吸取的能量没有传输至输出端的负载。</p><p>开关稳压器有四大损耗源。 首先是对 MOSFET 栅极<a href="http://www.elecfans.com/tags/%E7%94%B5%E5%AE%B9/">电容</a>进行充放电所用的能量造成的动态损耗，这是<a href="http://www.elecfans.com/tags/%E6%99%B6%E4%BD%93%E7%AE%A1/">晶体管</a>高频运行时的最大损耗。 电流流经漏源通道且该通道上压差显著时发生开关损耗。 当功率开关元件的近零通道<a href="http://www.hqchip.com/app/dianzudianrongdiangan">电阻</a>流过高电流时，会出现其它 MOSFET 损耗。 （这就是功率元件制造商努力减小产品“导通电阻”的原因。）</p><p>除开关元件外，开关稳压器电路中的无源器件也容易出现低效率。 <a href="http://www.elecfans.com/tags/%E7%94%B5%E6%84%9F%E5%99%A8/">电感器</a>损耗包括导通（绕组中）损耗和<a href="http://www.hqchip.com/app/523">磁芯</a>损耗。 <a href="http://www.elecfans.com/tags/%E7%94%B5%E5%AE%B9%E5%99%A8/">电容器</a>损耗通常与元件的等效串联电阻 （ESR） 有关，并由器件的电容大小、运行频率和负载电流决定。</p><p>开关稳压器有两种实施方法。 工程师可以利用分立元件从零开始构建一个开关稳压器，或者在 <a href="http://www.elecfans.com/tags/te/">Te</a>xas Instruments、<a href="http://www.elecfans.com/tags/linear/">Linear</a> Technology 和 <a href="http://www.elecfans.com/tags/fairchild/">Fairchild</a> Semiconductor 等主要半导体供应商提供的许多种转换器 IC 中，为他们的电源选择一种，然后构建一个开关稳压器。 模块的优势在于其设计过程简化。 （请参见 TechZone 中的《DC/DC 稳压器：如何在分立式和<a href="http://www.hqchip.com/app/1022">模块化</a>设计之间选择》</p><p>然而，转换器 IC 本身会增加开关稳压器的总损耗。 例如， 一些能量需要为<a href="http://www.elecfans.com/tags/%E6%94%BE%E5%A4%A7%E5%99%A8/">放大器</a>、<a href="http://www.elecfans.com/tags/%E6%AF%94%E8%BE%83%E5%99%A8/">比较器</a>和基准提供内部偏置电流，但 IC 的主要损耗与 PWM 控制器的内部振荡器和驱动电路有关。 相对来讲，此类损耗在开关稳压器驱动高负载时不明显，但随着负载减小，与开关动作和外部无源器件有关的损耗会降低，而与转换器有关的损耗则保持不变。</p><p>这种情况有时会让便携式产品设计人员进退两难。 面临压力的工程师会想方设法控制<a href="http://www.elecfans.com/dianyuan/603907.html">电池</a>预算，因此选择一款高效率开关稳压器（如与<a href="http://www.elecfans.com/tags/%E7%BA%BF%E6%80%A7%E7%A8%B3%E5%8E%8B%E5%99%A8/">线性稳压器</a>比较）似乎是一种再明显不过的选择。 （参见 TechZone 中的《延长<a href="http://www.elecfans.com/d/725725.html">锂离子电池</a>续航时间的设计方法》） 然而，便携式产品在低功耗“待机”或“休眠”模式下时间相当长，其中，对开关转换器的要求则比较温和，且开关稳压器的运行效率相对较差。</p><p>典型的手持式设备在完全运行时的电流消耗约为 1 安培，但在待机或者休眠模式下则小于 1 毫安。 考虑到转换 IC 保持运行状态时就需消耗多达几个毫安的电流，低负载条件下的低转换效率会让人有些感到意外，因为稳压器总负载电流中相当大的一部分是静态电流。</p><h4 id="提升能效">提升能效</h4><p>为解决主要损耗问题（即与 PWM 控制器的内部振荡器和驱动电路有关的损耗），设计人员可在市面上的多种双模式开关转换器中选择一种。 这些器件融合了正常 PWM 运行功能 PFM 技术（在 PWM 模式下运行时，这种技术的可变频率通常远低于正常固定频率）</p><p>双模式开关转换器在中等到高电流之间运行时，进入连续导通模式（因此，<a href="http://m.elecfans.com/article/570177.html">电感</a>器中的电流永远不会降为零）。 负载电流减小时，转换器会切换至断续模式（当电感器中的电流由于轻负载确实降为零时）。 负载非常轻时，转换器进入 PFM（有时被制造商称作“省电模式 ［PSM］”）。 其他供应商会通过完全停止振荡器将变频运行的优势发挥到极致（通常指“脉冲跳跃”）。</p><p>应指出，低负载时使用 PFM 并不表示开关转换器使用了 PFM 架构，而是使用了能够在需要时利用 PFM 运行功能的 PWM 架构。</p><p>轻负载条件下，开关转换器的输出电容器能在开关脉冲的间隔时间内保持输出电压一段时间。 理想情况下，振荡器在空载时可完全关闭，且输出电压由于输出电容器的充满状态将保持恒定。 然而，寄生损耗会消耗电容器电能，且电路要求功率开关至少具有偶发脉冲，以保持调节过程中的稳压输出。</p><p>在 PFM 运行期间，输出功率与脉冲链的平均频率成比例，并且输出电压低于由反馈控制回路测得的设定输出电压时，转换器开始工作。 然后，转换器的开关频率持续升高，直到输出电压达到由设定输出电压和高于设定输出电压 0.8 - 1.5% 的电压值确定的范围内（如图 1 所示）。</p><p><a href="http://file.elecfans.com/web1/M00/82/EB/pIYBAFw-c7KAaus3AADJPAYucSU974.jpg"><img src="http://file.elecfans.com/web1/M00/82/EB/pIYBAFw-c7KAaus3AADJPAYucSU974.jpg" alt="PFM的工作原理、优势及集成功率芯片中实现PFM技术" loading="lazy"></a></p><p>图 1：PFM 改变稳压器的固定占空比脉冲链频率，以满足负载要求。</p><h4 id="pfm-操作的负面影响">PFM 操作的负面影响</h4><p>由于需要一个容差频带（非固定点）来检测功率开关何时再次导通，因此在开关转换器切换至 PFM 模式时能经常观察到输出电压纹波增加。 如采用较窄容差频带，转换器会提升开关频率，造成省电能力减弱。 工程师必须在提升低负载能效和提升输出电压纹波之间找到平衡点。 图 2a 和 2b 所示分别为 PWM 和 PFM 模式下的开关转换器运行时的电压纹波差异。</p><p><a href="http://file.elecfans.com/web1/M00/82/6C/o4YBAFw-c5GAc79YAAIuPMw78FE428.jpg"><img src="http://file.elecfans.com/web1/M00/82/6C/o4YBAFw-c5GAc79YAAIuPMw78FE428.jpg" alt="PFM的工作原理、优势及集成功率芯片中实现PFM技术" loading="lazy"></a></p><p>图 2：PWM 模式 （a） 和 PFM 运行 （b） 的电压纹波（感谢 Analog Devices 提供数据）。</p><p>在负载过渡期间，任何开关转换器都会在高负载向低负载过渡时出现某种程度的过冲，或者由低负载向高负载过渡时出现下冲。 转换器在 PSM 模式运行时，负载水平已很低，因此下一次负载过渡就是从低电流过渡到高电流（通常对应于由休眠向激活模式过渡）。 稳压器输出端的负载提升经常会造成持续“输出电压陷”，直至转换回路有时间对其做出响应。</p><p>一些开关转换器具有将这种电压陷降至最低的措施。 <a href="http://www.elecfans.com/tags/ti/">TI</a> 的 TPS62400 采用“动态电压定位”功能。 PSM 运行期间，输出电压设定点会稍有提升（如，提升 1%），以预计考虑负载突然升高时发生的即时电压瞬间下降。 这样会防止输出电压在初始负载过渡时跌落至所需的调节窗口以下。</p><p>一些器件还具有增强功能，可用于对良好瞬态响应（PWM 模式下最佳）和低功耗（PSM 模式下最佳）之间的所做的让步进行平衡。 这种增强功能是一种间歇模式，工程师可对瞬态响应比 PSM 具有更优、能效比 PWM 更高的转换器 IC 使用 I²C 指令来实现。 对于从高负载向如休眠模式之类轻负载转换的系统，这种中间模式是一种很好的选择。</p><h4 id="商业芯片中的-pfm">商业芯片中的 PFM</h4><p>低负载下的 PFM 运行能将 IC 静态电流从数个 mA 降至几个 μA。 图 3 所示为 TPS62400 开关转换器在 PWM 模式下运行时相比轻负载 PSM 的功率转换效率。</p><p><a href="http://file.elecfans.com/web1/M00/82/EB/pIYBAFw-c7SAfFq4AAIhNxQqQ3U328.jpg"><img src="http://file.elecfans.com/web1/M00/82/EB/pIYBAFw-c7SAfFq4AAIhNxQqQ3U328.jpg" alt="PFM的工作原理、优势及集成功率芯片中实现PFM技术" loading="lazy"></a></p><p>图 3：对 TI TPS62400 执行 PSM 时的能效提升。</p><p>由图 3 可知，尽管 PWM 模式能保持高于 100 mA 的良好能效，但采用 PSM 后能在负载电流低于 1 mA 的情况下将效率提升至 80 - 90% 之间。 如果转换器在如此轻的负载期间在 PWM 模式下运行，其运行电流将明显高于负载电流，从而造成非常差的转换效率（远低于 30%）。</p><p>Analog Devices 提供多种采用 PSM 的开关转换器。 进入这种模式时，PWM 稳压级导致的偏移使输出电压持续升高，直至达到比 PWM 稳压级高 1.5% 的值，在该点处，PWM 运行停止：两个功率开关均关断并进入空载模式。 在 VOUT 降至 PWM 稳压值前，允许电容器放电。 然后，转换器会驱动电感器，使 VOUT 再次上升至阈值上限。 只要负载电流低于 PSM 电流阈值，该过程就会重复。</p><p>公司的 TPS7A8300 稳压器采用 PSM，以便在 2.3 V 输入电压和 10 mA 输出电流条件下，将效率从 40% 提升至 75%。 该芯片是一款 3 MHz <a href="http://www.elecfans.com/tags/%E9%99%8D%E5%8E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/">降压转换器</a>，能在高达的 600 mA 的电流下利用 2.3 - 5.5 V 输入提供 3.3 V 输出。 图 4 所示为发生 PWM 和 PSM 转换的点。</p><p><a href="http://file.elecfans.com/web1/M00/82/6C/o4YBAFw-c5OAa0CsAAFY9jTo2Lk221.jpg"><img src="http://file.elecfans.com/web1/M00/82/6C/o4YBAFw-c5OAa0CsAAFY9jTo2Lk221.jpg" alt="PFM的工作原理、优势及集成功率芯片中实现PFM技术" loading="lazy"></a></p><p>图 4：Analog Devices <a href="https://dfm.elecfans.com/uploads/software/hqdfm.zip?neilian">AD</a>P2108 的 PWM 到 PSM 的阈值。</p><p>其他功率元件制造商也提供双模式开关转换器。 Linear Technology 提供 LTC3412A 器件，该器件具有能在低负载条件下提升效率的“猝发模式”和脉冲跳跃运行功能。 该芯片是一款降压转换器，能在高达 3 A 的电流下将 2.25 - 5.5 V 输入提升至 0.8 - 5 V 输出。</p><p>猝发模式是上文介绍的中间 PFM 技术的一个例子，它能在保持合理瞬态响应能力的同时提升效率。 例如：通过实施猝发模式，在 10 mA 输出电流（VIN 3.3 V、VOUT 2.5 V）下的效率将从 30% 提升至 90%。 LTC3412A 还包括一个传统的脉冲跳跃运行模式，能在轻负载时进一步减小开关损耗。</p><h4 id="延长电池寿命">延长电池寿命</h4><p>设计工程师需要延长便携设备中的电池寿命时，PWM 控制式开关转换器是一种大众化选择。 不过应当牢记，许多便携式产品在大部分时间内是处于低功耗的休眠模式的，只是在工作时点转换器才处于最小能效状态。 虽然对电池的要求较温和，但长时间电流累加在一起，电池寿命就会缩短。</p><p>通过采用具有 PWM 架构、但在低于某一负载阈值时仍可以实现 PFM 和 PSM 技术优势的转换器，设计人员可以在正常运行期间获得 PWM 优势，同时在在许多便携式设备处于空闲状态时，又能在很长时间内保持电池容量。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>太阳能板向阳自校准</title>
      <link href="posts/ca5803cc/"/>
      <url>posts/ca5803cc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h4 id="太阳能自动追踪器">太阳能自动追踪器</h4><p>这个也挺新颖，只是这个玩意有简单的现成的了；我在想可不可以用复杂点的低功耗单片机做出来，准确度更高，耗能更少（虽然没啥）</p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820183455.png" / loading="lazy"><p>这个玩意的构造很简单，红色面是两个太阳能板；如图</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820183619.png" alt="" loading="lazy"><br>然后底座和支撑是一个3d打印的小座子，中间打胶固定了一个电机。<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820183756.png" alt="" loading="lazy"><br>这种电机也挺常见的倒也没啥；<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820183811.png" alt="" loading="lazy"><em>电机</em><br>原理也挺简单，就是简单的太阳能板连接到了电机上面，有电就转；</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820190732.png" alt="" loading="lazy"><br>然后这种电机叫做直流电机，只是带了个减速器，简单理解为用来加大扭力的装置。这种电机正接就正转，反接就反转；然后两个太阳能板反着接，就可以在两边电压相同时停下；<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210820190755.png" alt="image-20210820190747997" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新玩具</title>
      <link href="posts/ef933535/"/>
      <url>posts/ef933535/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="前言">前言</h3><p>数位板就不介绍了，省的有人说我打广告，不过我买的这个数位板是真的大，和我笔记本屏幕差不多了（我笔记本13.3）</p><p>电脑上也没有什么可以用来测试这个板子的软件，所以我就用了下微软的那个白板。简单的试了下感觉还可以。</p><p>ps：最后那个图是我瞎画的</p><h3 id="试用">试用</h3><p>这个新玩具看着还可以，颜值也不低，就是不耐脏，可以明显的看出使用痕迹。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210809191034.jpg" alt="" loading="lazy"></p><p>简单的试用了几下，手感还不错，就是bug略多。因为我有三块屏幕，来回切换时老是卡在一个地方，并且还有空气墙，数位板不能在整块屏幕上写字（(╯▔皿▔)╯）</p><h3 id="修正bug">修正bug</h3><p>但是问题不大，谁让咱是科技宅。经过简单的测试与判断，这个板子应该是在映射时发生了点小问题，导致了不能在比板子大的地方书写。在修正这个bug前，我找到了一个折中方案</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210809191433.jpg" alt="" loading="lazy"></p><p>我有一块这样的小屏幕 ，大概10寸（忽略那条黑线）。50块钱从学弟手里搞的，原来一直当作状态屏使用了（显示电脑的资源）。现在看来可以给它分配个新任务了；</p><p>可以用它来显示whiteboard；</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210809191906.jpg" alt="" loading="lazy"></p><p>然后它完美的完成了任务（内心ps：垃圾板子驱动，占我一块屏）；</p><p>试用了一下白板的一些功能，比如图形自动矫正之类的，画了一篇屑作。</p><h3 id="效果">效果</h3><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210809190330.png" alt="瞎几把画的" loading="lazy"></p><p>右下角是我的签名，我打赌你猜不出来写的啥(<em>^_^</em>)</p><h3 id="结尾">结尾</h3><p>我也是刚拿到这个板子一天不到，还有很多功能（bug）还没测试，例如上面的按键，对于手机的适配等。改天没事了测试一下再补上吧。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无线音频发射器（简易）</title>
      <link href="posts/db42bff8/"/>
      <url>posts/db42bff8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="前言">前言</h3><p>这个小实验是我模仿油管中的一个小玩意做的（可惜实物已经被我拆了），所以大伙权当开开眼了。</p><p>大致长这个模样<strong>↓</strong></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210807173829.png" alt="" loading="lazy"></p><p><a href="https://www.bilibili.com/video/BV1cX4y1G7Jc">原视频链接</a></p><p>感兴趣的可以去康康</p><h3 id="正文">正文</h3><h4 id="原理">原理</h4><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210807171627.png" alt="原理图" loading="lazy"></p><p>其实这个小实验的原理也很简单，但是也有难点，难点都在那个三极管上面其他的倒是没啥</p><p>可惜我没时间讲述三极管的基本原理，在此借别人的光照亮一下。</p><p><a href="https://www.bilibili.com/video/BV1Fx411D71n">三极管动画演示</a></p><p><a href="https://www.bilibili.com/video/BV1kv411574Y">三极管原理</a></p><p>在此只需要知道三极管是一个用于信号放大的器件就可以了（改天没事了我亲自讲述一下三极管的原理）。用三极管组成一个共射放大电路，并使其工作在它的放大区，然后放大了咪头（麦克风）或者其他声源产生的电信号(<a href="https://www.bilibili.com/video/BV1sK4y1n79k">麦克风原理</a>)。之后这个信号作用在激光管上（工作电压看型号而定），就可以产生和声信号对应的光亮变化。你也可以不用麦克风，改用一根音频线（就是你的耳机线，只不过是只使用单声道）。如果使用麦克风的话，麦克风必须是有源的（用于上面那个电路的话）。</p><p>而其他的元器件，类如电阻、电容、开关（开关就不用说了吧）,电阻是用来限流的，电容的话，看下面这个视频你就会有个大致的了解了。</p><p><a href="https://www.bilibili.com/video/BV1mK4y1f7DQ">电容作用</a></p><p>基本原理大致就这样，就是用激光发出去你的声信号，或者说把你的声信号加载到光信号上面。</p><p>我们再来康康<strong>接收端</strong></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210807174025.png" alt="太阳能板" loading="lazy"></p><p>接收端是一个太阳能板（头一次见用这个当接受器的），太阳能板可以将光信号转化成电信号（相当于一个解码器），然后我们只需要放大这个信号就可以了。只是这个信号放大的倍数较大，建议用个成品，类似于音响之类的，或者你可以用个功放（全损音质警告）。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210807174453.png" alt="" loading="lazy"></p><p>然后就可以听到传输出去的声音了。</p><h3 id="总结">总结</h3><p>之前我把它做出来了，然后写文前不小心被我给拆了（淦）；</p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210807175812.jpg" style="zoom:67%;" / loading="lazy"><p>如图所示，被我拆下来后的模块。蓝色的是功放，带个咪头的是麦克，黑的那个是激光管，全部被做成模块化</p><h4 id="优点">优点</h4><p>传输距离远，电路简单，造价便宜（一共花不了十块钱）</p><h4 id="缺点">缺点</h4><p>干扰多，户外受天气影响较大，户内也受灯光影响，音质感人，不可调参</p><h4 id="拓展">拓展</h4><p>如果使用的是有源麦克风，那么只需要做出来两个就可以实现远距离通话了，具体距离看你的激光源有多nb吧。原理上来讲是可以无线远的（因为卫星也有类似的通讯模式）。二十块钱做个对讲机，岂不美哉！</p><p>本次分享就到这了，以后有时间再(￣_,￣ )补写上我自己做的成品。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杀千刀的电赛推迟</title>
      <link href="posts/2009afe4/"/>
      <url>posts/2009afe4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="前言">前言</h3><p>不知道该从何说起</p><p>本来我组都准备好奋战四天三夜的准备了，计划都定制好了，而我，打完电赛准备回家来着，票都买好了</p><p>结果，捏码的延迟了，本来根据清单我题目都猜出来一二了。。。。。。。。</p><div class="row">    <embed src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/ele/20210726102910400.pdf" width="100%" height="550" type="application/pdf"></div><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806112719.png" style="zoom:67%;" / loading="lazy"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806112746.png" style="zoom: 50%;" / loading="lazy"><p>因为电赛只是推迟了，但是还是要进行比赛的所以我现在还不能把我的猜想说出来，但是可以给你们点提示，上面这两张图片里面含有关键词的属性。能不能提炼出来看你们的本事了</p><hr><h3 id="正片">正片</h3><h4 id="纪念一下我的手残">纪念一下我的手残</h4><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/IMG_20210804_162708.jpg" alt="手残1" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806113155.jpg" alt="手残2" loading="lazy"></p><p>先纪念一下为了测试电机，插线插到吐的我。。。。。。</p><h4 id="印刷电路板">印刷电路板</h4><p>好在后来争分夺秒，印刷了电路板</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806122001.jpg" alt="" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806113349.jpg" alt="电路板" loading="lazy"></p><p><strong>省去了各种接插线材的麻烦</strong></p><p>按照惯例，点亮一下灯试试，顺便测试下电机</p><hr><p><strong>一切正常</strong></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806113550.jpg" alt="点亮测试" loading="lazy"></p><hr><h4 id="最后装车">最后装车</h4><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806122151.jpg" alt="车车" loading="lazy"></p><p>此时这个小破车只是初步装配，后续还会不断完善（因为时间紧张，只能打绿板，这绿板子真难看）</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210806122610.png" alt="" loading="lazy"></p><p>但是我画的板子还是很有艺术性和未来感的（😀）</p><h4 id="程序">程序</h4><p>你在想peach</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电机驱动模块-TB6612FNG</title>
      <link href="posts/78f126d1/"/>
      <url>posts/78f126d1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>TB6612的用法<br>双驱动，也就是可以驱动两个电机。<br>STBY:接单片机的IO口，清零，电机全部停止。<br>置1，通过AIN1 AIN2,BIN1,BIN2来控制正反转<br>VM 接12V电源<br>VCC 接5V电源<br>GND 接地</p><p>驱动1路<br>PWMA 接单片机的PWM口<br>TB6612FNG每通道输出最高<strong>1A</strong>的连续驱动电流，启动峰值电流达2A／3A(连续脉冲／单脉冲)；4种电机控制模式：正转／反转／制动／停止；<strong>PWM支持频率高达100 kHz</strong>；待机状态；片内低压检测电路与热停机保护电路；工作温度：-20～85℃；SSOP24小型贴片封装。<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20170715172312975" alt="这里写图片描述" loading="lazy"><br>[刹车和自由停车有什么区别]</p><p><strong>刹车耗能，自由停车不耗能。刹车耗能来源于刹车片摩擦和电机制动，自由停车相当于断电。</strong><em>冥狐注</em></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/image-20210731211614943.png" alt="image-20210731211614943" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20170715172500813" alt="接法" loading="lazy"></p><p><strong>TB6612FNG的主要引脚功能：</strong><br>(1)<strong>AINl／AIN2、BIN1／BIN2、PWMA／PWMB为控制信号输入端；</strong><br>(2)<strong>AO1／A02、B01／B02为2路电机控制输出端；</strong><br>(3)<strong>STBY为正常工作／待机状态控制引脚；</strong><br>(4)<strong>VM(3～13.5 V)和VCC(2．7～5．5 V)分别为电机驱动电压输入和逻辑电平输入端。</strong></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>陀螺仪基本原理</title>
      <link href="posts/611f9591/"/>
      <url>posts/611f9591/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>本帖翻译自 <a href="http://www.starlino.com/imu_guide.html">IMU（加速度计和陀螺仪设备）在嵌入式应用中使用的指南。</a><br>这篇文章主要介绍加速度计和陀螺仪的数学模型和基本算法，以及如何融合这两者，侧重算法、思想的讨论</p><p>介绍<br>本指南旨在向兴趣者介绍惯性MEMS（微机电系统）传感器，特别是加速度计和陀螺仪以及其他整合IMU（ <a href="http://en.wikipedia.org/wiki/Inertial_measurement_unit">惯性测量单元</a>）设备。<br><img src="http://image.geek-workshop.com/forum/201208/22/163854b9769h9p7kvq7omh.jpg" alt="1.jpg" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxM3xhNDgxYjAxZnwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(16.48 KB)</a></p><p>IMU单元例子：上图中MCU顶端的 <a href="http://www.starlino.com/store/acc-gyro">ACC Gyro 6DOF</a>，名为 <a href="http://www.gadgetgangster.com/find-a-project/56?projectnum=240">USBThumb</a>，支持USB/串口通信</p><p>在这篇文章中我将概括这么几个基本并且重要的话题：<br>- 加速度计（accelerometer）检测什么<br>- 陀螺仪（gyroscope，也称作 gyro）检测什么<br>- 如何将传感器ADC读取的数据转换为物理单位（加速度传感器的单位是g，陀螺仪的单位是 度/秒）<br>- 如何结合加速度传感器和陀螺仪的数据以得到设备和地平面之间的倾角的准确信息<br>在整篇文章中我尽量将数学运算降低到最少。如果你知道什么是正弦、余弦、正切函数，那无论你的项目使用哪种平台你应该都会明白和运用这篇文章中的思想，这些平台如Arduino、Propeller、Basic Stamp、Ateml芯片、PIC芯片等等。总有些人认为使用IMU单元需要复杂的数学运算（复杂的FIR或IIR滤波，如卡尔曼滤波，Parks-McClellan滤波等）。你如果研究这些会得到很棒且很复杂的结果。我解释事情的方式，只需要基本的数学。我非常坚信简单的原则。我认为一个简单的系统更容易操作和监控，另外许多嵌入式设备并不具备能力和资源去实现需要进行矩阵运算的复杂算法。<br>我会用我设计的一个新IMU模块—— <a href="http://www.starlino.com/store/acc-gyro">Acc_Gyro Accelerometer + Gyro IMU</a>作为例子。在下面的例子中我们会使用这个设备的参数。用这个模块作为介绍非常合适，因为它由3个设备组成：<br>- LIS331AL ( <a href="http://www.starlino.com/wp-content/uploads/data/acc_gyro/LIS331AL.pdf">datasheet</a>) – 3轴 2G 模拟加速度计<br>- LPR550AL ( <a href="http://www.starlino.com/wp-content/uploads/data/acc_gyro/LPR550AL.pdf">datasheet</a>) – 双轴（俯仰、翻滚） 500°/s 加速度传感器<br>- LY550ALH ( <a href="http://www.starlino.com/wp-content/uploads/data/acc_gyro/LY550ALH.pdf">datasheet</a>) –单轴（偏航）陀螺仪 最后这个设备在这篇介绍中不使用，不过他在 <a href="http://www.starlino.com/dcm_tutorial.html">DCM Matrix implementation</a>中有重要作用<br>它们一起组成了一个6自由度的惯性测量单元。这是个花哨的名字！然而，在花哨的名字后面是个非常有用的设备组合，接下来我们会详细介绍之。<br>第一部分 加速度计<br>要了解这个模块我们先从加速度计开始。当我们在想象一个加速度计的时候我们可以把它想作一个圆球在一个方盒子中。你可能会把它想作一个饼干或者甜圈，但我就把它当做一个球好了：<br><img src="http://image.geek-workshop.com/forum/201208/22/163855d7e99tne77u81b12.png" alt="2.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxNHw0ZDkxOTU3NXwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(15.85 KB)</a></p><p>我们假定这个盒子不在重力场中或者其他任何会影响球的位置的场中，球处于盒子的正中央。你可以想象盒子在外太空中，远离任何天体，如果很难想象，那就当做盒子在航天飞机中，一切东西都处于无重力状态。在上面的图中你可以看到我们给每个轴分配了一对墙（我们移除了Y+以此来观察里面的情况）。设想每面墙都能感测压力。如果我们突然把盒子向左移动（加速度为1g=9.8m/s^2），那么球会撞上X-墙。然后我们检测球撞击墙面产生的压力，X轴输出值为-1g。<br><img src="http://image.geek-workshop.com/forum/201208/22/163856r6orns2rocpzz5sp.png" alt="3.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxNXwxM2U2NjRkZXwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(19.23 KB)</a></p><p>请注意加速度计检测到得力的方向与它本身加速度的方向是相反的。这种力量通常被称为 <a href="http://en.wikipedia.org/wiki/Fictitious_force">惯性力或假想力</a> 。在这个模型中你你应该学到加速度计是通过间接测量力对一个墙面的作用来测量加速度的，在实际应用中，可能通过弹簧等装置来测量力。这个力可以是加速度引起的，但在下面的例子中，我们会发现它不一定是加速度引起的。<br>如果我们把模型放在地球上，球会落在Z-墙面上并对其施加一个1g的力，见下图：<br><img src="http://image.geek-workshop.com/forum/201208/22/163856lxjiqd8xlvzh775b.png" alt="4.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxNnxjNGIzNDM1YnwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(19.54 KB)</a></p><p>在这种情况下盒子没有移动但我们任然读取到Z轴有-1g的值。球在墙壁上施加的压力是由引力造成的。在理论上，它可以是不同类型的力量 - 例如，你可以想象我们的球是铁质的，将一个磁铁放在盒子旁边那球就会撞上另一面墙。引用这个例子只是为了说明加速度计的本质是检测力而非加速度。只是加速度所引起的惯性力正好能被加速度计的检测装置所捕获。<br>虽然这个模型并非一个MEMS传感器的真实构造，但它用来解决与加速度计相关的问题相当有效。实际上有些类似传感器中有金属小球，它们称作倾角开关，但是它们的功能更弱，只能检测设备是否在一定程度内倾斜，却不能得到倾斜的程度。<br>到目前为止，我们已经分析了单轴的加速度计输出，这是使用单轴加速度计所能得到的。三轴加速度计的真正价值在于它们能够检测全部三个轴的惯性力。让我们回到盒子模型，并将盒子向右旋转45度。现在球会与两个面接触：Z-和X-，见下图：<br><img src="http://image.geek-workshop.com/forum/201208/22/163857bferffolflo9ly9l.png" alt="5.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxN3w1ZGVjODFhOXwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(34.03 KB)</a></p><p>0.71g这个值是不是任意的，它们实际上是1/2的平方根的近似值。我们介绍加速度计的下一个模型时这一点会更清楚。<br>在上一个模型中我们引入了重力并旋转了盒子。在最后的两个例子中我们分析了盒子在两种情况下的输出值，力矢量保持不变。虽然这有助于理解加速度计是怎么和外部力相互作用的，但如果我们将坐标系换为加速度的三个轴并想象矢量力在周围旋转，这会更方便计算。<br><img src="http://image.geek-workshop.com/forum/201208/22/163858sssxmnssijjjczf3.png" alt="6.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxOHxjNDNlNzY5Y3wxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(7.19 KB)</a></p><p>请看看在上面的模型，我保留了轴的颜色，以便你的思维能更好的从上一个模型转到新的模型中。想象新模型中每个轴都分别垂直于原模型中各自的墙面。矢量R是加速度计所检测的矢量（它可能是重力或上面例子中惯性力的合成）。RX，RY，RZ是矢量R在X，Y，Z上的投影。请注意下列关系：<br>，R ^ 2 = RX ^ 2 + RY ^ 2 + RZ ^ 2（ 公式1）<br>此公式等价于 <a href="http://demonstrations.wolfram.com/PythagoreanTheorem3D/">三维空间勾股定理</a>。<br>还记得我刚才说的1/2的平方根0.71不是个随机值吧。如果你把它们代回上式，回顾一下重力加速度是1g，那我们就能验证：<br>1 ^ 2 =（SQRT（1/2））^ 2 + 0 ^ 2 +（SQRT（1/2））^ 2<br>在 公式1中简单的取代： R=1, Rx = -SQRT(1/2), Ry = 0 , Rz = -SQRT(1/2)<br>经过一大段的理论序言后，我们和实际的加速度计很靠近了。RX，RY，RZ值是实际中加速度计输出的线性相关值，你可以用它们进行各种计算。<br>在我们运用它之前我们先讨论一点获取加速度计数据的方法。大多数加速度计可归为两类：数字和模拟。数字加速度计可通过I2C，SPI或USART方式获取信息，而模拟加速度计的输出是一个在预定范围内的电压值，你需要用ADC（模拟量转数字量）模块将其转换为数字值。我将不会详细介绍ADC是怎么工作的，部分原因是这是个很广的话题，另一个原因是不同平台的ADC都会有差别。有些MCU具有内置ADC模块，而有些则需要外部电路进行ADC转换。不管使用什么类型的ADC模块，你都会得到一个在一定范围内的数值。例如一个10位ADC模块的输出值范围在0 … 1023间，请注意，1023 = 2 ^ 10 -1。一个12位ADC模块的输出值范围在0 … 4095内，注意，4095 = 2 ^ 12-1。<br>我们继续，先考虑下一个简单的例子，假设我们从10位ADC模块得到了以下的三个轴的数据：<br>AdcRx = 586<br>AdcRy = 630<br>AdcRz = 561<br>每个ADC模块都有一个参考电压，假设在我们的例子中，它是3.3V。要将一个10位的ADC值转成电压值，我们使用下列公式：<br>VoltsRx = AdcRx * VREF / 1023<br>小注：8位ADC的最大值是255 = 2 ^ 8 -1，12位ADC最大值是4095 = 2 ^ 12 -1。<br>将3个轴的值代入上式，得到：<br>VoltsRx = 586 * 3.3 / 1023 =～1.89V（结果取两位小数）<br>VoltsRy = 630 * 3.3 / 1023 =～2.03V<br>VoltsRz = 561 * 3.3 / 1023 =～1.81V<br>每个加速度计都有一个零加速度的电压值，你可以在它的说明书中找到，这个电压值对应于加速度为0g。通过计算相对0g电压的偏移量我们可以得到一个有符号的电压值。比方说，0g电压值 VzeroG= 1.65V，通过下面的方式可以得到相对0g电压的偏移量:<br>DeltaVoltsRx = 1.89V - 1.65V = 0.24V<br>DeltaVoltsRy = 2.03V - 1.65V = 0.38V<br>DeltaVoltsRz = 1.81V - 1.65V = 0.16V<br>现在我们得到了加速度计的电压值，但它的单位还不是g（9.8m/s^2），最后的转换，我们还需要引入加速度计的灵敏度（Sensitivity），单位通常是 mV/g。比方说，加速度计的灵敏度 Sensitivity= 478.5mV / g = 0.4785V /g。灵敏度值可以在加速度计说明书中找到。要获得最后的单位为g的加速度，我们使用下列公式计算：<br>RX = DeltaVoltsRx /Sensitivity<br>RX = 0.24V / 0.4785V / G =～0.5g<br>RY = 0.38V / 0.4785V / G =～0.79g<br>RZ = 0.16V / 0.4785V / G =～0.33g<br>当然，我们可以把所有的步骤全部放在一个式子里，但我想通过介绍每一个步骤以便让你了解怎么读取一个ADC值并将其转换为单位为g的矢量力的分量。<br>Rx = (AdcRx * Vref / 1023 – VzeroG) / Sensitivity (公式2)<br>Ry = (AdcRy * Vref / 1023 – VzeroG) / Sensitivity<br>Rz = (AdcRz * Vref / 1023 – VzeroG) / Sensitivity<br>现在我们得到了惯性力矢量的三个分量，如果设备除了重力外不受任何外力影响，那我们就可以认为这个方向就是重力矢量的方向。如果你想计算设备相对于地面的倾角，可以计算这个矢量和Z轴之间的夹角。如果你对每个轴的倾角都感兴趣，你可以把这个结果分为两个分量：X轴、Y轴倾角，这可以通过计算重力矢量和X、Y轴的夹角得到。计算这些角度比你想象的简单，现在我们已经算出了Rx，Ry，Rz的值，让我们回到我们的上一个加速度模型，再加一些标注上去：<br><img src="http://image.geek-workshop.com/forum/201208/22/1638594bjbb147i1lqb7cz.png" alt="7.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQxOXw1YTRiMGIyYnwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(9.9 KB)</a></p><p>我们感兴趣的角度是向量R和X，Y，Z轴之间的夹角，那就令这些角度为Axr，Ayr，Azr。观察由R和Rx组成的直角三角形：<br>cos(Axr) = Rx / R , 类似的：<br>cos(Ayr) = Ry / R<br>cos(Azr) = Rz / R<br>从 公式1我们可以推导出 R = SQRT( Rx^2 + Ry^2 + Rz^2)<br>通过arccos()函数（cos()的反函数）我们可以计算出所需的角度：<br>Axr = arccos(Rx/R)<br>Ayr = arccos(Ry/R)<br>Azr = arccos(Rz/R)<br>我们花了大段的篇幅来解释加速度计模型，最后所要的只是以上这几个公式。根据你的应用场合，你可能会用到我们推导出来的几个过渡公式。我们接下来要介绍陀螺仪模块，并向大家介绍怎么融合加速度计和陀螺仪的数据以得到更精确的倾角值。<br>但在此之前，我们再介绍几个很常用的公式：<br>cosX = cos(Axr) = Rx / R<br>cosY = cos(Ayr) = Ry / R<br>cosZ = cos(Azr) = Rz / R<br>这三个公式通常称作 <a href="http://en.wikipedia.org/wiki/Direction_cosine">方向余弦</a> ，它主要表达了单位向量（长度为1的向量）和R向量具有相同的方向。你可以很容易地验证：<br>SQRT（cosX ^ 2 + COSY ^ 2 + cosZ ^ 2）= 1<br>这是个很好的性质，因为它避免了我们一直检测R向量的模（长度）。通常如果我们只是对惯性力的方向感兴趣，那标准化模长以简化其他计算是个明智的选择。<br>第二部分陀螺仪<br>对于陀螺仪我们将不会像加速度计一样介绍它的等价盒子模型，而是直接跳到加速度计的第二个模型，通过这个模型我们会向大家介绍陀螺仪是怎么工作的。<br><img src="http://image.geek-workshop.com/forum/201208/22/163859eepfepkeh1glt1lw.png" alt="8.png" loading="lazy"></p><p>2012-8-22 16:38 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQyMHxlMzYwMGE3ZHwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(12.55 KB)</a></p><p>陀螺仪的每个通道检测一个轴的旋转。例如，一个2轴陀螺仪检测绕X和Y轴的旋转。为了用数字来表达这些旋转，我们先引进一些符号。首先我们定义：<br>Rxz – 惯性力矢量R在XZ平面上的投影<br>Ryz – 惯性力矢量R在YZ平面的上投影<br>在由Rxz和Rz组成的直角三角形中，运用勾股定理可得：<br>Rxz^2 = Rx^2 + Rz^2 ，同样：<br>Ryz^2 = Ry^2 + Rz^2<br>同时注意：<br>R^2 = Rxz^2 + Ry^2 ，这个公式可以 公式1和上面的公式推导出来，也可由R和Ryz所组成的直角三角形推导出来<br>R ^ 2 = Ryz ^ 2 + RX ^ 2<br>在这篇文章中我们不会用到这些公式，但知道模型中的那些数值间的关系有助于理解。<br>相反，我们按如下方法定义Z轴和Rxz、Ryz向量所成的夹角：<br>AXZ - Rxz（矢量R在XZ平面的投影）和Z轴所成的夹角<br>AYZ - Ryz（矢量R在YZ平面的投影）和Z轴所成夹角<br>现在我们离陀螺仪要测量的东西又近了一步。陀螺仪测量上面定义的角度的变化率。换句话说，它会输出一个与上面这些角度变化率线性相关的值。为了解释这一点，我们先假设在t0时刻，我们已测得绕Y轴旋转的角度（也就是Axz），定义为Axz0，之后在t1时刻我们再次测量这个角度，得到Axz1。角度变化率按下面方法计算：<br>RateAxz = (Axz1 – Axz0) / (t1 – t0).<br>如果用度来表示角度，秒来表示时间，那这个值的单位就是 度/秒。这就是陀螺仪检测的东西。<br>在实际运用中，陀螺仪一般都不会直接给你一个单位为度/秒的值（除非它是个特殊的数字陀螺仪）。就像加速度计一样，你会得到一个ADC值并且要用类似 公式2的式子将其转换成单位为 度/秒的值。让我们来介绍陀螺仪输出值转换中的ADC部分（假设使用10位ADC模块，如果是8位ADC，用1023代替255，如果是12为ADC用4095代替1023）。<br>RateAxz = (AdcGyroXZ * Vref / 1023 – VzeroRate) / Sensitivity <strong>公式3</strong><br>RateAyz = (AdcGyroYZ * Vref / 1023 – VzeroRate) / Sensitivity<br>AdcGyroXZ，AdcGyroYZ - 这两个值由ADC读取，它们分别代表矢量R的投影在XZ和YZ平面内里的转角，也可等价的说，旋转可分解为单独绕Y和X轴的运动。<br>Vref – ADC的参考电压，上例中我们使用3.3V<br>VzeroRate – 是零变化率电压，换句话说它是陀螺仪不受任何转动影响时的输出值，对 <a href="http://gadgetgangster.com/find-a-project/56?projectnum=213">Acc Gyro</a>板来说，可以认为是1.23V（此值通常可以在说明书中找到——但千万别相信这个值，因为大多数的陀螺仪在焊接后会有一定的偏差，所以可以使用电压计测量每个通道的输出值，通常这个值在焊接后就不会改变，如果有跳动，在设备使用前写一个校准程序对其进行测量，用户应当在设备启动的时候保持设备静止以进行校准）。<br>Sensitivity –陀螺仪的灵敏度，单位mV/(deg/s)，通常写作mV/deg/s,它的意思就是如果旋转速度增加1°/s,陀螺仪的输出就会增加多少mV。 <a href="http://gadgetgangster.com/find-a-project/56?projectnum=213">Acc_Gyro</a>板的灵敏度值是2mV/deg/s或0.002V/deg/s<br>让我们举个例子，假设我们的ADC模块返回以下值：<br>AdcGyroXZ = 571<br>AdcGyroXZ = 323<br>用上面的公式，在代入 <a href="http://gadgetgangster.com/find-a-project/56?projectnum=213">Acc Gyro</a>板的参数，可得：<br>RateAxz = (571 * 3.3V / 1023 – 1.23V) / ( 0.002V/deg/s) =~ 306 deg/s<br>RateAyz = (323 * 3.3V / 1023 – 1.23V) / ( 0.002V/deg/s) =~ -94 deg/s<br>换句话说设备绕Y轴（也可以说在XZ平面内）以306°/s速度和绕X轴（或者说YZ平面内）以-94°/s的速度旋转。请注意，负号表示该设备朝着反方向旋转。按照惯例，一个方向的旋转是正值。一份好的陀螺仪说明书会告诉你哪个方向是正的，否则你就要自己测试出哪个旋转方向会使得输出脚电压增加。最好使用示波器进行测试，因为一旦你停止了旋转，电压就会掉回零速率水平。如果你使用的是万用表，你得保持一定的旋转速度几秒钟并同时比较电压值和零速率电压值。如果值大于零速率电压值那说明这个旋转方向是正向。<br>第三部分 将它们综合起来。融合加速度计和陀螺仪的数据。<br>如果你在阅读这篇文章你可能已经有了或准备购买一个IMU设备，或者你准备用独立的加速度计和陀螺仪搭建一个。<br>注：具体的代码实现和算法测试，请阅读这篇文章：<br><a href="http://starlino.com/imu_kalman_arduino.html">http://starlino.com/imu_kalman_arduino.html</a></p><p>在使用整合了加速度计和陀螺仪的IMU设备时，首先要做的就是统一它们的坐标系。最简单的办法就是将加速度计作为参考坐标系。大多数的加速度计技术说明书都会指出对应于物理芯片或设备的XZY轴方向。例如，下面就是Acc Gyro板的说明书中给出的XYZ轴方向：<br><img src="http://image.geek-workshop.com/forum/201208/22/16390056u825bbb2j10x80.png" alt="9.png" loading="lazy"></p><p>2012-8-22 16:39 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQyMXxmZDNmNmQ3MnwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(35.18 KB)</a></p><p>接下来的步骤是：<br>- 确定陀螺仪的输出对应到上述讨论的RateAxz，RateAyz值。<br>- 根据陀螺仪和加速度计的位置决定是否要反转输出值<br>不要设想陀螺仪陀的输出有XY，它会适应加速度计坐标系里的任何轴，尽管这个输出是IMU模块的一部分。最好的办法就是测试。<br>接下来的示例用来确定哪个陀螺仪的输出对应RateAxz。<br>- 首先将设备保持水平。加速度计的XY轴输出会是零加速度电压（ <a href="http://gadgetgangster.com/find-a-project/56?projectnum=213">Acc Gyro</a>板的值是1.65V）<br>- 接下来将设备绕Y轴旋转，换句话说就是将设备在XZ平面内旋转，所以X、Z的加速度输出值会变化而Y轴保持不变。<br>-当以匀速旋转设备的时候，注意陀螺仪的哪个通道输出值变化了，其他输出应该保持不变。<br>- 在陀螺仪绕Y轴旋转（在XZ平面内旋转）的时候输出值变化的就是AdcGyroXZ，用于计算RateAxz<br>-最后一步，确认旋转的方向是否和我们的模型对应，因为陀螺仪和加速度的位置关系，有时候你可能要把RateAxz值反向<br>-重复上面的测试，将设备绕Y轴旋转，这次查看加速度计的X轴输出（也就是AdcRx）。如果AdcRx增大（从水平位置开始旋转的第一个90°），那AdcGyroXZ应当减小。这是因为我们观察的是重力矢量，当设备朝一个方向旋转时矢量会朝相反的方向旋转（相对坐标系运动）。所以，如果你不想反转RateAxz，你可以在 <strong>公式3</strong>中引入正负号来解决这个问题：<br>RateAxz = InvertAxz * (AdcGyroXZ * Vref / 1023 – VzeroRate) / Sensitivity ,其中InvertAxz= 1 或-1<br>同样的方法可以用来测试RateAyz，将设备绕X轴旋转，你就能测出陀螺仪的哪个输出对应于RateAyz，以及它是否需要反转。一旦你确定了InvertAyz，你就能可以用下面的公式来计算RateAyz：<br>RateAyz = InvertAyz * (AdcGyroYZ * Vref / 1023 – VzeroRate) / Sensitivity<br>如果对Acc Gyro板进行这些测试，你会得到下面的这些结果：<br>- RateAxz的输出管脚是GX4，InvertAxz = 1<br>- RateAyz输出管脚是GY4，InvertAyz = 1<br>从现在开始我们认为你已经设置好了IMU模块并能计算出正确的Axr，Ayr，Azr值（在第一部分加速度计中定义）以及RateAyz，RateAyz（在第二部分陀螺仪中）。下一步，我们分析这些值之间的关系并得到更准确的设备和地平面之间的倾角。<br>你可能会问自己一个问题，如果加速度计已经告诉我们Axr，Ayr，Azr的倾角，为什么还要费事去得到陀螺仪的数据？答案很简单：加速度计的数据不是100%准确的。有几个原因，还记加速度计测量的是惯性力，这个力可以由重力引起（理想情况只受重力影响），当也可能由设备的加速度（运动）引起。因此，就算加速度计处于一个相对比较平稳的状态，它对一般的震动和机械噪声很敏感。这就是为什么大部分的IMU系统都需要陀螺仪来使加速度计的输出更平滑。但是怎么办到这点呢？陀螺仪不受噪声影响吗？<br>陀螺仪也会有噪声，但由于它检测的是旋转，因此对线性机械运动没那么敏感，不过陀螺仪有另外一种问题，比如漂移（当选择停止的时候电压不会回到零速率电压）。然而，通过计算加速度计和陀螺仪的平均值我们能得到一个相对更准确的当前设备的倾角值，这比单独使用加速度计更好。<br>接下来的步骤我会介绍一种算法，算法受卡尔曼滤波中的一些思想启发，但是它更简单并且更容易在嵌入式设备中实现。在此之前，让我们先看看我们需要算法计算什么值。所要算的就是重力矢量R=[Rx,Ry,Rz]，它可由其他值推导出来，如Axr，Ayr，Azr或者cosX，cosY，cosZ，由这些值我们能得到设备相对地平面的倾角值，这些关系我们在第一部分已经讨论过。有人可能会说-根据第一部分的 公式2我们不是已经得到Rx，Ry，Rz的值了吗？是的，但是记住，这些值只是由加速度计数据推导出来的，如果你直接将它们用于你的程序你会得到难以忍受的噪声。为了避免进一步的混乱，我们重新定义加速度计的测量值：<br>Racc – 是由加速度计测量到得惯性力矢量，它可分解为下面的分量（在XYZ轴上的投影）：<br>RxAcc = (AdcRx * Vref / 1023 – VzeroG) / Sensitivity<br>RyAcc = (AdcRy * Vref / 1023 – VzeroG) / Sensitivity<br>RzAcc = (AdcRz * Vref / 1023 – VzeroG) / Sensitivity<br>现在我们得到了一组只来自于加速度计ADC的值。我们把这组数据叫做“vector”，并使用下面的符号：<br>Racc = [RxAcc,RyAcc,RzAcc]<br>因为这些Racc的分量可由加速度计数据得到，我们可以把它当做算法的输入。<br>请注意Racc测量的是重力，如果你得到的矢量长度约等于1g那么你就是正确的：<br>|Racc| = SQRT(RxAcc^2 +RyAcc^2 + RzAcc^2),<br>但是请确定把矢量转换成下面的矢量非常重要：<br>Racc(normalized) = [RxAcc/|Racc| , RyAcc/|Racc| , RzAcc/|Racc|].<br>这可以确保标准化Racc始终是1。<br>接来下我们引进一个新的向量：<br>Rest = [RxEst,RyEst,RzEst]<br>这就是算法的输出值，它经过陀螺仪数据的修正和基于上一次估算的值。<br>这是算法所做的事：<br>-加速度计告诉我们：“你现在的位置是Racc”<br>我们回答：“谢谢，但让我确认一下”<br>-然后根据陀螺仪的数据和上一次的Rest值修正这个值并输出新的估算值Rest。<br>-我们认为Rest是当前设备姿态的“最佳值”。<br>让我们看看它是怎么实现的。<br>数列的开始，我们先认为加速度值正确并赋值：<br>Rest(0) = Racc(0)<br>Rest和Racc是向量，所以上面的式子可以用3个简单的式子代替，注意别重复了：<br>RxEst（0）= RxAcc（0）<br>RyEst（0）= RyAcc（0）<br>RzEst（0）= RzAcc（0）<br>接下来我们在每个等时间间隔T秒做一次测量，得到新的测量值，并定义为Racc（1），Racc（2），Racc（3）等等。同时，在每个时间间隔我们也计算出新的估算值Rest（1）,Rest（2），Rest（3），等等。<br>假设我们在第n步。我们有两列已知的值可以用：<br>Rest(n-1) – 前一个估算值，Rest(0) = Racc(0)<br>Racc(n) – 当前加速度计测量值<br>在计算Rest（n）前，我们先引进一个新的值，它可由陀螺仪和前一个估算值得到。<br>叫做Rgyro，同样它是个矢量并由3个分量组成：<br>Rgyro = [RxGyro,RyGyro,RzGyro]<br>我们分别计算这个矢量的分量，从RxGyro开始。<br><img src="http://image.geek-workshop.com/forum/201208/22/163901qa8wfgaj8z8ca8kk.png" alt="10.png" loading="lazy"></p><p>2012-8-22 16:39 上传</p><p><a href="http://blog.csdn.net/zhuanghe_xing/article/details/forum.php?mod=attachment&amp;aid=NjQyMnwxZDk2MjFlNXwxMzQ2NTg2MjYwfDMxOTV8MTY5NQ%3D%3D&amp;nothumb=yes"><strong>下载附件</strong>(12.55 KB)</a></p><p>首先观察陀螺仪模型中下面的关系，根据由Rz和Rxz组成的直角三角形我们能推出：<br>tan(Axz) = Rx/Rz =&gt; Axz = atan2(Rx,Rz)<br>你可能从未用过atan2这个函数，它和atan类似，但atan返回值范围是（-PI/2,PI/2），atan2返回值范围是（-PI，PI），并且他有两个参数。它能将Rx，Rz值转换成360°（-PI，PI）内的角度。更多信息请阅读 <a href="http://en.wikipedia.org/wiki/Atan2">atan2</a>.<br>所以，知道了RxEst（n-1）和RzEst（n-1）我们发现：<br>Axz(n-1) = atan2( RxEst(n-1) , RzEst(n-1) ).<br>记住，陀螺仪测量的是Axz角度变化率，因此，我们可以按如下方法估算新的角度Axz（n）：<br>Axz(n) = Axz(n-1) + RateAxz(n) * T<br>请记住，RateAxz可由陀螺仪ADC读取得到。通过使用平均转速可由得到一个更准确的公式：<br>RateAxzAvg =（RateAxz（N）+ RateAxz（N-1））/ 2<br>Axz(n) = Axz(n-1) + RateAxzAvg * T<br>同理可得：<br>Ayz(n) = Ayz(n-1) + RateAyz(n) * T<br>好了，现在我们有了Axz（n），Ayz（n）。现在我们如何推导出RxGyro/RyGyro?根据 公式1我们可以把Rgyro长度写成下式：<br>| Rgyro | = SQRT（RxGyro ^ 2 + RyGyro ^ 2 + RzGyro ^ 2）<br>同时，因为我们已经将Racc标准化，我们可以认为它的长度是1并且旋转后保持不变，所以写成下面的方式相对比较安全：<br>| Rgyro | = 1<br>我们暂时采用更短的符号进行下面的计算：<br>x =RxGyro , y=RyGyro, z=RzGyro<br>根据上面的关系可得：<br>x = x / 1 = x / SQRT(x^2+y^2+z^2)<br>分子分母同除以SQRT（X ^ 2 + Z ^ 2）<br>x = ( x / SQRT(x^2 + z^2) ) / SQRT( (x^2 + y^2 + z^2) / (x^2 + z^2) )<br>注意x / SQRT(x^2 + z^2) = sin(Axz), 所以:<br>x = sin(Axz) / SQRT (1 + y^2 / (x^2 + z^2) )<br>将SQRT内部分式的分子分母同乘以z^2<br>x = sin(Axz) / SQRT (1 + y^2 * z ^2 / (z^2 * (x^2 + z^2)) )<br><strong>注意 z / SQRT(x^2 + z^2) = cos(Axz)， y / z = tan(Ayz), 所以最后可得:</strong><br>x = sin(Axz) / SQRT (1 + cos(Axz)^2 * tan(Ayz)^2 )<br>替换成原来的符号可得：<br>RxGyro = sin(Axz(n)) / SQRT (1 + cos(Axz(n))^2 * tan(Ayz(n))^2 )<br>同理可得：<br>RyGyro = sin(Ayz(n)) / SQRT (1 + cos(Ayz(n))^2 * tan(Axz(n))^2 )<br>提示：这个公式还可以更进一步简化。分式两边同除以sin（axz（你））可得：<br>RxGyro = 1 / SQRT (1/ sin(Axz(n))^2 + cos(Axz(n))^2 / sin(Axz(n))^2 * tan(Ayz(n))^2 )<br>RxGyro = 1 / SQRT (1/ sin(Axz(n))^2 + cot(Axz(n))^2 * sin(Ayz(n))^2 / cos(Ayz(n))^2 )<br>现在加减  cos(Axz(n))^2/sin(Axz(n))^2  = cot(Axz(n))^2<br>RxGyro = 1 / SQRT (1/ sin(Axz(n))^2 - cos(Axz(n))^2/sin(Axz(n))^2  + cot(Axz(n))^2 * sin(Ayz(n))^2 / cos(Ayz(n))^2 + cot(Axz(n))^2 )<br>综合条件1、2和3、4可得：<br>RxGyro = 1 / SQRT (1 +  cot(Axz(n))^2 * sec(Ayz(n))^2 ),   其中 cot(x) = 1 / tan(x) ， sec(x) = 1 / cos(x)<br>这个公式只用了2个三角函数并且计算量更低。如果你有Mathematica程序，通过使用 FullSimplify [Sin[A]^2/ ( 1 + Cos[A]^2 * Tan[B]^2)]你可以验证这个公式。</p><p>现在我们发现：<br>RzGyro = Sign(RzGyro)*SQRT(1 – RxGyro^2 – RyGyro^2).<br>其中，当 RzGyro&gt;=0时，Sign(RzGyro) = 1 , 当 RzGyro&lt;0时，Sign(RzGyro) = -1 。<br>一个简单的估算方法：<br>Sign(RzGyro) = Sign(RzEst(n-1))<br>在实际应用中，当心RzEst（n-1）趋近于0。这时候你可以跳过整个陀螺仪阶段并赋值：Rgyro=Rest（n-1）。Rz可以用作计算Axz和Ayz倾角的参考，当它趋近于0时，它可能会溢出并引发不好的后果。这时你会得到很大的浮点数据，并且tan()/atan()函数得到的结果会缺乏精度。</p><p>现在我们回顾一下已经得到的结果，我们在算法中的第n步，并计算出了下面的值：<br>Racc – 加速度计读取的当前值<br>Rgyro –根据Rest(-1)和当前陀螺仪读取值所得<br>我们根据哪个值来更新Rest（n）呢？你可能已经猜到，两者都采用。我们会用一个加权平均值，得：<br>Rest(n) = (Racc * w1 + Rgyro * w2 ) / (w1 + w2)<br>分子分母同除以w1，公式可简化成：<br>Rest(n) = (Racc * w1/w1 + Rgyro * w2/w1 ) / (w1/w1 + w2/w1)<br>令w2=w1=wGyro，可得：<br>Rest(n) = (Racc + Rgyro * wGyro ) / (1 + wGyro)<br>在上面的公式中，wGyro表示我们对加速度计和陀螺仪的相信程度。这个值可以通过测试确定，根据经验值5-20之间会得到一个很好的结果。<br>此算法和卡尔曼滤波最主要的差别是它的权重是相对固定的，而卡尔曼滤波中的权重会随着加速度计读取的噪声而改变。卡尔曼滤波注重给你一个“最好”的理论结果，而此算法给你的是实际项目中“够用”的结果。你可以实现一个算法，它能根据测量的噪声而改变wGyro值，但对大部分应用来说固定的权重也能工作的很好。<br>现在得到最新的估算值还差一步：<br>RxEst(n) = (RxAcc + RxGyro * wGyro ) / (1 + wGyro)<br>RyEst(n) = (RyAcc + RyGyro * wGyro ) / (1 + wGyro)<br>RzEst(n) = (RzAcc + RzGyro * wGyro ) / (1 + wGyro)<br>现在，再次标准化矢量：<br>R = SQRT(RxEst(n) ^2 + RyEst(n)^2 + RzEst(n)^2 )<br>RxEst(n) = RxEst(n)/R<br>RyEst(n) = RyEst(n)/R<br>RzEst(n) = RzEst(n)/R<br>现在，可以再次进行下一轮循环了。<br>**注：**关于此算法的具体实现和测试，请阅读这篇文章：<br><a href="http://starlino.com/imu_kalman_arduino.html">http://starlino.com/imu_kalman_arduino.html</a></p><p>加速度计和陀螺仪IMU融合的其他资源：<br><a href="http://www.mikroquad.com/pub/Research/ComplementaryFilter/filter.pdf">http://www.mikroquad.com/pub/Res … ryFilter/filter.pdf</a></p><p><a href="http://stackoverflow.com/questions/1586658/combine-gyroscope-and-accelerometer-data">http://stackoverflow.com/questio … -accelerometer-data</a><br><a href="http://www.dimensionengineering.com/accelerometers.htm">http://www.dimensionengineering.com/accelerometers.htm</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>陀螺仪--九轴</title>
      <link href="posts/962b2335/"/>
      <url>posts/962b2335/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>前言</h1><p>传感器的调试过程，一般根据原厂提供demo代码，调试数据接口，将数据流打通即可，在VR中，当带上头显设备，运行应用时，出现漂移、延迟、不回归问题，往往束手无策，解决这些小问题，往往占用很多的时间，希望通过自己整理的知识，明确调试的方向，提高调试效率，达到好的调试效果。自己近几年在Android平台上导入过多种9轴传感器，做过一些sensor内部分享，而且近半年来从事VR开发工作，VR对9轴传感器要求比手机、平板严格更多，遇到的问题也更多，在开发过程中不断学习和思考，与传感器原厂RD沟通和学习。</p><h1>9轴传感器</h1><p>9轴传感器包括3轴加速度计、3轴陀螺仪、3轴磁力计，在实际应用中，需要把这些数据需要经过融合算法后，才能够被应用程序使用，下面对每种传感器功能、原理以及融合算法进行介绍。</p><h2 id="加速度计">加速度计</h2><p>人们常说的G-sensor，用来检测物理在X、Y、Z轴上的重力加速度，单位:m/s^2.<br>以手机为例，X、Y、Z轴如下图所示（右手坐标系）：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101251281" alt="这里写图片描述" loading="lazy"><br>当手机平放在桌面时，Z轴指向天空，这时候X、Y轴的数值接近为0，Z轴的重力加速度约为9.81m/s^2，将手机翻转后，即屏幕面朝向桌面，此时的Z轴重力加速度约为-9.81m/s^2。<br>X、Y轴指向天空时，与上面Z轴同理，有兴趣的可以在手机上安装一个”sensor_list.apk”来抓取这些数据。</p><ul><li>原理<br><a href="http://www.starlino.com/imu_guide.html">这里是英文介绍</a>，中文版本如下：<br>当我们在想象一个加速度计的时候我们可以把它想作一个圆球在一个方盒子中。你可能会把它想作一个饼干或者甜圈，但我就把它当做一个球好了：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101306719" alt="这里写图片描述" loading="lazy"><br>我们假定这个盒子不在重力场中或者其他任何会影响球的位置的场中，球处于盒子的正中央。你可以想象盒子在外太空中，远离任何天体，如果很难想象，那就当做盒子在航天飞机中，一切东西都处于无重力状态。在上面的图中你可以看到我们给每个轴分配了一对墙（我们移除了Y+以此来观察里面的情况）。设想每面墙都能感测压力。如果我们突然把盒子向左移动（加速度为1g=9.8m/s^2），那么球会撞上X-墙。然后我们检测球撞击墙面产生的压力，根据F=ma，计算出X轴加速度输出值为-1g。<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101317203" alt="这里写图片描述" loading="lazy"><br>请注意加速度计检测到的力方向与它本身加速度的方向是相反的。这种力量通常被称为惯性力或假想力 。在这个模型中你应该明白加速度计是通过间接测量力对一个墙面的作用来测量加速度的，在实际应用中，可能通过弹簧等装置来测量力。这个力可以是加速度引起的，但在下面的例子中，我们会发现它不一定是加速度引起的。<br>如果我们把模型放在地球上，球会落在Z-墙面上并对其施加一个1g的力，见下图：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101342743" alt="这里写图片描述" loading="lazy"><br>在这种情况下盒子没有移动但我们任然读取到Z轴有-1g的值。球在墙壁上施加的压力是由引力造成的。在理论上，它可以是不同类型的力量，例如，你可以想象我们的球是铁质的，将一个磁铁放在盒子旁边那球就会撞上另一面墙。引用这个例子只是为了说明加速度计的本质是检测力而非加速度。只是加速度所引起的惯性力正好能被加速度计的检测装置所捕获。<br>虽然这个模型并非一个MEMS传感器的真实构造，但它用来解决与加速度计相关的问题相当有效。实际上有些类似传感器中有金属小球，它们称作倾角开关，但是它们的功能更弱，只能检测设备是否在一定程度内倾斜，却不能得到倾斜的程度。<br>到目前为止，我们已经分析了单轴的加速度计输出，这是使用单轴加速度计所能得到的。三轴加速度计的真正价值在于它们能够检测全部三个轴的惯性力。让我们回到盒子模型，并将盒子向右旋转45度。现在球会与两个面接触：Z-和X-，见下图：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101354118" alt="这里写图片描述" loading="lazy"><br>0.71g这个值是不是任意的，它们实际上是1/2的平方根的近似值。我们介绍加速度计的下一个模型时这一点会更清楚。<br>在上一个模型中我们引入了重力并旋转了盒子。在最后的两个例子中我们分析了盒子在两种情况下的输出值，力矢量保持不变。虽然这有助于理解加速度计是怎么和外部力相互作用的，但如果我们将坐标系换为加速度的三个轴并想象矢量力在周围旋转，这会更方便计算。<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101540369" alt="这里写图片描述" loading="lazy"><br>请看看在上面的模型，我保留了轴的颜色，以便你的思维能更好的从上一个模型转到新的模型中。想象新模型中每个轴都分别垂直于原模型中各自的墙面。矢量R是加速度计所检测的矢量（它可能是重力或上面例子中惯性力的合成）。RX，RY，RZ是矢量R在X，Y，Z上的投影。请注意下列关系：<br>R ^ 2 = RX ^ 2 + RY ^ 2 + RZ ^ 2（公式1）<br>此公式等价于三维空间勾股定理。<br>还记得我刚才说的1/2的平方根0.71不是个随机值吧。如果你把它们代回上式，回顾一下重力加速度是1g，那我们就能验证：<br>1 ^ 2 =（SQRT（1/2））^ 2 + 0 ^ 2 +（SQRT（1/2））^ 2<br>在公式1中简单的取代： R=1, Rx = -SQRT(1/2), Ry = 0 , Rz = -SQRT(1/2)<br>经过一大段的理论序言后，我们和实际的加速度计很靠近了。RX，RY，RZ值是实际中加速度计输出的线性相关值，你可以用它们进行各种计算。<br>在我们运用它之前我们先讨论一点获取加速度计数据的方法。大多数加速度计可归为两类：数字和模拟。数字加速度计可通过I2C，SPI或USART方式获取信息，而模拟加速度计的输出是一个在预定范围内的电压值，你需要用ADC（模拟量转数字量）模块将其转换为数字值。我将不会详细介绍ADC是怎么工作的，部分原因是这是个很广的话题，另一个原因是不同平台的ADC都会有差别。有些MCU具有内置ADC模块，而有些则需要外部电路进行ADC转换。不管使用什么类型的ADC模块，你都会得到一个在一定范围内的数值。例如一个10位ADC模块的输出值范围在0 … 1023间，请注意，1023 = 2 ^ 10 -1。一个12位ADC模块的输出值范围在0 … 4095内，注意，4095 = 2 ^ 12-1。<br>我们继续，先考虑下一个简单的例子，假设我们从10位ADC模块得到了以下的三个轴的数据：<br>AdcRx = 586<br>AdcRy = 630<br>AdcRz = 561<br>每个ADC模块都有一个参考电压，假设在我们的例子中，它是3.3V。要将一个10位的ADC值转成电压值，我们使用下列公式：<br>VoltsRx = AdcRx * VREF / 1023<br>小注：8位ADC的最大值是255 = 2 ^ 8 -1，12位ADC最大值是4095 = 2 ^ 12 -1。<br>将3个轴的值代入上式，得到：<br>VoltsRx = 586 * 3.3 / 1023 =～1.89V（结果取两位小数）<br>VoltsRy = 630 * 3.3 / 1023 =～2.03V<br>VoltsRz = 561 * 3.3 / 1023 =～1.81V<br>每个加速度计都有一个零加速度的电压值，你可以在它的说明书中找到，这个电压值对应于加速度为0g。通过计算相对0g电压的偏移量我们可以得到一个有符号的电压值。比方说，0g电压值 VzeroG= 1.65V，通过下面的方式可以得到相对0g电压的偏移量:<br>DeltaVoltsRx = 1.89V - 1.65V = 0.24V<br>DeltaVoltsRy = 2.03V - 1.65V = 0.38V<br>DeltaVoltsRz = 1.81V - 1.65V = 0.16V<br>现在我们得到了加速度计的电压值，但它的单位还不是g（9.8m/s^2），最后的转换，我们还需要引入加速度计的灵敏度（Sensitivity），单位通常是 mV/g。比方说，加速度计的灵敏度 Sensitivity= 478.5mV / g = 0.4785V /g。灵敏度值可以在加速度计说明书中找到。要获得最后的单位为g的加速度，我们使用下列公式计算：<br>RX = DeltaVoltsRx /Sensitivity<br>RX = 0.24V / 0.4785V / G =～0.5g<br>RY = 0.38V / 0.4785V / G =～0.79g<br>RZ = 0.16V / 0.4785V / G =～0.33g<br>当然，我们可以把所有的步骤全部放在一个式子里，但我想通过介绍每一个步骤以便让你了解怎么读取一个ADC值并将其转换为单位为g的矢量力的分量。<br>Rx = (AdcRx * Vref / 1023 – VzeroG) / Sensitivity (公式2)<br>Ry = (AdcRy * Vref / 1023 – VzeroG) / Sensitivity<br>Rz = (AdcRz * Vref / 1023 – VzeroG) / Sensitivity<br>现在我们得到了惯性力矢量的三个分量，如果设备除了重力外不受任何外力影响，那我们就可以认为这个方向就是重力矢量的方向。如果你想计算设备相对于地面的倾角，可以计算这个矢量和Z轴之间的夹角。如果你对每个轴的倾角都感兴趣，你可以把这个结果分为两个分量：X轴、Y轴倾角，这可以通过计算重力矢量和X、Y轴的夹角得到。计算这些角度比你想象的简单，现在我们已经算出了Rx，Ry，Rz的值，让我们回到我们的上一个加速度模型，再加一些标注上去：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101555463" alt="这里写图片描述" loading="lazy"><br>我们感兴趣的角度是向量R和X，Y，Z轴之间的夹角，那就令这些角度为Axr，Ayr，Azr。观察由R和Rx组成的直角三角形：<br>cos(Axr) = Rx / R , 类似的：<br>cos(Ayr) = Ry / R<br>cos(Azr) = Rz / R<br>从公式1我们可以推导出 R = SQRT( Rx^2 + Ry^2 + Rz^2)<br>通过arccos()函数（cos()的反函数）我们可以计算出所需的角度：<br>Axr = arccos(Rx/R)<br>Ayr = arccos(Ry/R)<br>Azr = arccos(Rz/R)<br>我们花了大段的篇幅来解释加速度计模型，最后所要的只是以上这几个公式。根据你的应用场合，你可能会用到我们推导出来的几个过渡公式。我们接下来要介绍陀螺仪模块，并向大家介绍怎么融合加速度计和陀螺仪的数据以得到更精确的倾角值。<br>但在此之前，我们再介绍几个很常用的公式：<br>cosX = cos(Axr) = Rx / R<br>cosY = cos(Ayr) = Ry / R<br>cosZ = cos(Azr) = Rz / R<br>这三个公式通常称作方向余弦 ，它主要表达了单位向量（长度为1的向量）和R向量具有相同的方向。你可以很容易地验证：<br>SQRT（cosX ^ 2 + COSY ^ 2 + cosZ ^ 2）= 1<br>这是个很好的性质，因为它避免了我们一直检测R向量的模（长度）。通常如果我们只是对惯性力的方向感兴趣，那标准化模长以简化其他计算是个明智的选择。</li><li>常用加速度传感器<br>加速度计种类繁多，MMA、LSM、MPU、BMA等系列，如：MMA7460、MMA8452、MPU6050（A+G）、MPU6800(A+G)、LSM6DSL(A+G)、IMC20603(A+G)、MPU9150（A+G+M）</li><li>使用场景<br>加速度计通过一定的算法，就可以做成我们常用的功能，如：计步器、拍照防抖、GPS补偿、跌落保护、图像旋转、游戏控制器等。</li></ul><h2 id="陀螺仪">陀螺仪</h2><p>通常称为Gyro-sensor，用来测量在X、Y、Z轴上的旋转速率，单位:rad/s。<br>以手机为例，将手机平放桌面，屏幕朝上，以逆时针方向旋转手机，获得到的是Z轴的加速度值。<br>有兴趣可以安装“sensor_list.apk”工具，来查看X、Y、Z轴的加速度值。</p><ul><li>原理<br>对于陀螺仪我们将不会像加速度计一样介绍它的等价盒子模型，而是直接跳到加速度计的第二个模型，通过这个模型我们会向大家介绍陀螺仪是怎么工作的。<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101615317" alt="这里写图片描述" loading="lazy"><br>陀螺仪的每个通道检测一个轴的旋转。例如，一个2轴陀螺仪检测绕X和Y轴的旋转。为了用数字来表达这些旋转，我们先引进一些符号。首先我们定义：<br>Rxz – 惯性力矢量R在XZ平面上的投影<br>Ryz – 惯性力矢量R在YZ平面的上投影<br>在由Rxz和Rz组成的直角三角形中，运用勾股定理可得：<br>Rxz^2 = Rx^2 + Rz^2 ，同样：<br>Ryz^2 = Ry^2 + Rz^2<br>同时注意：<br>R^2 = Rxz^2 + Ry^2 ，这个公式可以公式1和上面的公式推导出来，也可由R和Ryz所组成的直角三角形推导出来<br>R ^ 2 = Ryz ^ 2 + RX ^ 2<br>在这篇文章中我们不会用到这些公式，但知道模型中的那些数值间的关系有助于理解。<br>相反，我们按如下方法定义Z轴和Rxz、Ryz向量所成的夹角：<br>AXZ - Rxz（矢量R在XZ平面的投影）和Z轴所成的夹角<br>AYZ - Ryz（矢量R在YZ平面的投影）和Z轴所成夹角<br>现在我们离陀螺仪要测量的东西又近了一步。陀螺仪测量上面定义的角度的变化率。换句话说，它会输出一个与上面这些角度变化率线性相关的值。为了解释这一点，我们先假设在t0时刻，我们已测得绕Y轴旋转的角度（也就是Axz），定义为Axz0，之后在t1时刻我们再次测量这个角度，得到Axz1。角度变化率按下面方法计算：<br>RateAxz = (Axz1 – Axz0) / (t1 – t0).<br>如果用度来表示角度，秒来表示时间，那这个值的单位就是 度/秒。这就是陀螺仪检测的东西。<br>在实际运用中，陀螺仪一般都不会直接给你一个单位为度/秒的值（除非它是个特殊的数字陀螺仪）。就像加速度计一样，你会得到一个ADC值并且要用类似公式2的式子将其转换成单位为 度/秒的值。让我们来介绍陀螺仪输出值转换中的ADC部分（假设使用10位ADC模块，如果是8位ADC，用1023代替255，如果是12为ADC用4095代替1023）。<br>RateAxz = (AdcGyroXZ * Vref / 1023 – VzeroRate) / Sensitivity 公式3<br>RateAyz = (AdcGyroYZ * Vref / 1023 – VzeroRate) / Sensitivity<br>AdcGyroXZ，AdcGyroYZ - 这两个值由ADC读取，它们分别代表矢量R的投影在XZ和YZ平面内里的转角，也可等价的说，旋转可分解为单独绕Y和X轴的运动。<br>Vref – ADC的参考电压，上例中我们使用3.3V<br>VzeroRate – 是零变化率电压，换句话说它是陀螺仪不受任何转动影响时的输出值，对调试板来说，可以认为是1.23V（此值通常可以在说明书中找到——但千万别相信这个值，因为大多数的陀螺仪在焊接后会有一定的偏差，所以可以使用电压计测量每个通道的输出值，通常这个值在焊接后就不会改变，如果有跳动，在设备使用前写一个校准程序对其进行测量，用户应当在设备启动的时候保持设备静止以进行校准）。<br>Sensitivity –陀螺仪的灵敏度，单位mV/(deg/s)，通常写作mV/deg/s,它的意思就是如果旋转速度增加1°/s,陀螺仪的输出就会增加多少mV。调试板的灵敏度值是2mV/deg/s或0.002V/deg/s<br>让我们举个例子，假设我们的ADC模块返回以下值：<br>AdcGyroXZ = 571<br>AdcGyroXZ = 323<br>用上面的公式，在代入调试板的参数，可得：<br>RateAxz = (571 * 3.3V / 1023 – 1.23V) / ( 0.002V/deg/s) =~ 306 deg/s<br>RateAyz = (323 * 3.3V / 1023 – 1.23V) / ( 0.002V/deg/s) =~ -94 deg/s<br>换句话说设备绕Y轴（也可以说在XZ平面内）以306°/s速度和绕X轴（或者说YZ平面内）以-94°/s的速度旋转。请注意，负号表示该设备朝着反方向旋转。按照惯例，一个方向的旋转是正值。一份好的陀螺仪说明书会告诉你哪个方向是正的，否则你就要自己测试出哪个旋转方向会使得输出脚电压增加。最好使用示波器进行测试，因为一旦你停止了旋转，电压就会掉回零速率水平。如果你使用的是万用表，你得保持一定的旋转速度几秒钟并同时比较电压值和零速率电压值。如果值大于零速率电压值那说明这个旋转方向是正向。</li><li>常用陀螺仪传感器<br>目前市面上较多的都是二合一模块（加速度+陀螺仪），如：MPU6050（A+G）、MPU6800(A+G)、LSM6DSL(A+G)、IMC20603(A+G)、MPU9150（A+G+M）。</li><li>使用场景<br>航海、航空、游戏、拍照防抖、控制等。</li></ul><h2 id="磁力计">磁力计</h2><ul><li>原理<br><a href="http://www.stmcu.org/article/id-261634">ST对电子罗盘的详细介绍</a>。</li><li>常用磁力计传感器<br>AKM8963（很经典的一颗，目前停产）、AKM09911、AKM09915、LIS3MDL，磁传感器目前还是AKM一家独大，其他家的性能差距还是比较明显的。</li><li>使用场景<br>主要是指南针，在应用中对6轴数据进行偏航校正。</li></ul><h2 id="融合算法">融合算法</h2><p>想想我们为什么需要9轴的数据来确认物体的姿态呢？有了加速度计数据可以确定物体摆放的状态，例如有加速度计的手机，可以根据手机的横竖屏状态来触发屏幕相应的旋转，但对于物体的翻转、旋转的快慢无从得知，检测不到物体的瞬时状态，这时候就需要加入陀螺仪，通过加速度和陀螺仪的积分运算（这部分计算可以看下面Oculus的融合算法说明），可以获得到物体的运动状态，积分运算与真实状态存在微小差值，短时间内影响很小，但这个误差会一直累积，随着使用时间增加，就会有明显的偏离，6轴的设备，在转动360度后，图像并不能回到原点，就是这个原因，就像人迷路后找不着北一样，这时候就需要一个准确的方向，因此引入磁力计，来找到正确的方向进行校正。融合算法是通过这9轴的数据来计算出物体正确的姿态。目前9轴融合算法包括卡尔曼滤波、粒子滤波、互补滤波算法，对于开发者而言，所有的融合算法本基本都是丢入9轴传感器的数据和时间戳，然后获取到融合算法输出的四元素，应用所需的就是这组四元素，目前我这里接触到的算法包括：</p><ul><li>Oculus融合算法<br>目前卡尔曼滤波和例子滤波都存在一定的局限性，比较好的选择是互补滤波算法，之前翻译过oculus传感器算法<a href="http://blog.csdn.net/dabenxiong666/article/details/52957370">Oculus:”sensor fusion:Keeping It Simple”</a><br>它的代码实现在openHMD中ofusion_update接口中，有兴趣可以下载openHMD来研究一下。<br><strong>注</strong>：openHMD中的oculus融合算法（已更新于2016.12.01），我们曾经把它应用到项目当中，后来发现这部分算法不包含航向偏移校正。</li><li>互补滤波算法<br>MIT上发表的互补滤波算法的原理和基于Android平台的算法实现，很完整的算法，oculus的算法也是基于互补滤波的，个人认为目前入门融合算法最好的选择<a href="https://www.codeproject.com/articles/729759/android-sensor-fusion-tutorial">MIT互补滤波算法</a>。</li><li>AHRS<br>在四轴飞行器论坛上，比较多人使用AHRS开源融合算法,<a href="https://github.com/TobiasSimon/MadgwickTests/blob/master/MadgwickAHRS.c">这里获取源码</a><br>如果是爱好者，使用开源的算法能满足大多数的需求，另外可以看一下AMO论坛上的这个讨论<a href="http://www.amobbs.com/thread-5492189-1-1.html">捷联惯导算法心得</a>。<br>产品化还是依赖原厂提供的算法。</li></ul><h2 id="传感器调试">传感器调试</h2><p>这里不对特定平台（MCU、Android、Linux等），传感器通讯接口（I2C、SPI等）、数据传递子系统(input、IIO等)详细说明，这部分代码由各sensor厂家直接提供，这里主要说明一下调试基本流程和方法：</p><ul><li>通讯接口<br>传感器IC的通讯接口I2C或SPI，通讯接口能够读写正常即可。</li><li>寄存器配置<br>寄存器参数配置，一般原厂会提供，根据自己需求设置full scale(量程)、ODR（采样速率）、中断、休眠模式 即可。</li><li>坐标系转换<br>这3种传感器在实际应用中，都需要调整IC的坐标系与实际坐标系相匹配。IC的坐标系是固定的，参考规格书，这里以20602为例：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101725183" alt="这里写图片描述" loading="lazy"><br>而实际应用当中，也有自己的坐标系，手机应用（右手坐标系）：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101733085" alt="这里写图片描述" loading="lazy"><br>unity应用（左手坐标系）：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101748589" alt="这里写图片描述" loading="lazy"><br>坐标系的匹配，一般通过驱动的旋转矩阵，来调整。这里需要注意，融合算法一般直接适配的是右手坐标系，而VR应用多数是基于unity引擎开发的，即采用左手坐标系，这里不能将IC的坐标系直接与左手坐标系做匹配，否则会有漂移！这个转换应用会有对应的API去做转换，将驱动坐标系与世界坐标系匹配。</li><li>硬件环境<br>另外传感器对于硬件有所要求，比如IC摆放不能靠近边缘，下方走线规范，附近几毫米内不允许有大电流，马达，软磁、硬磁干扰等等，这方面最好是把PCB给原厂审核，磁方面用他们专门的设备扫描磁力计周围的磁场环境是否正常。<br>基本理论搞清楚调试起来就会得心应手，这里提供一个<a href="http://download.csdn.net/detail/dabenxiong666/9718883?locationNum=4&amp;fps=1">Android平台调试sensor的文档</a>，其他平台类似。</li></ul><h2 id="9轴方案选择">9轴方案选择</h2><p>上面主要对传感器的知识做了一些整理和归纳，下面是我们在做9轴方案选择的一些实验,目前选择市面上使用较多的两家（ST和Invensense）9轴方案进行评估、测试，均是用官方建议最优方案，即：<br>ST:LSM6DSL+LIS3MDL<br>Invensense: imc20603+akm09915<br>对比内容包括静态、动态对比以及结合应用体验来评估2种传感器方案，<a href="https://drive.google.com/open?id=0Bx5hCqFqKCggZHRRdV80ZXk0MWc">测试数据包和测试视频</a>。</p><ul><li><p>静态数据</p><p>放置30秒后，开始采集5分钟静态数据,3000~5000组数据（包括欧拉角、四元素、磁数据），数据见附件中的“静态数据”表格</p><ul><li>静态漂移：<br>根据四元素均方差数据计算，5分钟内ST与Invensense静态角度偏差均小于1度，此项2种方案相同。</li><li>Yaw角偏移：<br>Yaw均方差数值接近(ST为0.19，invensense为0.20)，YAW角偏移大概在1度左右，此项2种方案相同。</li></ul></li><li><p>动态数据</p><ul><li>回归测试：<br>放置到固定位置，任意角度运动1分钟，运动过程未超量程（即：运动中，加速度不超过4g，陀螺仪不超过2000dps），放回原位置，然后对比运动前后，看应用的画面是否与运动前一致。如”回归测试视频”所示，Invensense的画面能够基本回到原来的位置，ST的有明显偏移,这个视频对于2种sensor的优劣还是比较明显的。<br>此项Invensense优于ST。</li><li>磁数据测试<br>固定桌面，缓慢旋转2周，抓取3500个数据点，通过matlab作图。<br>Invensense磁数据图：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101802996" alt="这里写图片描述" loading="lazy"><br>ST磁数据图：<br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20161223101810965" alt="这里写图片描述" loading="lazy"><br>说明:测试时，平放板子到桌面，然后缓慢旋转2周（绕Z轴旋转），上图x/y轴分别未经算法处理的X、Y的磁数据，因为ST和Invensense抓取到的磁数据放大倍数不同所以看起来数据量级不一样，但不影响判断，数据的放大倍数只影响圆的半径大小。磁数据是用来对航向（yaw）校正的，关系到9轴数据的准确性。从图上可以看出invensense的磁数据基本落在一个圆内，ST的磁数据在圆内、圆外都有很多离散的点，影响9周数据的准确性。<br>此项Invensense优于ST。</li></ul></li><li><p>应用体验</p><ul><li>收敛速度<br>结合应用测试，Invensense在运动后1秒内收敛完成，而ST的需要2-3秒的校正时间后，才能收敛完。<br>此项Invensense优于ST.</li></ul></li></ul><p>结论：静态数据2种方案相差不大，5分钟内偏移角度都在1度以内，且有磁力计可以纠正航向问题，都能满足需要，但在动态数据上，Invense明显优于ST，在实际体验中Invense收敛快，能回归，所以9轴方案Invensense优于ST。</p><h1>参考链接</h1><p><a href="https://developer3.oculus.com/blog/sensor-fusion-keeping-it-simple/">oculars sensor doc</a><br><a href="http://www.starlino.com/imu_guide.html">starlino Imu introduce</a><br><a href="https://developer.android.com/guide/topics/sensors/sensors_overview.html">goole sensor introduce</a><br><a href="http://www.geek-workshop.com/thread-1695-1-1.html">geek-workshop</a><br><a href="http://www.amobbs.com/thread-5492189-1-1.html">捷联惯导算法心得</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>陀螺仪--mpu6050</title>
      <link href="posts/aff2bd6e/"/>
      <url>posts/aff2bd6e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><span id="more"></span><h1>Ⅰ.陀螺仪</h1><p>陀螺仪是用高速回转体的动量矩敏感壳体相对惯性空间绕正交于自转轴的一个或二个轴的角运动检测装置。利用其他原理制成的角运动检测装置起同样功能的也称陀螺仪。<br>从力学的观点近似的分析陀螺的运动时，可以把它看成是一个刚体，刚体上有一个万向支点，而陀螺可以绕着这个支点作三个自由度的转动，所以陀螺的运动是属于刚体绕一个定点的转动运动。更确切地说，一个绕对称铀高速旋转的飞轮转子叫陀螺。将陀螺安装在框架装置上，使陀螺的自转轴有角转动的自由度，这种装置的总体叫做陀螺仪。<br>陀螺仪的原理就是，一个旋转物体的旋转轴所指的方向在不受外力影响时，是不会改变的。人们根据这个道理，用它来保持方向，制造出来的东西就叫陀螺仪。我们骑自行车其实也是利用了这个原理。轮子转得越快越不容易倒，因为车轴有一股保持水平的力量。陀螺仪在工作时要给它一个力，使它快速旋转起来，一般能达到每分钟几十万转，可以工作很长时间。然后用多种方法读取轴所指示的方向，并自动将数据信号传给控制系统。</p><h1>Ⅱ.MPU6050模块</h1><p>简介：<br>MPU6050内部整合了<strong>三轴MEMS陀螺仪</strong>、<strong>三轴MEMS加速度计</strong>以及一个可扩展的<strong>数字运动处理器DMP(Digital Motion Processor)</strong>，而且还可以连接一个第三方数字传感器(如磁力计)，这样的话，就可以通过IIC接口输出一个9轴信号(链接第三方数字传感器才可以输出九轴信号，否则只有六轴信号)。更加方便的是，有了DMP，可以结合InvenSense公司提供的运动处理资料库，实现姿态解算。通过自带的DMP，可以通过<strong>IIC接口</strong>输出9轴融合演算的数据，大大降低了运动处理运算对操作系统的负荷，同时也降低了开发难度。<em><strong>其实，简单一句话说，陀螺仪就是测角速度的，加速度传感器就是测角加速度的，二者数据通过算法就可以得到PITCH、YAW、ROLL角了。</strong></em></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20140401183456562" alt="右手笛卡尔坐标系" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20140401183518578" alt="img" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20140401183525562" alt="img" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20140401183537890" alt="img" loading="lazy"></p><p>特点：</p><ol><li>以数字形式输出 6 轴或 9 轴（需外接磁传感器）的旋转矩阵、四元数(quaternion)、欧拉角格式(Euler Angle forma)的融合演算数据（需 DMP 支持）</li><li>具有 131 LSBs/° /sec 敏感度与全格感测范围为±250、±500、±1000 与±2000° /sec的 3 轴角速度感测器(陀螺仪)</li><li>集成可程序控制，范围为±2g、±4g、±8g 和±16g 的 3 轴加速度传感器</li><li>移除加速器与陀螺仪轴间敏感度，降低设定给予的影响与感测器的飘移</li><li>自带数字运动处理(DMP: Digital Motion Processing)引擎可减少 MCU 复杂的融合演算数据、感测器同步化、姿势感应等的负荷</li><li>内建运作时间偏差与磁力感测器校正演算技术，免除了客户须另外进行校正的需求</li><li>自带一个数字温度传感器</li><li>带数字输入同步引脚(Sync pin)支持视频电子影相稳定技术与 GPS</li><li>可程序控制的中断(interrupt)，支持姿势识别、摇摄、画面放大缩小、滚动、快速下降中断、 high-G 中断、零动作感应、触击感应、摇动感应功能</li><li>VDD 供电电压为 2.5V±5%、 3.0V±5%、 3.3V±5%； VLOGIC 可低至 1.8V± 5%</li><li>陀螺仪工作电流： 5mA，陀螺仪待机电流： 5uA； 加速器工作电流：500uA，加速器省电模式电流： 40uA@10Hz</li><li>自带 1024 字节 FIFO，有助于降低系统功耗</li><li>高达 400Khz 的 IIC 通信接口</li><li>超小封装尺寸： 4x4x0.9mm（QFN）</li></ol><p>MPU6050三轴角(姿态角)<br><img src="https://img-blog.csdnimg.cn/20210527164308375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br><strong>绕向即为正方向，可根据右手螺旋定则确定方向。</strong><br>MPU6050框图：<br><img src="https://img-blog.csdnimg.cn/20210527152447545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy">可以很清晰地观察到，MPU6050芯片中内置了三轴加速度传感器、三轴陀螺仪和一个温度传感器。右侧INT为中断输出脚，TCS为片选脚、AD0为设置地址脚、SCL和SDA为主IIC接口、AUX_CL和AUX_DA为从IIC接口，主要用到的是AD0、SCL、SDA。</p><p>相关寄存器(想深入了解的朋友可以看一下)结合后面的代码更容易理解一些<br>①<br><img src="https://img-blog.csdnimg.cn/20210527153154426.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>DEVICE_RESE=1，复位MPU6050，复位完成后，自动清零。SLEEP=1，进入睡眠模式；SLEEP=0，正常工作模式。TEMP_DIS，用于设置是否使能温度传感器，设置为0，则使能CLKSEL[2:0]，用于选择系统时钟源，如下所示：</p><table><thead><tr><th>CLKSEL[2:0]</th><th>时钟源</th></tr></thead><tbody><tr><td>001</td><td>内部8M RC晶振</td></tr><tr><td>010</td><td>PLL，使用X轴陀螺作为参考</td></tr><tr><td>011</td><td>PLL，使用Y轴陀螺作为参考</td></tr><tr><td>100</td><td>PLL，使用Z轴陀螺作为参考</td></tr><tr><td>101</td><td>PLL，使用外部32.768Khz作为参考</td></tr><tr><td>110</td><td>PLL，使用外部19.2Mhz作为参考</td></tr><tr><td>11</td><td>保留</td></tr><tr><td>001</td><td>关闭时钟，保持时序产生电路复位状态</td></tr></tbody></table><p>总之，电源管理寄存器就是复位MPU6050<br>②<br><img src="https://img-blog.csdnimg.cn/20210527154441137.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>该寄存器我们只关心FS_SEL[1:0]这两个位，用于设置陀螺仪的满量程范围：0，±250°/s；1，±500°/s；2，±1000°/s；3，±2000°/s；我们一般设置为3，即±2000°/S，因为陀螺仪的ADC为16位分辨率，所以得到灵敏度为：65536/4000=16.4LSB/(°/S)。<br>总之，陀螺仪配置寄存器就是配置陀螺仪满量程范围，设置最大<br>③<br><img src="https://img-blog.csdnimg.cn/20210527154625454.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>该寄存器我们只关心AFS_SEL[1:0]这两个位，用于设置加速度传感器的满量程范围：0，±2g；1，±4g；2，±8g；3，±16g；我们一般设置为0，即±2g，因为加速度传感器的ADC也是16位，所以得到灵敏度为：65536/4=16384LSB/g。<br>总之，加速度传感器配置寄存器就是配置加速度传感器满量程范围，不宜过大<br>④<br><img src="https://img-blog.csdnimg.cn/20210527154801757.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>该寄存器用于控制FIFO使能，在简单读取传感器数据的时候，可以不用FIFO，设置对应位为：0，即可禁止FIFO，设置为1，则使能FIFO。加速度传感器的三个轴，全由一个位(ACCEL_FIFO_EN)控制，只要该位为1，则加速度传感器三个通道都开启FIFO；但是陀螺仪传感器的三个轴需要一个一个设置，即XYZ轴分别配置。<br>总之，FIFO使能寄存器用于控制使能FIFO(First Input First Output)<br>⑤<br><img src="https://img-blog.csdnimg.cn/20210527160414156.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>该寄存器用于设置MPU6050的陀螺仪采样频率，计算公式为：<strong>采样频率 = 陀螺仪输出频率 / (1+SMPLRT_DIV)</strong>。这里陀螺仪的输出频率，是1Khz或者8Khz，与数字低通滤波器（DLPF）的设置有关，当DLPF_CFG=0或7的时候，频率为8Khz，其他情况是1Khz。而且DLPF滤波频率一般设置为采样率的一半。采样率，我们假定设置为50Hz，那么：SMPLRT_DIV=1000/50-1=19。<br>总之，陀螺仪采样率分频寄存器就是用于设置陀螺仪的采样频率，如果采样频率为50Hz，那么采样周期就为1/50=20ms，即20ms采集一次陀螺仪的数据。<br>⑥<br><img src="https://img-blog.csdnimg.cn/20210527160935948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>总之，配置寄存器就是设置数字低通滤波器的DLPF_CFG位来结合陀螺仪采样分频寄存器来共同设置采样周期。<br>⑦<br><img src="https://img-blog.csdnimg.cn/20210527162315369.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>该寄存器的LP_WAKE_CTRL用于控制低功耗时的唤醒频率，用不到。剩下的6位，分别控制加速度和陀螺仪的x/y/z轴是否进入待机模式，这里我们全部都不进入待机模式，所以全部设置为：0 ，即可。<br>总之，电源管理寄存器2就是用于设置加速度传感器和陀螺仪的X/Y/Z轴是进入休眠还是正常工作。<br>⑧<img src="https://img-blog.csdnimg.cn/20210527162507349.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>加速度传感器数据输出寄存器总共由6个寄存器组成，输出X/Y/Z三个轴的加速度传感器值，高字节在前，低字节在后。<br>总之，加速度传感器数据输出寄存器就是把加速度传感器测量到的数据输出出来。<br>⑨<br><img src="https://img-blog.csdnimg.cn/2021052716305611.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>陀螺仪数据输出寄存器总共由6个寄存器组成，输出X/Y/Z三个轴的陀螺仪传感器数据，高字节在前，低字节在后。<br>总之，陀螺仪数据输出寄存器就是把陀螺仪测量到的数据输出出来。<br>⑩<br><img src="https://img-blog.csdnimg.cn/20210527163838510.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>通过读取0X41（高8位）和0X42（低8位）寄存器得到，温度换算公式为：<br>Temperature = 36.53 + regval/340。其中，Temperature为计算得到的温度值，单位为℃，regval为从0X41和0X42读到的温度传感器值。<br>总之，温度传感器数据输出寄存器就是把温度寄存器测量到的数据处处出来。</p><h1>3.硬件连接</h1><p><img src="https://img-blog.csdnimg.cn/20210527164235503.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br><strong>VCC</strong>:接5V电源<br><strong>GND</strong>:接地<br><strong>SCL</strong>:主IIC时钟线 (我接的PB10)<br><strong>SDA</strong>:主IIC数据线 (我接的PB11)<br><strong>AD0</strong>:地址线，接3V地址为0x68，接地地址为0x69（我接的PA15，高电平，地址为0x68）</p><h1>4.软件代码————官方自带库</h1><p>MPU6050处理寄存器的相关数据时需要移植几个官方库，以便将数据处理为所需要的欧拉角。正点原子共提供了五个源码，如下图：<br><img src="https://img-blog.csdnimg.cn/20210527171530241.jpg#pic_center" alt="在这里插入图片描述" loading="lazy"><br>这些是需要在写MPU6050代码之前移植过来的，具体代码内容大家可以下载下方源码查看。</p><h1>5.软件代码————其他代码</h1><p>MPU6050.h<br><strong>主要宏定义一些MPU6050寄存器的地址，方便IIC发送给寄存器数据初始化MPU6050。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MPU6050_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MPU6050_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpuiic.h&quot;</span>       </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//MPU6050 AD0控制脚</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_AD0_CTRLPAout(15)<span class="comment">//控制AD0电平,从而控制MPU地址</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define MPU_ACCEL_OFFS_REG0X06//accel_offs寄存器,可读取版本号,寄存器手册未提到</span></span><br><span class="line"><span class="comment">//#define MPU_PROD_ID_REG0X0C//prod id寄存器,在寄存器手册未提到</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SELF_TESTX_REG0X0D<span class="comment">//自检寄存器X</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SELF_TESTY_REG0X0E<span class="comment">//自检寄存器Y</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SELF_TESTZ_REG0X0F<span class="comment">//自检寄存器Z</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SELF_TESTA_REG0X10<span class="comment">//自检寄存器A</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SAMPLE_RATE_REG0X19<span class="comment">//采样频率分频器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_CFG_REG0X1A<span class="comment">//配置寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_CFG_REG0X1B<span class="comment">//陀螺仪配置寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_CFG_REG0X1C<span class="comment">//加速度计配置寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_MOTION_DET_REG0X1F<span class="comment">//运动检测阀值设置寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_FIFO_EN_REG0X23<span class="comment">//FIFO使能寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CMST_CTRL_REG0X24<span class="comment">//IIC主机控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV0_ADDR_REG0X25<span class="comment">//IIC从机0器件地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV0_REG0X26<span class="comment">//IIC从机0数据地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV0_CTRL_REG0X27<span class="comment">//IIC从机0控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV1_ADDR_REG0X28<span class="comment">//IIC从机1器件地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV1_REG0X29<span class="comment">//IIC从机1数据地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV1_CTRL_REG0X2A<span class="comment">//IIC从机1控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV2_ADDR_REG0X2B<span class="comment">//IIC从机2器件地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV2_REG0X2C<span class="comment">//IIC从机2数据地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV2_CTRL_REG0X2D<span class="comment">//IIC从机2控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV3_ADDR_REG0X2E<span class="comment">//IIC从机3器件地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV3_REG0X2F<span class="comment">//IIC从机3数据地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV3_CTRL_REG0X30<span class="comment">//IIC从机3控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV4_ADDR_REG0X31<span class="comment">//IIC从机4器件地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV4_REG0X32<span class="comment">//IIC从机4数据地址寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV4_DO_REG0X33<span class="comment">//IIC从机4写数据寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV4_CTRL_REG0X34<span class="comment">//IIC从机4控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV4_DI_REG0X35<span class="comment">//IIC从机4读数据寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CMST_STA_REG0X36<span class="comment">//IIC主机状态寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_INTBP_CFG_REG0X37<span class="comment">//中断/旁路设置寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_INT_EN_REG0X38<span class="comment">//中断使能寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_INT_STA_REG0X3A<span class="comment">//中断状态寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_XOUTH_REG0X3B<span class="comment">//加速度值,X轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_XOUTL_REG0X3C<span class="comment">//加速度值,X轴低8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_YOUTH_REG0X3D<span class="comment">//加速度值,Y轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_YOUTL_REG0X3E<span class="comment">//加速度值,Y轴低8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_ZOUTH_REG0X3F<span class="comment">//加速度值,Z轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ACCEL_ZOUTL_REG0X40<span class="comment">//加速度值,Z轴低8位寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_TEMP_OUTH_REG0X41<span class="comment">//温度值高八位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_TEMP_OUTL_REG0X42<span class="comment">//温度值低8位寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_XOUTH_REG0X43<span class="comment">//陀螺仪值,X轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_XOUTL_REG0X44<span class="comment">//陀螺仪值,X轴低8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_YOUTH_REG0X45<span class="comment">//陀螺仪值,Y轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_YOUTL_REG0X46<span class="comment">//陀螺仪值,Y轴低8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_ZOUTH_REG0X47<span class="comment">//陀螺仪值,Z轴高8位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_GYRO_ZOUTL_REG0X48<span class="comment">//陀螺仪值,Z轴低8位寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV0_DO_REG0X63<span class="comment">//IIC从机0数据寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV1_DO_REG0X64<span class="comment">//IIC从机1数据寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV2_DO_REG0X65<span class="comment">//IIC从机2数据寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CSLV3_DO_REG0X66<span class="comment">//IIC从机3数据寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_I2CMST_DELAY_REG0X67<span class="comment">//IIC主机延时管理寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SIGPATH_RST_REG0X68<span class="comment">//信号通道复位寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_MDETECT_CTRL_REG0X69<span class="comment">//运动检测控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_USER_CTRL_REG0X6A<span class="comment">//用户控制寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_PWR_MGMT1_REG0X6B<span class="comment">//电源管理寄存器1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_PWR_MGMT2_REG0X6C<span class="comment">//电源管理寄存器2 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_FIFO_CNTH_REG0X72<span class="comment">//FIFO计数寄存器高八位</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_FIFO_CNTL_REG0X73<span class="comment">//FIFO计数寄存器低八位</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_FIFO_RW_REG0X74<span class="comment">//FIFO读写寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_DEVICE_ID_REG0X75<span class="comment">//器件ID寄存器</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果AD0脚(9脚)接地,IIC地址为0X68(不包含最低位).</span></span><br><span class="line"><span class="comment">//如果接V3.3,则IIC地址为0X69(不包含最低位).</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_ADDR0X68</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为模块AD0默认接GND,所以转为读写地址后,为0XD1和0XD0(如果接VCC,则为0XD3和0XD2)  </span></span><br><span class="line"><span class="comment">//#define MPU_READ    0XD1</span></span><br><span class="line"><span class="comment">//#define MPU_WRITE   0XD0</span></span><br><span class="line"></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//初始化MPU6050</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Write_Len</span><span class="params">(u8 addr,u8 reg,u8 len,u8 *buf)</span></span>;<span class="comment">//IIC连续写</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Read_Len</span><span class="params">(u8 addr,u8 reg,u8 len,u8 *buf)</span></span>; <span class="comment">//IIC连续读 </span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Write_Byte</span><span class="params">(u8 reg,u8 data)</span></span>;<span class="comment">//IIC写一个字节</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Read_Byte</span><span class="params">(u8 reg)</span></span>;<span class="comment">//IIC读一个字节</span></span><br><span class="line"></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Gyro_Fsr</span><span class="params">(u8 fsr)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Accel_Fsr</span><span class="params">(u8 fsr)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_LPF</span><span class="params">(u16 lpf)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Rate</span><span class="params">(u16 rate)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Fifo</span><span class="params">(u8 sens)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">MPU_Get_Temperature</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Get_Gyroscope</span><span class="params">(<span class="keyword">short</span> *gx,<span class="keyword">short</span> *gy,<span class="keyword">short</span> *gz)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_Get_Accelerometer</span><span class="params">(<span class="keyword">short</span> *ax,<span class="keyword">short</span> *ay,<span class="keyword">short</span> *az)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105</span></span><br></pre></td></tr></table></figure><p>MPU6050.c<br><strong>主要是单片机通过IIC协议向MPU6050写数据读数据的函数以及MPU6050初始化函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span>   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Init</span></span><br><span class="line"><span class="comment">函数功能：初始化MPU6050</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：0,初始化成功  其他,初始化失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">u8 res;</span><br><span class="line">  </span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能AFIO时钟 </span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);<span class="comment">//先使能外设IO PORTA时钟 </span></span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;  <span class="comment">//端口配置</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  <span class="comment">//IO口速度为50MHz</span></span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);      <span class="comment">//根据设定参数初始化GPIOA</span></span><br><span class="line"></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);<span class="comment">//禁止JTAG,从而PA15可以做普通IO使用,否则PA15不能做普通IO!!!</span></span><br><span class="line"></span><br><span class="line">MPU_AD0_CTRL=<span class="number">0</span>;<span class="comment">//控制MPU6050的AD0脚为低电平,从机地址为:0X68</span></span><br><span class="line"></span><br><span class="line">MPU_IIC_Init();<span class="comment">//初始化IIC总线</span></span><br><span class="line">MPU_Write_Byte(MPU_PWR_MGMT1_REG,<span class="number">0X80</span>);<span class="comment">//复位MPU6050</span></span><br><span class="line">  delay_ms(<span class="number">100</span>);</span><br><span class="line">MPU_Write_Byte(MPU_PWR_MGMT1_REG,<span class="number">0X00</span>);<span class="comment">//唤醒MPU6050 </span></span><br><span class="line">MPU_Set_Gyro_Fsr(<span class="number">3</span>);<span class="comment">//陀螺仪传感器,±2000dps</span></span><br><span class="line">MPU_Set_Accel_Fsr(<span class="number">0</span>);<span class="comment">//加速度传感器,±2g</span></span><br><span class="line">MPU_Set_Rate(<span class="number">50</span>);<span class="comment">//设置采样率50Hz</span></span><br><span class="line">MPU_Write_Byte(MPU_INT_EN_REG,<span class="number">0X00</span>);<span class="comment">//关闭所有中断</span></span><br><span class="line">MPU_Write_Byte(MPU_USER_CTRL_REG,<span class="number">0X00</span>);<span class="comment">//I2C主模式关闭</span></span><br><span class="line">MPU_Write_Byte(MPU_FIFO_EN_REG,<span class="number">0X00</span>);<span class="comment">//关闭FIFO</span></span><br><span class="line">MPU_Write_Byte(MPU_INTBP_CFG_REG,<span class="number">0X80</span>);<span class="comment">//INT引脚低电平有效</span></span><br><span class="line"></span><br><span class="line">res=MPU_Read_Byte(MPU_DEVICE_ID_REG);</span><br><span class="line"><span class="keyword">if</span>(res==MPU_ADDR)<span class="comment">//器件ID正确,即res = MPU_ADDR = 0x68</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_Write_Byte(MPU_PWR_MGMT1_REG,<span class="number">0X01</span>);<span class="comment">//设置CLKSEL,PLL X轴为参考</span></span><br><span class="line">MPU_Write_Byte(MPU_PWR_MGMT2_REG,<span class="number">0X00</span>);<span class="comment">//加速度与陀螺仪都工作</span></span><br><span class="line">MPU_Set_Rate(<span class="number">50</span>);<span class="comment">//设置采样率为50Hz</span></span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">//地址设置错误,返回1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//地址设置正确,返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Set_Gyro_Fsr</span></span><br><span class="line"><span class="comment">函数功能：设置MPU6050陀螺仪传感器满量程范围</span></span><br><span class="line"><span class="comment">函数参数：fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps</span></span><br><span class="line"><span class="comment">函数返回值：0,设置成功  其他,设置失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Gyro_Fsr</span><span class="params">(u8 fsr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr&lt;&lt;<span class="number">3</span>); <span class="comment">//设置陀螺仪满量程范围</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Set_Accel_Fsr</span></span><br><span class="line"><span class="comment">函数功能：设置MPU6050加速度传感器满量程范围</span></span><br><span class="line"><span class="comment">函数参数：fsr:0,±2g;1,±4g;2,±8g;3,±16g</span></span><br><span class="line"><span class="comment">函数返回值：0,设置成功  其他,设置失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Accel_Fsr</span><span class="params">(u8 fsr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr&lt;&lt;<span class="number">3</span>); <span class="comment">//设置加速度传感器满量程范围  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Set_LPF</span></span><br><span class="line"><span class="comment">函数功能：设置MPU6050的数字低通滤波器</span></span><br><span class="line"><span class="comment">函数参数：lpf:数字低通滤波频率(Hz)</span></span><br><span class="line"><span class="comment">函数返回值：0,设置成功  其他,设置失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_LPF</span><span class="params">(u16 lpf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 data=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lpf&gt;=<span class="number">188</span>)data=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lpf&gt;=<span class="number">98</span>)data=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lpf&gt;=<span class="number">42</span>)data=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lpf&gt;=<span class="number">20</span>)data=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(lpf&gt;=<span class="number">10</span>)data=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> data=<span class="number">6</span>; </span><br><span class="line"><span class="keyword">return</span> MPU_Write_Byte(MPU_CFG_REG,data);<span class="comment">//设置数字低通滤波器  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Set_Rate</span></span><br><span class="line"><span class="comment">函数功能：设置MPU6050的采样率(假定Fs=1KHz)</span></span><br><span class="line"><span class="comment">函数参数：rate:4~1000(Hz)  初始化中rate取50</span></span><br><span class="line"><span class="comment">函数返回值：0,设置成功  其他,设置失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Set_Rate</span><span class="params">(u16 rate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 data;</span><br><span class="line"><span class="keyword">if</span>(rate&gt;<span class="number">1000</span>)rate=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">if</span>(rate&lt;<span class="number">4</span>)rate=<span class="number">4</span>;</span><br><span class="line">data=<span class="number">1000</span>/rate<span class="number">-1</span>;</span><br><span class="line">data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);<span class="comment">//设置数字低通滤波器</span></span><br><span class="line"> <span class="keyword">return</span> MPU_Set_LPF(rate/<span class="number">2</span>);<span class="comment">//自动设置LPF为采样率的一半</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Get_Temperature</span></span><br><span class="line"><span class="comment">函数功能：得到温度传感器值</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：温度值(扩大了100倍)</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">MPU_Get_Temperature</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   u8 buf[<span class="number">2</span>]; </span><br><span class="line">   <span class="keyword">short</span> raw;</span><br><span class="line"> <span class="keyword">float</span> temp;</span><br><span class="line"></span><br><span class="line"> MPU_Read_Len(MPU_ADDR,MPU_TEMP_OUTH_REG,<span class="number">2</span>,buf); </span><br><span class="line">   raw=((u16)buf[<span class="number">0</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">1</span>];</span><br><span class="line">   temp=<span class="number">36.53</span>+((<span class="keyword">double</span>)raw)/<span class="number">340</span>;</span><br><span class="line">   <span class="keyword">return</span> temp*<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Get_Gyroscope</span></span><br><span class="line"><span class="comment">函数功能：得到陀螺仪值(原始值)</span></span><br><span class="line"><span class="comment">函数参数：gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)</span></span><br><span class="line"><span class="comment">函数返回值：0,读取成功  其他,读取失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Get_Gyroscope</span><span class="params">(<span class="keyword">short</span> *gx,<span class="keyword">short</span> *gy,<span class="keyword">short</span> *gz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u8 buf[<span class="number">6</span>],res;</span><br><span class="line"></span><br><span class="line">res=MPU_Read_Len(MPU_ADDR,MPU_GYRO_XOUTH_REG,<span class="number">6</span>,buf);</span><br><span class="line"><span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*gx=((u16)buf[<span class="number">0</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">1</span>];</span><br><span class="line">*gy=((u16)buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</span><br><span class="line">*gz=((u16)buf[<span class="number">4</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">5</span>];</span><br><span class="line">&#125; </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Get_Accelerometer</span></span><br><span class="line"><span class="comment">函数功能：得到加速度值(原始值)</span></span><br><span class="line"><span class="comment">函数参数：ax,ay,az:加速度传感器x,y,z轴的原始读数(带符号)</span></span><br><span class="line"><span class="comment">函数返回值：0,读取成功  其他,读取失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Get_Accelerometer</span><span class="params">(<span class="keyword">short</span> *ax,<span class="keyword">short</span> *ay,<span class="keyword">short</span> *az)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u8 buf[<span class="number">6</span>],res;  </span><br><span class="line">res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,<span class="number">6</span>,buf);</span><br><span class="line"><span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ax=((u16)buf[<span class="number">0</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">1</span>];  </span><br><span class="line">*ay=((u16)buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];  </span><br><span class="line">*az=((u16)buf[<span class="number">4</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">5</span>];</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Write_Len</span></span><br><span class="line"><span class="comment">函数功能：IIC连续写(写器件地址、寄存器地址、数据)</span></span><br><span class="line"><span class="comment">函数参数：addr:器件地址      reg:寄存器地址</span></span><br><span class="line"><span class="comment"> len:写入数据的长度  buf:数据区</span></span><br><span class="line"><span class="comment">函数返回值：0,写入成功  其他,写入失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Write_Len</span><span class="params">(u8 addr,u8 reg,u8 len,u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i;</span><br><span class="line"></span><br><span class="line">MPU_IIC_Start();</span><br><span class="line">MPU_IIC_Send_Byte((addr&lt;&lt;<span class="number">1</span>)|<span class="number">0</span>);      <span class="comment">//发送器件地址+写命令(0为写,1为读)</span></span><br><span class="line"><span class="keyword">if</span>(MPU_IIC_Wait_Ack()) <span class="comment">//等待应答</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    MPU_IIC_Send_Byte(reg); <span class="comment">//写寄存器地址</span></span><br><span class="line">    MPU_IIC_Wait_Ack();             <span class="comment">//等待应答</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Send_Byte(buf[i]);       <span class="comment">//发送数据</span></span><br><span class="line"><span class="keyword">if</span>(MPU_IIC_Wait_Ack())         <span class="comment">//等待ACK</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Read_Len</span></span><br><span class="line"><span class="comment">函数功能：IIC连续读(写入器件地址后,读寄存器地址、数据)</span></span><br><span class="line"><span class="comment">函数参数：addr:器件地址        reg:要读的寄存器地址</span></span><br><span class="line"><span class="comment"> len:要读取的数据长度  buf:读取到的数据存储区</span></span><br><span class="line"><span class="comment">函数返回值：0,读取成功  其他,读取失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Read_Len</span><span class="params">(u8 addr,u8 reg,u8 len,u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MPU_IIC_Start();</span><br><span class="line">MPU_IIC_Send_Byte((addr&lt;&lt;<span class="number">1</span>)|<span class="number">0</span>);<span class="comment">//发送器件地址+写命令</span></span><br><span class="line"><span class="keyword">if</span>(MPU_IIC_Wait_Ack())<span class="comment">//等待应答</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop(); </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    MPU_IIC_Send_Byte(reg);<span class="comment">//写寄存器地址</span></span><br><span class="line">    MPU_IIC_Wait_Ack();<span class="comment">//等待应答</span></span><br><span class="line">    MPU_IIC_Start();</span><br><span class="line">MPU_IIC_Send_Byte((addr&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//发送器件地址+读命令</span></span><br><span class="line">    MPU_IIC_Wait_Ack();<span class="comment">//等待应答 </span></span><br><span class="line"><span class="keyword">while</span>(len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">1</span>) *buf=MPU_IIC_Read_Byte(<span class="number">0</span>);   <span class="comment">//读数据,发送nACK </span></span><br><span class="line"><span class="keyword">else</span>  *buf=MPU_IIC_Read_Byte(<span class="number">1</span>);<span class="comment">//读数据,发送ACK  </span></span><br><span class="line">len--;</span><br><span class="line">buf++;</span><br><span class="line">&#125;</span><br><span class="line">    MPU_IIC_Stop();<span class="comment">//产生一个停止条件 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Write_Byte</span></span><br><span class="line"><span class="comment">函数功能：IIC写一个字节</span></span><br><span class="line"><span class="comment">函数参数：data:写入的数据    reg:要写的寄存器地址</span></span><br><span class="line"><span class="comment">函数返回值：0,写入成功  其他,写入失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Write_Byte</span><span class="params">(u8 reg,u8 data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  MPU_IIC_Start();</span><br><span class="line">MPU_IIC_Send_Byte((MPU_ADDR&lt;&lt;<span class="number">1</span>)|<span class="number">0</span>);<span class="comment">//发送器件地址+写命令</span></span><br><span class="line"><span class="keyword">if</span>(MPU_IIC_Wait_Ack()) <span class="comment">//等待应答</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  MPU_IIC_Send_Byte(reg);<span class="comment">//写寄存器地址</span></span><br><span class="line">  MPU_IIC_Wait_Ack();<span class="comment">//等待应答</span></span><br><span class="line">MPU_IIC_Send_Byte(data);<span class="comment">//发送数据</span></span><br><span class="line"><span class="keyword">if</span>(MPU_IIC_Wait_Ack())  <span class="comment">//等待ACK</span></span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_Read_Byte</span></span><br><span class="line"><span class="comment">函数功能：IIC读一个字节</span></span><br><span class="line"><span class="comment">函数参数：reg:要读的寄存器地址</span></span><br><span class="line"><span class="comment">函数返回值：res:读取到的数据</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_Read_Byte</span><span class="params">(u8 reg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 res;</span><br><span class="line"></span><br><span class="line">  MPU_IIC_Start(); </span><br><span class="line">MPU_IIC_Send_Byte((MPU_ADDR&lt;&lt;<span class="number">1</span>)|<span class="number">0</span>);<span class="comment">//发送器件地址+写命令</span></span><br><span class="line">MPU_IIC_Wait_Ack();<span class="comment">//等待应答 </span></span><br><span class="line">  MPU_IIC_Send_Byte(reg);<span class="comment">//写寄存器地址</span></span><br><span class="line">  MPU_IIC_Wait_Ack();<span class="comment">//等待应答</span></span><br><span class="line">  MPU_IIC_Start();</span><br><span class="line">MPU_IIC_Send_Byte((MPU_ADDR&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);<span class="comment">//发送器件地址+读命令</span></span><br><span class="line">  MPU_IIC_Wait_Ack();<span class="comment">//等待应答 </span></span><br><span class="line">res=MPU_IIC_Read_Byte(<span class="number">0</span>);<span class="comment">//读取数据,发送nACK </span></span><br><span class="line">  MPU_IIC_Stop();<span class="comment">//产生一个停止条件 </span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279</span></span><br></pre></td></tr></table></figure><p>mpuiic.h<br><strong>MPU的IIC协议函数头文件，PB11为SDA，PB10为SCL。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MPUIIC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MPUIIC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IO方向设置  ---PB11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SDA_IN()  &#123;GPIOB-&gt;CRH &amp;= 0XFFFF0FFF;GPIOB-&gt;CRH |= 8&lt;&lt;12;&#125;   <span class="comment">//上拉/下拉 输入模式</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_SDA_OUT() &#123;GPIOB-&gt;CRH &amp;= 0XFFFF0FFF;GPIOB-&gt;CRH |= 3&lt;&lt;12;&#125;<span class="comment">//推挽输出  输出模式</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IO操作函数 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_IIC_SCL    PBout(10) <span class="comment">//SCL</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_IIC_SDA    PBout(11) <span class="comment">//SDA </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MPU_READ_SDA   PBin(11) <span class="comment">//输入SDA </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IIC所有操作函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Delay</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//IIC延时2ms函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;                <span class="comment">//初始化IIC的IO口 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//发送IIC开始信号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//发送IIC停止信号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Send_Byte</span><span class="params">(u8 txd)</span></span>;<span class="comment">//IIC发送一个字节</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_IIC_Read_Byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> ack)</span></span>;<span class="comment">//IIC读取一个字节</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_IIC_Wait_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//IIC等待ACK信号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//IIC发送ACK信号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_NAck</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//IIC不发送ACK信号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IMPU_IC_Write_One_Byte</span><span class="params">(u8 daddr,u8 addr,u8 data)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">MPU_IIC_Read_One_Byte</span><span class="params">(u8 daddr,u8 addr)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829</span></span><br></pre></td></tr></table></figure><p>mpuiic.c<br><strong>MPU的IIC协议函数编写</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mpuiic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Delay</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC延时函数，延时2ms</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Init</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC初始化</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">  GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);<span class="comment">//先使能外设IO PORTB时钟 </span></span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10|GPIO_Pin_11;  <span class="comment">//端口配置</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   <span class="comment">//推挽输出</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  <span class="comment">//IO口速度为50MHz</span></span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure); <span class="comment">//根据设定参数初始化GPIO </span></span><br><span class="line"></span><br><span class="line">  GPIO_SetBits(GPIOB,GPIO_Pin_10|GPIO_Pin_11);  <span class="comment">//PB10,PB11 输出高</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Start</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC发送起始信号</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MPU_SDA_OUT();     <span class="comment">//SDA线 输出</span></span><br><span class="line">MPU_IIC_SDA=<span class="number">1</span>;    </span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>;</span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line"> MPU_IIC_SDA=<span class="number">0</span>;     <span class="comment">//START:当SCL线处于高电平时,SDA线突然从高变低,发送起始信号</span></span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>; <span class="comment">//钳住I2C总线，准备发送或接收数据 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Stop</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC发送停止信号</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MPU_SDA_OUT(); <span class="comment">//SDA线输出</span></span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">MPU_IIC_SDA=<span class="number">0</span>; <span class="comment">//STOP:当SCL线处于高电平时,SDA线突然从低变高,发送停止信号</span></span><br><span class="line"> MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>; </span><br><span class="line">MPU_IIC_SDA=<span class="number">1</span>; <span class="comment">//发送I2C总线结束信号</span></span><br><span class="line">MPU_IIC_Delay();   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Wait_Ack</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC等待信号到来</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：1:接收应答信号成功  0:接收应答信号失败</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function">u8 <span class="title">MPU_IIC_Wait_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 ucErrTime=<span class="number">0</span>;</span><br><span class="line">MPU_SDA_IN();  <span class="comment">//SDA设置为输入  </span></span><br><span class="line">MPU_IIC_SDA=<span class="number">1</span>;MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>;MPU_IIC_Delay();</span><br><span class="line"><span class="keyword">while</span>(MPU_READ_SDA)</span><br><span class="line">&#123;</span><br><span class="line">ucErrTime++;</span><br><span class="line"><span class="keyword">if</span>(ucErrTime&gt;<span class="number">250</span>)</span><br><span class="line">&#123;</span><br><span class="line">MPU_IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;<span class="comment">//时钟输出0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Ack</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC产生应答信号</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Ack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">MPU_SDA_OUT();</span><br><span class="line">MPU_IIC_SDA=<span class="number">0</span>;</span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>;</span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_NAck</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC不产生应答信号</span></span><br><span class="line"><span class="comment">函数参数：无</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">**********************************************/</span>   </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_NAck</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">MPU_SDA_OUT();</span><br><span class="line">MPU_IIC_SDA=<span class="number">1</span>;</span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>;</span><br><span class="line">MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Send_Byte</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC发送一个字节</span></span><br><span class="line"><span class="comment">函数参数：txd：要发送的数据</span></span><br><span class="line"><span class="comment">函数返回值：无</span></span><br><span class="line"><span class="comment">注意：IIC发送字节是一个一个位发送的，发送一个字节需要发送八次</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MPU_IIC_Send_Byte</span><span class="params">(u8 txd)</span></span></span><br><span class="line"><span class="function"></span>&#123;                        </span><br><span class="line">    u8 t;   </span><br><span class="line">MPU_SDA_OUT();     </span><br><span class="line">    MPU_IIC_SCL=<span class="number">0</span>;<span class="comment">//拉低时钟开始数据传输</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">    &#123;              </span><br><span class="line">        MPU_IIC_SDA=(txd&amp;<span class="number">0x80</span>)&gt;&gt;<span class="number">7</span>;</span><br><span class="line">        txd&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">    MPU_IIC_SCL=<span class="number">1</span>;</span><br><span class="line">    MPU_IIC_Delay(); </span><br><span class="line">    MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">    MPU_IIC_Delay();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">函数名称：MPU_IIC_Read_Byte</span></span><br><span class="line"><span class="comment">函数功能：MPU IIC读取一个字节</span></span><br><span class="line"><span class="comment">函数参数：ack: 1,发送ACK   0,发送NACK </span></span><br><span class="line"><span class="comment">函数返回值：接收到的数据</span></span><br><span class="line"><span class="comment">注意：IIC读取字节是一个一个位读取的，读取一个字节需要读取八次</span></span><br><span class="line"><span class="comment">**********************************************/</span> </span><br><span class="line"><span class="function">u8 <span class="title">MPU_IIC_Read_Byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> ack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i,receive=<span class="number">0</span>;</span><br><span class="line">  MPU_SDA_IN();              <span class="comment">//SDA设置为输入</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">        MPU_IIC_SCL=<span class="number">0</span>;</span><br><span class="line">        MPU_IIC_Delay();</span><br><span class="line">MPU_IIC_SCL=<span class="number">1</span>;</span><br><span class="line">        receive&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(MPU_READ_SDA)receive++;   <span class="comment">//如果读到了数据</span></span><br><span class="line">MPU_IIC_Delay(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!ack)</span><br><span class="line">        MPU_IIC_NAck();   <span class="comment">//发送nACK</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        MPU_IIC_Ack();    <span class="comment">//发送ACK   </span></span><br><span class="line">    <span class="keyword">return</span> receive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177</span></span><br></pre></td></tr></table></figure><p>还有一些函数就不做过多赘述了，上面的代码备注已经做好了，认真吃肯定是会吃透的。多下点功夫肯定可以看懂。</p><h1>6.学习补充</h1><p><strong>补充1：FIFO</strong><br><strong>FIFO</strong>( First Input First Output)简单说就是指先进先出。由于微电子技术的飞速发展，新一代FIFO芯片容量越来越大，体积越来越小，价格越来越便宜。作为一种新型大规模集成电路，FIFO芯片以其灵活、方便、高效的特性，逐渐在高速数据采集、高速数据处理、高速数据传输以及多机处理系统中得到越来越广泛的应用。在系统设计中，以增加数据传输率、处理大量数据流、匹配具有不同传输率的系统为目的而广泛使用FIFO存储器，从而提高了系统性能。FIFO存储器是一个<strong>先入先出的双口缓冲器</strong>，即第一个进入其内的数据第一个被移出，其中一个是存储器的输入口，另一个口是存储器的输出口。对于单片FIFO来说，主要有两种结构：触发导向结构和零导向传输结构。触发导向传输结构的FIFO是由寄存器阵列构成的，零导向传输结构的FIFO是由具有读和写地址指针的双口RAM构成。详见这篇博客：<a href="https://blog.csdn.net/qq_26652069/article/details/90765269">FIFO工作原理</a><br><strong>补充2：关于PA15使用问题</strong><br>在使用PA15作为普通IO口的时候，需要禁用JTAG才可以，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能AFIO时钟</span></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);<span class="comment">//禁止JTAG,从而PA15可以做普通IO使用,否则PA15不能做普通IO!!!</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>这是个大坑</strong><br><strong>补充3：关于MPU6050参考点</strong><br>当代码烧入后，MPU的参考点是什么呢？参考点其实就是MPU6050初始化之后一开始的位置，没有一个强制的规定哪一个方向就是基准点，<strong>初始化之后的初始位置就是(0，0，0)点</strong>。<br><strong>补充4：想到了再写吧</strong></p><h1>7.效果展示(可以先来看这个)</h1><p><img src="https://img-blog.csdnimg.cn/20210527174024629.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpaGFvdGlhbjExMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>PITCH(俯仰角)、ROLL(翻滚角)、YAW(偏航角)，单位均为 度。TEMP为当前温度，单位为摄氏度。</p><h1>8.参考链接</h1><p>[1]<a href="https://baike.baidu.com/item/%E9%99%80%E8%9E%BA%E4%BB%AA/84317?fr=aladdin">百度百科 陀螺仪</a><br>[2]<a href="http://www.openedv.com/docs/index.html">正点原子资料下载中心</a><br>[3]<a href="https://baike.baidu.com/item/FIFO%E5%AD%98%E5%82%A8%E5%99%A8/4530258?fr=aladdin">百度百科 FIFO储存器</a><br>[4]<a href="https://www.jianshu.com/p/1e38ad3d4bfb">姿态角Pitch、Roll、Yaw角介绍</a></p><h1>9.完整版代码链接</h1><p><a href="https://download.csdn.net/download/lihaotian111/19131254?spm=1001.2014.3001.5501">MPU6050模块通过OLED显示姿态角源码</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>弱弱的说一声，我还活着</title>
      <link href="posts/ffe6bb28/"/>
      <url>posts/ffe6bb28/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  最近实在是太忙了，一直没时间写博客，今天终于可以摸一会鱼了（队友不在），写篇博客。 </center><span id="more"></span><h3 id="前言">前言</h3><p>没有更新的这几天我也没闲着，因为打电赛需要建模，机械部分才牢固，所以我就忙中偷闲学了一小下fusion360（截至今天学了两天），先展示一下这两天的成果吧。</p><h3 id="建模成果">建模成果</h3><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/%E4%B9%90%E9%AB%98" alt="乐高" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/%E7%8E%BB%E7%92%83%E7%93%B6" alt="酒瓶子" loading="lazy"></p><p>感觉还不错是吧，有内味了么？但是很明显，这两个模型的曲面很少，面数也少，也没有复杂的结构，所以哦还是要修炼一下的。</p><h3 id="电控">电控</h3><p>另外就是在不停的<strong>画板子，焊板子，画板子，焊板子</strong>。。。。。。</p><p>实验室买的那个焊锡丝，尼玛的，纯锡的（不含铅，含松香）再加上质量不好，要反复加热，这两天闻那个味道哦，妈的，上头。</p><p>就像尼玛的机油炒鸡蛋一样，我实在受不了了，于是去搞了个滤气面具。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/%E9%9D%A2%E5%85%B7" alt="面具" loading="lazy"></p><center>这个面具的基本原理就是活性炭吸附，对付焊锡的烟尘足够了,但是不能防其它的毒气哦！</center><p>下面几个破图就是我画的一部分的pcb</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/1" alt="中控板" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/2" alt="中控板pcb" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/image-20210719105914889.png" alt="一个简单的电源" loading="lazy"></p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/image-20210719110000872.png" alt="电源的pcb预览" loading="lazy"></p><p>板子画了好多，由于现在开不能开源，电赛打完以后再补上。</p><p>画这几个破板子的时候，忘记考虑了好多事情，于是乎，又要重画，再打板，再焊接（习惯就好）</p><p>不说了，stn更新了，爷要去看视频了，拜拜</p><h3 id="补充">补充</h3><p>爷今天又搞了两个模型</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/%E8%9E%BA%E6%AF%8D" alt="无标题" loading="lazy"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/paper%20clip%20v2.png" alt="paper clip v2" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反省</title>
      <link href="posts/3028d2b2/"/>
      <url>posts/3028d2b2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/KkhUIpj7YQaAWMi.jpg" alt="2" loading="lazy"></p><span id="more"></span><p>三分钟热度：浅尝则止<br>自我设限：自知之明<br>犹豫不决：懂得思考<br>拒绝学习：掌握时间分配<br>懒惰：不参与争论<br>整天吹牛不见行动：心怀梦想</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电赛基础_基本电源</title>
      <link href="posts/916b7347/"/>
      <url>posts/916b7347/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="ac-dc-变换">AC-DC 变换</h3><p><img src="https://i.loli.net/2021/05/27/iNlQUoaCSOITpg1.png" alt="2" loading="lazy"></p><h4 id="交流电源滤波器">交流电源滤波器</h4><p><img src="https://i.loli.net/2021/05/27/MUW8QbxAkteKX5n.png" alt="pIYBAFtr_qKAHB3pAADAc29eerg513" loading="lazy"><img src="https://i.loli.net/2021/05/27/Rg4xZbPou7mJNyO.png" alt="3" style="zoom:67%;" / loading="lazy"></p><h4 id="交流电源变换以及整流">交流电源变换以及整流</h4><p><img src="https://i.loli.net/2021/05/27/IQza1YDXqtL4CHo.png" alt="4" loading="lazy"></p><h4 id="稳压电路">稳压电路</h4><p><img src="https://i.loli.net/2021/05/27/XopAZmnJgMd94hP.png" alt="5" loading="lazy"></p><h4 id="三端常用稳压元器件">三端常用稳压元器件</h4><p><img src="https://i.loli.net/2021/05/27/DR45QWUYPLKqitl.png" alt="1" loading="lazy"></p><h4 id="实例：lm317应用电路">实例：LM317应用电路</h4><h4 id="79f0f736afc37931942ae858ebc4b74543a91104"><img src="https://i.loli.net/2021/05/27/1nDRlJCufWPoHhs.jpg" alt="79f0f736afc37931942ae858ebc4b74543a91104" loading="lazy"></h4><p><img src="https://i.loli.net/2021/05/27/waxQrfTV5tZMI7L.jpg" alt="3F0DBE05148D0E157F3238D50F2A0042" loading="lazy"></p><center>最常见的lm317器件长这样</center><img src="https://i.loli.net/2021/05/27/mAjfCn9BrUHqOv7.png" alt="7" style="zoom:50%;" / loading="lazy"><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电赛电工指导问题</title>
      <link href="posts/19479d3b/"/>
      <url>posts/19479d3b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="问题">问题</h3><h4 id="第一章">第一章</h4><ul><li>1．指针式万用表的测量电路有哪几部分?各有什么功能?</li><li>2．指针式万用表表头内阻Rg、等效内阻R’g，各为什么含义?</li><li>3．如何理解“反比分流”?VOM是怎样运用“反比分流“的?</li><li>4．为什么说“万用表的等效内阻愈大、电压测量的精度愈高”；而“万用表的等效内阻愈小，电流测量的误差愈小”?</li><li>5．指针式万用表的表头刻度盘上所标符号“KO／V”是什么意思?</li><li>6．如何理解万用表的“机械调零”与“电气调零”?二者有何不同?</li><li>7．如何辨别数字万用表的“位”数?</li><li><ol start="8"><li>数字万用表测量电路包括哪几部分?各有什么功能?</li></ol></li></ul><h4 id="第二章">第二章</h4><ul><li>1．为什么说380V／220V交流电是正弦波?</li><li>2．我国通用的低压供电的相电压UP、线电压Ul分别是多少伏?它们又是如何得出的?</li><li>3，三相负载星形连接，在什么情况下可无中线供电?</li><li>4．为什么说熔断器只能装在相线上，而不可装在中线上?</li><li>5．为什么要保护接地?保护接零?具体如何实施?</li><li>6．为什么三芯插座中工作零线端不能与保护零线端短接在一起?</li><li>7．低压自动空气开关的开与关是如何工作的?</li></ul><h4 id="第三章">第三章</h4><ul><li>1．在使用电阻器与电容器时，要注意哪些主要的质量参数?为什么?</li><li>2．几只电阻器串联总阻值会增大，而并联后总阻会减小，这是为什么？电阻器串、并联对电路电压与电流各起什么作用?</li><li>3．几只电容器的串联总容量会减小，而并联总容量会增加，这是为什么?</li><li>4．有些小功率的电源电路中，常采用电容器并联一个电阻器的降压电路，试说明电容器<br>与电阻器各起什么作用?</li><li>5．常见电位器的阻值变化规律有哪几种?在运用中应如何选用?</li><li>6.常用的特殊电阻有那些?各有什么特点?</li><li>7．常用的电感线圈有哪些?应注意哪些使用知识?</li><li>8．变压器怎样变换电压、电流、阻抗?</li><li>9．设计一只稳压电源的电源变压器，要求原边电压为220V50Hz，副边为15V/2A、7V/5A。</li></ul><h4 id="第四章">第四章</h4><ul><li>1．二极管正向运用与反向运用的等效电路有何不同?</li><li>2．二极管的电气参数IDM、URM、IRM、fM各有何含义?</li><li>3．整流二极管不适宜用于检波，检波二极管通常不用于整流，这是为什么?</li><li>4．如何用万用表检测二极管的质量?</li><li>5．为什么说普通二极管工作时要远离反向击穿区，稳压二极管却要工作在反向击穿区?</li><li>6．普通发光二极管通常有哪几种驱动方式?</li><li>7．光耦合器有哪几种结构形式?它是怎样耦合信号的?</li><li>8．三极管有哪几种偏置电路？应当如何安置三极管的截止态、放大态及饱和态?</li><li>9．如何识别三极管的共射极电路、共集电极电路、共基极电路这三种电路各有什么突出特点</li><li>10.如何用万用表判别三极管的管脚，估测三极管的穿透电流ICEO及电流放大系数 ？</li><li>11.大功率达林顿管为何要设置“泄放电阻”及“续流二极管”?</li><li>12.怎样用万用表判定场效应管、单向晶闸管、双向晶闸管的电极及其质量的好坏？</li></ul><h4 id="第五章">第五章</h4><ul><li>1．什么叫地线的共阻抗干扰?设计印制板时；应如何消除这种干扰7    ．</li><li>2．所谓电源干扰表现在哪些方面?设计印制板时，应采取哪些方法抑制这种干扰?</li><li>3．设计印制板图的元件排列方式一般有哪几种?各有什么特点?</li><li>4．印制板图的绘制，要注意些什么?</li><li>5．手工制作印制板有哪些步骤?</li></ul><h4 id="第六章">第六章</h4><ul><li>1．电烙铁由哪几部分组成?内热式与外热式有何区别?今有一支25W的电烙铁，其烙铁芯阻值为1936 ，这是怎样算出来的?</li><li>2．为什么新购来的电烙铁在第1次使用时，必须先对烙铁焊头镀锡?又是怎样进行镀锡的y</li><li>3，在焊接中，对元器件的安插、焊接工艺、焊点形状以及拆焊工序，各有什么具体要求?</li><li>4，何谓焊接“1—2—3”步骤？</li><li>5，工业生产中，有哪些主要的焊接方式？各有什么特点?</li></ul><h4 id="第七章">第七章</h4><ul><li>1．半导体集成电路中的二极管有哪几种连接方式?</li><li>2．半导体集成电路的引脚排列主要有哪些形式?如何识别?</li><li>3．半导体集成电路应用中应注意些什么?</li><li>4．555时基电路的内部结构与逻辑关系是怎样的?</li><li>5．试用555时基电路设计一个定时电路，其定时时间可在1—60秒内可调。</li></ul><h4 id="第八章">第八章</h4><ul><li>1.电子电路中，有哪些常用开关?何谓开关的极、位？</li><li>2.交流电磁继电器与直流电磁继电器在结构上有什么异同点?</li><li>3.如何测定电磁继电器的吸合电压、吸合电流、释放电压、释放电流?</li><li>4.电磁继电器使用中常有些什么附加电路?其作用如何?</li><li>5.固态继电器的电气结构包括哪些部分?各自有什么功能?</li></ul><h4 id="第九章">第九章</h4><ul><li>I，动卧式扬声器由哪几部分构成?在应用中要注意哪些主要参数y</li><li>2．怎样用万用表检测扬声器的质量?</li><li>3．动圈式传声器的作用原理及其结构与动圈式扬声器有何异同?</li><li>4．驻极体传声器由哪几部分构成?它在电路中常有哪几种连接方式?</li><li>5．怎样用万用电表测试驻极体传声器?</li><li>6．耳机与耳塞机按其阻抗分各有哪几种？如何用万用电表判别其极性与质量?</li></ul><h4 id="第十一章">第十一章</h4><ul><li>1．传感器一般由哪几部分组成?各部分有何功能?</li><li>2．负温度系数与正温度系数的热敏电阻，其电气特性各有何不同?怎样用万用表检测它们的质量?</li><li>3．压敏电阻为什么有过压保护功能?它有哪些主要参数？如何用万用表判断其质量?</li><li>4．光敏电阻、光敏二极管、光敏三极管有何异同点?怎样用万用表测试其质量y</li><li>5．光耦合器是怎样传输信号的?为什么说光藕合器的抗干扰能力强?</li><li>6．光耦合器是怎样实现“门电路”逻辑功能的?</li><li>7．气敏传感器由哪些部分构成?它的电气特性主要通过什么部件起作用</li><li>8.晶振的压电效应是怎样形成的?它有哪些重要特性?</li><li>9.晶振与陶瓷谐振元件各有哪些常见器件?</li><li>10.声表面波滤波器是怎样传递信号的?，</li><li>11．肖特基二极管的伏安特性与普通晶体二极管的伏安特性有什么不同?它有什么特殊<br>用途?</li></ul><h4 id="第十二章">第十二章</h4><ul><li>1．LED数码管是怎样组成的?所谓“共阳极”、“共阴极”管工作特点有何不同?</li><li>2．液晶显示器是怎样显示数码的?</li><li>3．LED数码显示电路与LCD数码显示电路各有哪几种驱动方法?它们是怎样工作的?</li><li>4．LCL103显示电路由哪几部分组成?各起什么作用?它们是怎样工作的?</li></ul><h4 id="第十三章">第十三章</h4><ul><li>1．AC／DC电路一般由哪几部分组成?各起什么作用？</li><li>2．常见的三端式稳压电路有哪些?图13.9与13.10的典型应用电路中，其输入端与输出端</li><li>为什么要在大容量电容器旁并联一个小容量的电容器?</li><li>3．降压式DC／DC变换器是怎样工作的？</li><li>4．升压式DC/DC变挟器是怎样工作的y在图13．12典型应用电路中，二极管D为什么要选用肖特基二极管？</li><li>5．电压反转式电路由哪些部分构成。它是如何实现电压反转的?</li><li>6．开关电源有哪几种类型?高频变压器式开关电源是如何实现稳压的?</li><li>7．小型密封铝蓄电池由哪几部分构成?它有哪些重要参数?如何保持蓄电池的容量?</li></ul><h4 id="第十四章">第十四章</h4><ul><li>1．直流稳压电源由哪几部分组成?各有什么功能?</li><li>2．为什么交流毫伏表会出现所谓“打表针”现象?</li><li>3．为什么示波器的y轴衰减器及探头中的衰减器要采用阻容分压而不是纯阻分压?</li><li>4．何谓示波器的扫描“同步”?为什么要同步?</li><li>5．双踪示波器的“交替”和“断续”工作方式是何含义?为什么说，在观测低频信号时宜用断续”方式，而在观测高频信号时宜用“交替”方式?</li><li>6．信号发生器的结构主要包括哪几部分?函数信号发生器在结构上有何特点?</li><li>7．电子计数器测频，测周的原理有何异同点？</li><li>8．何谓计数器的±1误差?为了提高测频、测周的准确度，应如何减小土1误差?</li></ul><h3 id="部分解答">部分解答</h3><ul><li><p>1.1</p><p>A、测直流电流原理</p><p>如图A所示，在表头上并联一个适当的电阻（叫分流电阻）进行分流，就可以扩展电流量程。改变分流电阻的阻值，就能改变电流测量范围。</p><p>B、测直流电压原理</p><p>如图B所示，在表头上串联一个适当的电阻（叫倍增电阻）进行降压，就可以扩展电压量程。改变倍增电阻的阻值，就能改变电压的测量范围。</p><p>C、测交流电压原理</p><p>如图C所示，因为表头是直流表，所以测量交流时，需加装一个并、串式半波整流电路，将交流进行整流变成直流后再通过表头，这样就可以根据直流电的大小来测量交流电压。扩展交流电压量程的方法与直流电压量程相似。</p><p>D、测电阻原理</p><p>如图D所示，在表头上并联和串联适当的电阻，同时串接一节电池，使电流通过被测电阻，根据电流的大小，就可测量出电阻值。改变分流电阻的阻值，就能改变电阻的量程。</p><p><img src="https://i.loli.net/2021/05/22/3xTZEvNbhs24Rfp.png" alt="o4YBAFphshSAfN6zAADr4-7kO-4153" loading="lazy"></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 电赛 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小爷我做了个新片头</title>
      <link href="posts/8c87571/"/>
      <url>posts/8c87571/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc" src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/%E8%A7%86%E9%A2%91/Eye_Opener_Logo_x264.mp4" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在openmv中画图</title>
      <link href="posts/c030c78a/"/>
      <url>posts/c030c78a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h4 id="画线">画线</h4><ul><li>image.draw_line(line_tuple, color=White) 在图像中画一条直线。<ul><li>line_tuple的格式是(x0, y0, x1, y1)，意思是(x0, y0)到(x1, y1)的直线。</li><li>颜色可以是灰度值(0-255)，或者是彩色值(r, g, b)的tupple。默认是白色</li></ul></li></ul><h4 id="画框">画框</h4><ul><li>image.draw_rectangle(rect_tuple, color=White) 在图像中画一个矩形框。<ul><li>rect_tuple 的格式是 (x, y, w, h)。</li></ul></li></ul><h4 id="画圆">画圆</h4><ul><li>image.draw_circle(x, y, radius, color=White) 在图像中画一个圆。<ul><li>x,y是圆心坐标</li><li>radius是圆的半径</li></ul></li></ul><h4 id="画十字">画十字</h4><ul><li>image.draw_cross(x, y, size=5, color=White) 在图像中画一个十字<ul><li>x,y是坐标</li><li>size是两侧的尺寸</li></ul></li></ul><h4 id="写字">写字</h4><ul><li>image.draw_string(x, y, text, color=White) 在图像中写字 8x10的像素<ul><li>x,y是坐标。使用\n, \r, and \r\n会使光标移动到下一行。</li><li>text是要写的字符串。</li></ul></li></ul><h4 id="圆十字瞄准镜例程-qvga类型摄像头">圆十字瞄准镜例程（qvga类型摄像头）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset() <span class="comment"># 初始化摄像头</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># 格式为 RGB565.</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)</span><br><span class="line">sensor.skip_frames(<span class="number">10</span>) <span class="comment"># 跳过10帧，使新设置生效</span></span><br><span class="line">sensor.set_hmirror(<span class="literal">True</span>)</span><br><span class="line">sensor.set_vflip(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    img.draw_line((<span class="number">155</span>, <span class="number">115</span>, <span class="number">160</span>, <span class="number">120</span>),color=(<span class="number">155</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    img.draw_line((<span class="number">160</span>, <span class="number">120</span>, <span class="number">165</span>, <span class="number">115</span>), color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.draw_rectangle((<span class="number">145</span>, <span class="number">105</span>, <span class="number">30</span>, <span class="number">30</span>), color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.draw_circle(<span class="number">160</span>, <span class="number">120</span>, <span class="number">15</span>)</span><br><span class="line">    img.draw_cross(<span class="number">160</span>,<span class="number">120</span>,size=<span class="number">15</span>)</span><br><span class="line">    img.draw_string(<span class="number">140</span>,<span class="number">135</span>, <span class="string">&quot;Target&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果（我学习用的摄像头垃圾，见谅）</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210611112253.png" alt="1" loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入感光元件的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()                      <span class="comment"># 初始化元器件</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565) <span class="comment"># 设置为彩色</span></span><br><span class="line"><span class="comment">#设置翻转</span></span><br><span class="line"><span class="comment">#水平方向翻转</span></span><br><span class="line">sensor.set_hmirror(<span class="literal">True</span>)</span><br><span class="line">sensor.set_vflip(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#垂直方向翻转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图像大小</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># #跳过n张照片，在更改设置后，跳过一些帧，等待感光元件变稳定。</span></span><br><span class="line">clock = time.clock()                <span class="comment"># Create a clock object to track the FPS.</span></span><br><span class="line"></span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>) <span class="comment">#自动增益开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动增益。</span></span><br><span class="line"></span><br><span class="line">sensor.set_auto_whitebal(<span class="literal">False</span>) <span class="comment">#自动白平衡开启（True）或者关闭（False）。在使用颜色追踪时，需要关闭自动白平衡。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    img.draw_line((<span class="number">145</span>, <span class="number">105</span>, <span class="number">160</span>, <span class="number">120</span>))</span><br><span class="line">    img.draw_line((<span class="number">175</span>, <span class="number">105</span>, <span class="number">160</span>, <span class="number">120</span>), color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.draw_rectangle((<span class="number">145</span>, <span class="number">105</span>, <span class="number">30</span>, <span class="number">30</span>), color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.draw_circle(<span class="number">160</span>, <span class="number">120</span>, <span class="number">15</span>)</span><br><span class="line">    img.draw_cross(<span class="number">160</span>,<span class="number">120</span>,size=<span class="number">15</span>)</span><br><span class="line">    img.draw_string(<span class="number">140</span>,<span class="number">140</span>, <span class="string">&quot;Target！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有这种的，需要其他样式的话，根据代码和注释魔改即可。</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210611112310.png" alt="2" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> openmv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openmv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maths</title>
      <link href="posts/d20bfa26/"/>
      <url>posts/d20bfa26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  记录一下一些数学公式以及md写法的表达 </center><span id="more"></span><h4 id="老经典的希腊字母：">老经典的希腊字母：</h4><table><thead><tr><th style="text-align:center">显示</th><th style="text-align:center">命令</th><th style="text-align:center">显示</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:center">α</td><td style="text-align:center">\alpha</td><td style="text-align:center">β</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">γ</td><td style="text-align:center">\gamma</td><td style="text-align:center">δ</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">ε</td><td style="text-align:center">\epsilon</td><td style="text-align:center">ζ</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">η</td><td style="text-align:center">\eta</td><td style="text-align:center">θ</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">ι</td><td style="text-align:center">\iota</td><td style="text-align:center">κ</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">λ</td><td style="text-align:center">\lambda</td><td style="text-align:center">μ</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">ν</td><td style="text-align:center">\nu</td><td style="text-align:center">ξ</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">π</td><td style="text-align:center">\pi</td><td style="text-align:center">ρ</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">σ</td><td style="text-align:center">\sigma</td><td style="text-align:center">τ</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">υ</td><td style="text-align:center">\upsilon</td><td style="text-align:center">φ</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center">χ</td><td style="text-align:center">\chi</td><td style="text-align:center">ψ</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">ω</td><td style="text-align:center">\omega</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h4 id="上标和下标">上标和下标</h4><ul><li>上标：<code>^</code></li><li>下标：<code>_</code></li></ul><p>例如C_n^2   显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">C_n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></p><h4 id="矢量">矢量</h4><p>\vec表示为矢量 \vec a 显示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></p><p>多个字母矢量用\overrightarrow例如：\overrightarrow{xy} 显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mi>y</mi></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.147em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></p><h4 id="分类分组">分类分组</h4><p>例如10^{10+x} 显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mn>10</mn><mo>+</mo><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">10^{10+x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="计算符号">计算符号</h4><p>求和 \sum_x^6{a^i}  显示为：$\sum_x^6{a^i} $</p><p>极限 \lim_{x\to 0}   显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\lim_{x\to 0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>无穷 \infty  显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></p><p>积分\int  显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo></mrow><annotation encoding="application/x-tex">\int</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span></span></span></span></p><p>分式 ：\frac{分式1} {分式2} 显示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mtext>分式</mtext><mn>1</mn></mrow><mrow><mtext>分式</mtext><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{分式1} {分式2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">分</span><span class="mord cjk_fallback mtight">式</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">分</span><span class="mord cjk_fallback mtight">式</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>根式： \sqrt [x] {y} 显示为：$  \sqrt [x] {y}$</p><h4 id="其他符号">其他符号</h4><p><img src="https://i.loli.net/2021/05/20/VBERxCQogkrAmea.png" alt="" loading="lazy"></p><h4 id="矩阵">矩阵</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$$</span>\<span class="keyword">begin</span>&#123;matrix&#125;</span><br><span class="line"><span class="number">1</span>&amp;<span class="number">0</span>&amp;<span class="number">0</span>\\</span><br><span class="line"><span class="number">0</span>&amp;<span class="number">1</span>&amp;<span class="number">0</span>\\</span><br><span class="line"><span class="number">0</span>&amp;<span class="number">0</span>&amp;<span class="number">1</span>\\</span><br><span class="line">\<span class="keyword">end</span>&#123;matrix&#125;<span class="variable">$$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$$</span>\<span class="keyword">begin</span>&#123;bmatrix&#125;</span><br><span class="line">&#123;a_&#123;<span class="number">11</span>&#125;&#125;&amp;&#123;a_&#123;<span class="number">12</span>&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125;\\</span><br><span class="line">&#123;a_&#123;<span class="number">21</span>&#125;&#125;&amp;&#123;a_&#123;<span class="number">22</span>&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125;\\</span><br><span class="line">&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\ddots&#125;&amp;&#123;\vdots&#125;\\</span><br><span class="line">&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125;\\</span><br><span class="line">\<span class="keyword">end</span>&#123;bmatrix&#125;<span class="variable">$$</span></span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>m</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\\{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\\{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\\{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953995em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.4999850000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0959850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6919850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.712975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.953995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.64em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="minner">⋯</span></span></span></span><span style="top:-4.44em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="minner">⋯</span></span></span></span><span style="top:-2.5799999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="minner">⋱</span></span></span></span><span style="top:-1.3800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="minner">⋯</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.953995em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.4999850000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0959850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6919850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.712975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.953995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;array&#125;&#123;c<span class="operator">|</span>lll&#125;</span><br><span class="line">&#123;<span class="operator">↓</span>&#125;<span class="operator">&amp;</span>&#123;a&#125;<span class="operator">&amp;</span>&#123;b&#125;<span class="operator">&amp;</span>&#123;c&#125;\\</span><br><span class="line">\hline</span><br><span class="line">&#123;<span class="type">R_1</span>&#125;<span class="operator">&amp;</span>&#123;c&#125;<span class="operator">&amp;</span>&#123;b&#125;<span class="operator">&amp;</span>&#123;a&#125;\\</span><br><span class="line">&#123;<span class="type">R_2</span>&#125;<span class="operator">&amp;</span>&#123;b&#125;<span class="operator">&amp;</span>&#123;c&#125;<span class="operator">&amp;</span>&#123;c&#125;\\</span><br><span class="line">\end&#123;array&#125;$$</span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center left left left" columnlines="solid none none" columnspacing="1em" rowlines="solid none"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">↓</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>R</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c|lll}{↓}&amp;{a}&amp;{b}&amp;{c}\\\hline{R_1}&amp;{c}&amp;{b}&amp;{a}\\{R_2}&amp;{b}&amp;{c}&amp;{c}\\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:4.05em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">↓</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:3.6em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-1.5500000000000003em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-4.8999999999999995em;"><span class="pstrut" style="height:4.05em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span></span></span></p><h4 id="方程">方程</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;cases&#125;</span><br><span class="line">a_1x+b_1y+c_1z=d_1\\</span><br><span class="line">a_2x+b_2y+c_2z=d_2\\</span><br><span class="line">a_3x+b_3y+c_3z=d_3\\</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>3</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>3</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在孤独中茧变</title>
      <link href="posts/f36c2e7e/"/>
      <url>posts/f36c2e7e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>人这一生，不论爱情如何美妙、世界如何精彩，孤独都是必须去面对和承担的永恒宿命，没有任何人任何事能够将它改变。毕竟，深究这个神奇的世界，本就是孤独的。在诞生宇宙之前一切都是孤独的，因为时间与空间没有意义，更没有生命，没有花鸟鱼虫，有的只有一片死沉沉的孤寂。终于有一天，宇宙受不了了，它爆发了，爆发的歇斯底里，以致于空间开始无限膨胀。但是，这也只是片刻的喧闹，它终究会冷静下来，再次陷入那死沉沉的孤寂，这一切都是注定的，这就是它的命运。世界如此，身为它的一部分，人更是如此。从一出生就注定了其必将湮灭，陪伴着宇宙母亲，一起陷入无穷尽的孤寂中，这谁也无法改变。</p><span id="more"></span><p>所以，朋友，孤独是你的终点，也是你的起点，这世界的一切都是始于孤独终于孤独。学会与它共处，而不是学着与它对抗。试想一下，这位自始至终陪伴我们的，一直陪伴在你身边的孤独，是朋友？还是敌人呢？其实，它更像一位旁观者，它制定了这一切的规则，而它不需要做什么，也不必做什么，只需在旁边欣赏自己的作品。朋友，这都是规则下的产物，没有人可以打破这个终极孤独的局面。我们能做的只有接受它。</p><p>生命，是个奇迹。对于这个世界来讲，生命就像被点燃了的绚丽烟花，窜上云霄，在片刻间火花绽放，又在片刻间冷寂。有人会思考，这一切有什么意义？朋友，对于时间来讲，人生，本就没有意义，一切都将成为过往的云烟。所谓的意义，就是人在不断的寻找意义，就是这个过程。人的一生就是在不断探寻意义的过程，不断认识自己的过程。但是朋友，人终将还是自己的陌生人。人们常踟蹰多年，仍然不知道，他们需要的只是一双可以依靠的臂膀，而并不是一个能读懂自己沉默的人。人总是像智者一样劝慰别人，像傻子一样折磨自己，但最终，还是不得不承认，自己仍然是自己的陌生人。</p><p>对生命而言，接纳才是最好的温柔，不论是接纳一个人的出现，还是，接纳一个人的从此不见。如果有一天你能接纳自己所有的曾经，那么你就找到了一条通往幸福的捷径。接纳别人往往不难，人最难的是接纳自己。人们往往将热枕抛向他人，却始终无法接纳自己。那些过往，那些时光，成为了一份沉重的包袱，始终压在了心头。世上的大部分人都背着太多的“放不下”，可是那些“放不下”会让你的步伐变慢，人生本是一场看不完的风景。陌生人啊，何不轻装上路，成就一个更丰富的自己。</p><p>孤独很强大，人也很强大。孤独制定了规则，而我们制造了bug。人，会成长、会变成熟、会变世故、会变老。但是，心，不会变。即使孤独伴随着时间将你的内心刻满痕迹，它也无法改变你的心。人心不变，一切皆可期。哪怕过着最苦难的生活，也不要忘了你的心，那里留存着这个世界上最宝贵的礼物——梦想！要知道，倔强是时光在心上留下的茧，厚厚的孤独，让你变得更坚强！</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用泰勒级数展开</title>
      <link href="posts/dbe2b6d3/"/>
      <url>posts/dbe2b6d3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><div class="row">    <embed src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/10%E4%B8%AA%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B3%B0%E5%8B%92%E7%BA%A7%E6%95%B0%E5%B1%95%E5%BC%80%E5%85%AC%E5%BC%8Fcommontaylorseries.pdf" width="100%" height="550" type="application/pdf"></div><span id="more"></span> <link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柯西积分公式</title>
      <link href="posts/29abfbc/"/>
      <url>posts/29abfbc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc"         src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1uA411j7jA?from=search&seid=8534947394227717108" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 复变函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ad常用元器件等</title>
      <link href="posts/ed712c4d/"/>
      <url>posts/ed712c4d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  我从网络上找到了一些常用的元器件的名称，在此分享给大家 </center><span id="more"></span><p>原理图常用库文件：<br>Miscellaneous Devices.ddb<br>Dallas Microprocessor .ddb<br>Intel Databooks.ddb<br>Protel DOS Schematic Libraries.ddb<br>PCB 元件常用库：<br>Advpcb.ddb<br>General IC.ddb<br>Miscellaneous.ddb<br>部分 分立元件库元件名称及中英对照<br>AND 与门<br>ANTENNA 天线<br>BATTERY 直流电源<br>BELL 铃,钟<br>BVC 同轴电缆接插件<br>BRIDEG 1 整流桥 (二极管 )<br>BRIDEG 2 整流桥 (集成块 )<br>BUFFER 缓冲器<br>BUZZER 蜂鸣器<br>CAP 电容<br>CAPACITOR 电容<br>CAPACITOR POL 有极性电容<br>CAPVAR 可调电容<br>CIRCUIT BREAKER 熔断丝<br>COAX 同轴电缆<br>CON 插口<br>CRYSTAL 晶体整荡器<br>DB 并行插口<br>DIODE 二极管<br>DIODE SCHOTTKY 稳压二极管<br>DIODE VARACTOR 变容二极管<br>DPY_3-SEG 3 段 LED<br>DPY_7-SEG 7 段 LED<br>DPY_7-SEG_DP 7 段 LED(带小数点 )<br>ELECTRO 电解电容<br>FUSE 熔断器<br>INDUCTOR 电感<br>INDUCTOR IRON 带铁芯电感<br>INDUCTOR3 可调电感<br>JFET N N 沟道场效应管<br>JFET P P 沟道场效应管<br>LAMP 灯泡<br>LAMP NEDN 起辉器<br>LED 发光二极管<br>METER 仪表<br>MICROPHONE 麦克风<br>MOSFET MOS 管<br>MOTOR AC 交流电机<br>MOTOR SERVO 伺服电机<br>NAND 与非门<br>NOR 或非门<br>NOT 非门<br>NPN NPN 三极管<br>NPN-PHOTO 感光三极管<br>OPAMP 运放<br>OR 或门<br>PHOTO 感光二极管<br>PNP 三极管<br>NPN DAR NPN 三极管<br>PNP DAR PNP 三极管<br>POT 滑线变阻器<br>PELAY-DPDT 双刀双掷继电器<br>RES1.2 电阻<br>RES3.4 可变电阻<br>RESISTOR BRIDGE ? 桥式电阻<br>RESPACK ? 电阻<br>SCR 晶闸管<br>PLUG ? 插头<br>PLUG AC FEMALE 三相交流插头<br>SOCKET ? 插座<br>SOURCE CURRENT 电流源<br>SOURCE VOLTAGE 电压源<br>SPEAKER 扬声器<br>SW ? 开关<br>SW-DPDY ? 双刀双掷开关<br>SW-SPST ? 单刀单掷开关<br>SW-PB 按钮<br>THERMISTOR 电热调节器<br>TRANS1 变压器<br>TRANS2 可调变压器<br>TRIAC ? 三端双向可控硅<br>TRIODE ? 三极真空管<br>VARISTOR 变阻器<br>ZENER ? 齐纳二极管<br>DPY_7-SEG_DP 数码管<br>SW-PB 开关<br>74系列：<br>74LS00 TTL 2 输入端四与非门<br>74LS01 TTL 集电极开路 2输入端四与非门<br>74LS02 TTL 2 输入端四或非门<br>74LS03 TTL 集电极开路 2输入端四与非门<br>74LS122 TTL 可再触发单稳态多谐振荡器<br>74LS123 TTL 双可再触发单稳态多谐振荡器<br>74LS125 TTL 三态输出高有效四总线缓冲门<br>74LS126 TTL 三态输出低有效四总线缓冲门<br>74LS13 TTL 4 输入端双与非施密特触发器<br>74LS132 TTL 2 输入端四与非施密特触发器<br>74LS133 TTL 13 输入端与非门<br>74LS136 TTL 四异或门<br>74LS138 TTL 3-8 线译码器 / 复工器<br>74LS139 TTL 双 2-4线译码器 /复工器<br>74LS14 TTL 六反相施密特触发器<br>74LS145 TTL BCD — 十进制译码 / 驱动器<br>74LS15 TTL 开路输出 3输入端三与门<br>74LS150 TTL 16 选 1数据选择 /多路开关<br>74LS151 TTL 8 选1数据选择器<br>74LS153 TTL 双 4选1数据选择器<br>74LS154 TTL 4 线—16线译码器<br>74LS155 TTL 图腾柱输出译码器 /分配器<br>74LS156 TTL 开路输出译码器 / 分配器<br>74LS157 TTL 同相输出四 2选1数据选择器<br>74LS158 TTL 反相输出四 2选1数据选择器<br>74LS16 TTL 开路输出六反相缓冲 / 驱动器<br>74LS160 TTL 可预置 BCD 异步清除计数器<br>74LS161 TTL 可予制四位二进制异步清除计数器<br>74LS162 TTL 可预置 BCD 同步清除计数器<br>74LS163 TTL 可予制四位二进制同步清除计数器<br>74LS164 TTL 八位串行入 / 并行输出移位寄存器<br>74LS165 TTL 八位并行入 / 串行输出移位寄存器<br>74LS166 TTL 八位并入 / 串出移位寄存器<br>74LS169 TTL 二进制四位加 / 减同步计数器<br>74LS17 TTL 开路输出六同相缓冲 / 驱动器<br>74LS170 TTL 开路输出 4×4寄存器堆<br>74LS173 TTL 三态输出四位 D 型寄存器<br>74LS174 TTL 带公共时钟和复位六 D 触发器<br>74LS175 TTL 带公共时钟和复位四 D 触发器<br>74LS180 TTL 9 位奇数 / 偶数发生器 / 校验器<br>74LS181 TTL 算术逻辑单元 / 函数发生器<br>74LS185 TTL 二进制 —BCD 代码转换器<br>74LS190 TTL BCD 同步加 / 减计数器<br>74LS191 TTL 二进制同步可逆计数器<br>74LS192 TTL 可预置 BCD 双时钟可逆计数器<br>74LS193 TTL 可预置四位二进制双时钟可逆计数器<br>74LS194 TTL 四位双向通用移位寄存器<br>74LS195 TTL 四位并行通道移位寄存器<br>74LS196 TTL 十进制 /二-十进制可预置计数锁存器<br>74LS197 TTL 二进制可预置锁存器 /计数器<br>74LS20 TTL 4 输入端双与非门<br>74LS21 TTL 4 输入端双与门<br>74LS22 TTL 开路输出 4输入端双与非门<br>74LS221 TTL 双 /单稳态多谐振荡器<br>74LS240 TTL 八反相三态缓冲器 /线驱动器<br>74LS241 TTL 八同相三态缓冲器 /线驱动器<br>74LS243 TTL 四同相三态总线收发器<br>74LS244 TTL 八同相三态缓冲器 /线驱动器<br>74LS245 TTL 八同相三态总线收发器<br>74LS247 TTL BCD — 7段15V 输出译码 / 驱动器<br>74LS248 TTL BCD — 7段译码 /升压输出驱动器<br>74LS249 TTL BCD — 7段译码 /开路输出驱动器<br>74LS251 TTL 三态输出 8选1数据选择器 / 复工器<br>74LS253 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS256 TTL 双四位可寻址锁存器<br>74LS257 TTL 三态原码四 2选1数据选择器 / 复工器<br>74LS258 TTL 三态反码四 2选1数据选择器 / 复工器<br>74LS259 TTL 八位可寻址锁存器 /3-8 线译码器<br>74LS26 TTL 2 输入端高压接口四与非门<br>74LS260 TTL 5 输入端双或非门<br>74LS266 TTL 2 输入端四异或非门<br>74LS27 TTL 3 输入端三或非门<br>74LS273 TTL 带公共时钟复位八 D 触发器<br>74LS279 TTL 四图腾柱输出 S-R 锁存器<br>74LS28 TTL 2 输入端四或非门缓冲器<br>74LS283 TTL 4 位二进制全加器<br>74LS290 TTL 二 /五分频十进制计数器<br>74LS293 TTL 二 /八分频四位二进制计数器<br>74LS295 TTL 四位双向通用移位寄存器<br>74LS298 TTL 四 2输入多路带存贮开关<br>74LS299 TTL 三态输出八位通用移位寄存器<br>74LS30 TTL 8 输入端与非门<br>74LS32 TTL 2 输入端四或门<br>74LS322 TTL 带符号扩展端八位移位寄存器<br>74LS323 TTL 三态输出八位双向移位 /存贮寄存器<br>74LS33 TTL 开路输出 2输入端四或非缓冲器<br>74LS347 TTL BCD — 7段译码器 / 驱动器<br>74LS352 TTL 双 4选1数据选择器 /复工器<br>74LS353 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS366 TTL 门使能输入三态输出六反相线驱动器<br>74LS367 TTL 4/2 线使能输入三态六同相线驱动器<br>74LS368 TTL 4/2 线使能输入三态六反相线驱动器<br>74LS37 TTL 开路输出 2输入端四与非缓冲器<br>74LS373 TTL 三态同相八 D 锁存器<br>74LS374 TTL 三态反相八 D 锁存器<br>74LS375 TTL 4 位双稳态锁存器<br>74LS377 TTL 单边输出公共使能八 D 锁存器<br>74LS378 TTL 单边输出公共使能六 D 锁存器<br>74LS379 TTL 双边输出公共使能四 D 锁存器<br>74LS38 TTL 开路输出 2输入端四与非缓冲器<br>74LS380 TTL 多功能八进制寄存器<br>74LS39 TTL 开路输出 2输入端四与非缓冲器<br>74LS390 TTL 双十进制计数器<br>74LS393 TTL 双四位二进制计数器<br>74LS40 TTL 4 输入端双与非缓冲器<br>74LS42 TTL BCD —十进制代码转换器<br>74LS352 TTL 双 4选1数据选择器 /复工器<br>74LS353 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS366 TTL 门使能输入三态输出六反相线驱动器<br>74LS367 TTL 4/2 线使能输入三态六同相线驱动器<br>74LS368 TTL 4/2 线使能输入三态六反相线驱动器<br>74LS37 TTL 开路输出 2输入端四与非缓冲器<br>74LS373 TTL 三态同相八 D 锁存器<br>74LS374 TTL 三态反相八 D 锁存器<br>74LS375 TTL 4 位双稳态锁存器<br>74LS377 TTL 单边输出公共使能八 D 锁存器<br>74LS378 TTL 单边输出公共使能六 D 锁存器<br>74LS379 TTL 双边输出公共使能四 D 锁存器<br>74LS38 TTL 开路输出 2输入端四与非缓冲器<br>74LS380 TTL 多功能八进制寄存器<br>74LS39 TTL 开路输出 2输入端四与非缓冲器<br>74LS390 TTL 双十进制计数器<br>74LS393 TTL 双四位二进制计数器<br>74LS40 TTL 4 输入端双与非缓冲器<br>74LS42 TTL BCD —十进制代码转换器<br>74LS447 TTL BCD — 7段译码器 / 驱动器<br>74LS45 TTL BCD —十进制代码转换 /驱动器<br>74LS450 TTL 16:1 多路转接复用器多工器<br>74LS451 TTL 双 8:1 多路转接复用器多工器<br>74LS453 TTL 四 4:1 多路转接复用器多工器<br>74LS46 TTL BCD —7段低有效译码 / 驱动器<br>74LS460 TTL 十位比较器<br>74LS461 TTL 八进制计数器<br>74LS465 TTL 三态同相 2与使能端八总线缓冲器<br>74LS466 TTL 三态反相 2与使能八总线缓冲器<br>74LS467 TTL 三态同相 2使能端八总线缓冲器<br>74LS468 TTL 三态反相 2使能端八总线缓冲器<br>74LS469 TTL 八位双向计数器<br>74LS47 TTL BCD —7段高有效译码 / 驱动器<br>74LS48 TTL BCD —7段译码器 / 内部上拉输出驱动<br>74LS490 TTL 双十进制计数器<br>74LS491 TTL 十位计数器<br>74LS498 TTL 八进制移位寄存器<br>74LS50 TTL 2-3/2-2 输入端双与或非门<br>74LS502 TTL 八位逐次逼近寄存器<br>74LS503 TTL 八位逐次逼近寄存器<br>74LS51 TTL 2-3/2-2 输入端双与或非门<br>74LS533 TTL 三态反相八 D 锁存器<br>74LS534 TTL 三态反相八 D 锁存器<br>74LS54 TTL 四路输入与或非门<br>74LS540 TTL 八位三态反相输出总线缓冲器<br>74LS55 TTL 4 输入端二路输入与或非门<br>74LS563 TTL 八位三态反相输出触发器<br>74LS564 TTL 八位三态反相输出 D 触发器<br>74LS573 TTL 八位三态输出触发器<br>74LS574 TTL 八位三态输出 D 触发器<br>74LS645 TTL 三态输出八同相总线传送接收器<br>74LS670 TTL 三态输出 4×4寄存器堆<br>74LS73 TTL 带清除负触发双 J-K 触发器<br>74LS74 TTL 带置位复位正触发双 D 触发器<br>74LS76 TTL 带预置清除双 J-K 触发器<br>74LS83 TTL 四位二进制快速进位全加器<br>74LS85 TTL 四位数字比较器<br>74LS86 TTL 2 输入端四异或门<br>74LS90 TTL 可二 / 五分频十进制计数器<br>74LS93 TTL 可二 / 八分频二进制计数器<br>74LS95 TTL 四位并行输入 输出移位寄存器<br>74LS97 TTL 6 位同步二进制乘法器<br>CD 系列： ：<br>CD4000 双3输入端或非门 +单非门 TI<br>CD4001 四2输入端或非门 HIT/NSC/TI/GOL<br>CD4002 双4输入端或非门 NSC<br>CD4006 18 位串入 / 串出移位寄存器              | NSC        |<br>CD4007 双互补对加反相器                        | NSC        |<br>CD4008 4 位超前进位全加器                      | NSC        |<br>CD4009 六反相缓冲 /变换器                      | NSC        |<br>CD4010 六同相缓冲 /变换器                      | NSC        |<br>CD4011 四2输入端与非门  CD4012 双4输入端与非门 | HIT/TI NSC |<br>CD4013 双主 -从 D 型触发器 FSC/NSC/TOS<br>CD4014 8 位串入 /并入 -串出移位寄存器 NSC<br>CD4015 双4位串入 / 并出移位寄存器 TI<br>CD4016 四传输门 FSC/TI<br>CD4017 十进制计数 /分配器 FSC/TI/MOT<br>CD4018 可预制 1/N 计数器 NSC/MOT<br>CD4019 四与或选择器 PHI<br>CD4020 14 级串行二进制计数 /分频器 FSC<br>CD4021 08 位串入 / 并入 -串出移位寄存器  CD4022 八进制计数 /分配器 NSC/MOT | PHI/NSC    |<br>CD4023 三3输入端与非门                                       | NSC/MOT/TI |<br>CD4024 7 级二进制串行计数 / 分频器 NSC/MOT/TI<br>CD4025 三3输入端或非门                                       | NSC/MOT/TI |<br>CD4026 十进制计数 /7 段译码器 NSC/MOT/TI<br>CD4027 双 J-K 触发器 NSC/MOT/TI<br>CD4028 BCD 码十进制译码器                                    | NSC/MOT/TI |<br>CD4029 可预置可逆计数器                                      | NSC/MOT/TI |<br>CD4030 四异或门 NSC/MOT/TI/GOL<br>CD4031 64 位串入 / 串出移位存储器  CD4032 三串行加法器 NSC/TI | NSC/MOT/TI |<br>CD4033 十进制计数 /7 段译码器 NSC/TI<br>CD4034 8 位通用总线寄存器                                    | NSC/MOT/TI |<br>CD4035 4 位并入 /串入 -并出 / 串出移位寄存 NSC/MOT/TI<br>CD4038 三串行加法器 NSC/TI<br>CD4040 12 级二进制串行计数 /分频器 NSC/MOT/TI<br>CD4041 四同相 / 反相缓冲器 NSC/MOT/TI<br>CD4042 四锁存 D 型触发器 NSC/MOT/TI<br>CD4043 4 三态 R-S 锁存触发器 (“1” 触发 ) NSC/MOT/TI<br>CD4044 四三态 R-S 锁存触发器 (“0” 触发 ) NSC/MOT/TI<br>CD4046 锁相环 NSC/MOT/TI/PHI<br>CD4047 无稳态 / 单稳态多谐振荡器  CD4048 4 输入端可扩展多功能门 | NSC/MOT/TI NSC/HIT/TI |<br>CD4049 六反相缓冲 /变换器 NSC/HIT/TI CD4050 六同相缓冲 /变换器 NSC/MOT/TI<br>CD4051 八选一模拟开关                                             NSC/MOT/TI<br>CD4052 双4选1模拟开关 NSC/MOT/TI<br>CD4053 三组二路模拟开关                                       NSC/MOT/TI<br>CD4054 液晶显示驱动器                                           NSC/HIT/TI<br>CD4055 BCD-7 段译码 / 液晶驱动器 NSC/HIT/TI<br>CD4056 液晶显示驱动器                                        | NSC/HIT/TI |<br>CD4059 “N”分频计数器 NSC/TI CD4060 14 级二进制串行计数 /分频器 NSC/TI/MOT |<br>CD4063 四位数字比较器                                        | NSC/HIT/TI |<br>CD4066 四传输门 NSC/TI/MOT<br>CD4067 16 选1模拟开关 NSC/TI<br>CD4068 八输入端与非门 /与门 NSC/HIT/TI<br>CD4069 六反相器 NSC/HIT/TI<br>CD4070 四异或门 NSC/HIT/TI<br>CD4071 四2输入端或门 NSC/TI<br>CD4072 双4输入端或门 NSC/TI<br>CD4073 三3输入端与门 NSC/TI<br>CD4075 三3输入端或门 NSC/TI<br>CD4076 四 D 寄存器<br>CD4077 四2输入端异或非门 HIT<br>CD4078 8 输入端或非门 / 或门<br>CD4081 四2输入端与门 NSC/HIT/TI<br>CD4082 双4输入端与门 NSC/HIT/TI<br>CD4085 双2路2输入端与或非门<br>CD4086 四2输入端可扩展与或非门<br>CD4089 二进制比例乘法器<br>CD4093 四2输入端施密特触发器  CD4094 8 位移位存储总线寄存器  CD4095 3 输入端 J-K 触发器 CD4096 3 输入端 J-K 触发器 CD4097 双路八选一模拟开关 | NSC/MOT/ST NSC/TI/PHI |<br>CD4098 双单稳态触发器                                        | NSC/MOT/TI<br>CD4099 8 位可寻址锁存器 NSC/MOT/ST<br>CD40100 32 位左 / 右移位寄存器<br>CD40101 9 位奇偶较验器<br>CD40102 8 位可预置同步 BCD 减法计数器<br>CD40103 8 位可预置同步二进制减法计数器<br>CD40104 4 位双向移位寄存器<br>CD40105 先入先出 FI-FD 寄存器<br>CD40106 六施密特触发器 NSC\TI<br>CD40107 双2输入端与非缓冲 / 驱动器 HAR\TI<br>CD40108 4 字×4位多通道寄存器<br>CD40109 四低 -高电平位移器 CD4529 双四路 / 单八路模拟开关<br>CD4530 双5输入端优势逻辑门<br>CD4531 12 位奇偶校验器<br>CD4532 8 位优先编码器<br>CD4536 可编程定时器<br>CD4538 精密双单稳<br>CD4539 双四路数据选择器<br>CD4541 可编程序振荡<br>CD4543 BCD 七段锁存译码 ,驱动器<br>CD4544 BCD 七段锁存译码 ,驱动器<br>CD4547 BCD 七段译码 /大电流驱动器<br>CD4549 函数近似寄存器<br>CD4551 四2通道模拟开关<br>CD4553 三位 BCD 计数器<br>CD4555 双二进制四选一译码器 /分离器<br>CD4556 双二进制四选一译码器 /分离器<br>CD4558 BCD 八段译码器<br>CD4560 &quot;N&quot;BCD 加法器<br>CD4561 “9” 求补器<br>CD4573 四可编程运算放大器<br>CD4574 四可编程电压比较器<br>CD4575 双可编程运放 /比较器<br>CD4583 双施密特触发器<br>CD4584 六施密特触发器<br>CD4585 4 位数值比较器<br>CD4599 8 位可寻址锁存器<br>CD40110 十进制加 / 减,计数 ,锁存 ,译码驱动 ST<br>CD40147 10-4 线编码器 NSC\MOT<br>CD40160 可预置 BCD 加计数器 NSC\MOT<br>CD40161 可预置 4位二进制加计数器 NSC\MOT<br>CD40162 BCD 加法计数器 NSC\MOT<br>CD40163 4 位二进制同步计数器 NSC\MOT<br>CD40174 六锁存 D 型触发器 NSC\TI\MOT<br>CD40175 四 D 型触发器 NSC\TI\MOT<br>CD40181 4 位算术逻辑单元 /函数发生器<br>CD40182 超前位发生器<br>CD40192 可预置 BCD 加/减计数器 (双时钟 ) NSC\TI<br>CD40193 可预置 4位二进制加 / 减计数器 NSC\TI<br>CD40194 4 位并入 / 串入 -并出 /串出移位寄存 NSC\MOT<br>CD40195 4 位并入 / 串入 -并出 /串出移位寄存 NSC\MOT<br>CD40208 4 ×4多端口寄存器<br>型号 器件名称 厂牌 备注<br>CD4501 4 输入端双与门及 2输入端或非门<br>CD4502 可选通三态输出六反相 /缓冲器<br>CD4503 六同相三态缓冲器<br>CD4504 六电压转换器<br>CD4506 双二组 2输入可扩展或非门<br>CD4508 双4位锁存 D 型触发器<br>CD4510 可预置 BCD 码加 / 减计数器<br>CD4511 BCD 锁存 ,7段译码 ,驱动器<br>CD4512 八路数据选择器<br>CD4513 BCD 锁存 ,7段译码 ,驱动器 (消隐 )<br>CD4514 4 位锁存 ,4线-16线译码器<br>CD4515 4 位锁存 ,4线-16线译码器<br>CD4516 可预置 4位二进制加 /减计数器<br>CD4517 双64位静态移位寄存器<br>CD4518 双 BCD 同步加计数器<br>CD4519 四位与或选择器<br>CD4520 双4位二进制同步加计数器<br>CD4521 24 级分频器<br>CD4522 可预置 BCD 同步 1/N 计数器<br>CD4526 可预置 4位二进制同步 1/N 计数器<br>CD4527 BCD 比例乘法器<br>CD4528 双单稳态触发器</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的总结</title>
      <link href="posts/10b2113f/"/>
      <url>posts/10b2113f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>造一台3d打印机</title>
      <link href="posts/73179b3b/"/>
      <url>posts/73179b3b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  之前一直想搞个3d打印机来着，终于抽出来时间搞它了! </center><span id="more"></span><h3 id="选材">选材</h3><p>主要是市面上的3d打印机的成品太贵了，动不动几千块，还有上万的。。。。。。</p><p>经过一番选材，我觉得还是自己造一个算了。</p><p>自己挑零件的话，水太深了(主要是菜)，再加上手上有点零件。于是乎搞了套小树的零部件。价格很美丽，400多块钱。</p><p>大致长下面这个样子</p><p>优点</p><ul><li>便宜（400多，还要什么自行车）</li><li>耐玩（毕竟你知道的结构，可以随便魔改）</li><li>精度还可以（0.15左右的精度）</li><li>学习价值大（废话，自己做一个啥都要学）</li><li>性价比高</li></ul><p>缺点</p><ul><li>难折腾（很正常，毕竟自己搞大大小小都是坑）</li><li>精度和光敏树脂的机器还是没法比较（调参调的好的话，倒是可以）</li><li>不美观（壳子啥的要自己设计，好不好看看自己实力了）</li><li>打印面积小（后期可以自己加结构）</li></ul><p><img src="https://i.loli.net/2021/05/17/1eBrugW4i7YChVE.png" alt="image-20210517173855746" loading="lazy"><em>3d打印机</em></p><p>这是我组装了一半的时候的亚子</p><p><img src="https://i.loli.net/2021/05/17/rhlc6J7R9UDWQ1C.jpg" alt="C5C144AD3C6A8AC7ED1EECEADA4E1D24" loading="lazy"></p><p>3d打印机的精度主要看运动装置和挤出头,还有热台.虽然也可以冷打,但是还是推荐热打,因为材料打出来的时候是热的,碰到了冷板的话会迅速冷缩,有容易开裂以及不好成型的缺点,所以我搞了个热台的.以及本人比较懒,所以搞了个磁吸的平台,这样不用每次都费劲的铲下来了.只需要取下来磁吸台就可以了.</p><p><img src="https://i.loli.net/2021/05/17/8wsGicyoE3lbaVL.jpg" alt="8F747BC1029551BCEDB8AF8CA9C4FDDC" loading="lazy"></p><p>搞这个玩意一定要耐心,拧螺丝拧到心态爆炸也不能抱怨(毕竟是自己要折腾的).中间鼓捣的时候忘拍图了,就,最后上个成品的照片吧!</p><p><img src="https://i.loli.net/2021/05/17/eZrkh4FHCUSOwjd.jpg" alt="3A5567DCAB4FA725B9D45054632CCB1B" loading="lazy"></p><p><img src="https://i.loli.net/2021/05/17/5BTbSj3F4Y2xROQ.jpg" alt="1621245635811.jpg" loading="lazy"></p><h3 id="接线图">接线图</h3><p><img src="https://i.loli.net/2021/05/17/dBA5etmoVbSwlPL.png" alt="" loading="lazy"></p><p><img src="https://i.loli.net/2021/05/17/FxWpCHqcTOBYN6K.png" alt="" loading="lazy"></p><h3 id="可能遇到的错误-我还没遇到">可能遇到的错误(我还没遇到)</h3><p><img src="https://i.loli.net/2021/05/04/uHOrZKTNejoln39.jpg" alt="" loading="lazy"></p><p>先简单写到这吧,剩下的以后再补充.</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你被骗了</title>
      <link href="posts/be7a8f00/"/>
      <url>posts/be7a8f00/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210920202843.png" alt="" loading="lazy"></p><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1GJ411x7h7/?spm_id_from=333.788.recommend_more_video.-1" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>妈的笑死</title>
      <link href="posts/8aa8da4d/"/>
      <url>posts/8aa8da4d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/3ZnibkYwHs7hLBD.jpg" alt="V2`UI6U4C0Q~4H0L08%8GI4" loading="lazy"></p><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微机原理填空</title>
      <link href="posts/2908f2ad/"/>
      <url>posts/2908f2ad/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>《微型计算机原理》试题库及答案</p><p>一、 填空<br>1.数制转换</p><p>​    A）125D=（ 11111101 ）B =（ 375 ）O=（ 0FD  ）H=（0001 0010 0101 ）BCD</p><p>B）10110110B=（ 182 ）D =（ 266 ）O=（ 0B6  ）H=（0001 1000 0010 ）BCD</p><p>2.下述机器数形式可表示的数值范围是(请用十进制形式写出):单字节无符号整数0~255；单字节有符号整数-128~+127。</p><p>注：微型计算机的有符号整数机器码采用补码表示，单字节有符号整数的范围为-128~+127。</p><p>3.完成下列各式补码式的运算，并根据计算结果设置标志位SF、ZF、CF、OF。指出运算结果有效否。</p><p>A）00101101+10011100=</p><p>B）11011101+10110011=</p><p>4.十六进制数2B．4Ｈ转换为二进制数是__00101011.0100，转换为十进制数是__43.25____。</p><p>5.在浮点加法运算中，在尾数求和之前，一般需要（对阶）操作，求和之后还需要进行（规格化）和舍入等步骤。</p><p>6.三态门有三种输出状态：高电平、低电平、（高阻）状态。</p><p>7.字符“A”的ASCII码为41H，因而字符“E”的ASCII码为（45H），前面加上偶校验位后代码为（C5）H。</p><p>8.数在计算机中的二进制表示形式称为（机器数）。</p><p>9.在计算机中，无符号书最常用于表示（地址）。</p><p>10.正数的反码与原码（相等）。</p><p>11.在计算机中浮点数的表示形式有（阶码）和（尾码）两部分组成。</p><p>12.微处理器中对每个字所包含的二进制位数叫（字长）。</p><p>13.MISP是微处理的主要指标之一，它表示微处理器在1秒钟内可执行多少（百万条指令）</p><p>14.PC机主存储器状基本存储单元的长度是（字节）.</p><p>15.一台计算机所用的二进制代码的位数称为___字长_________，8位二进制数称为__ <strong>字节</strong>____。</p><p>16.微型计算机由（微处理器）、（存储器）和（I/O接口电路）组成。</p><p>17.8086CPU寄存器中负责与I/O端口交换数据的寄存器为（AX,AL）</p><p>18.总线有数据总线、地址总线、控制总线组成，数据总线是从微处理器向内存储器、I/O接口传送数据的通路；反之，它也是从内存储器、I/O接口向微处理器传送数据的通路，因而它可以在两个方向上往返传送数据，称为（双向总线）。</p><p>19.一个微机系统所具有的物理地址空间是由(地址线的条数)决定的，8086系统的物理地址空间为（1M）字节。</p><p>20.运算器包括算术逻辑部件（ALU），用来对数据进行算术、逻辑运算，运算结果的一些特征由（标志寄存器）存储。</p><p>21.控制寄存器包括指令寄存器、指令译码器以及定时与控制电路。根据（指令译码）的结果，以一定的时序发出相应的控制信号，用来控制指令的执行。</p><p>22.根据功能不同，8086的标志为可分为（控制）标志和（状态）标志位。</p><p>23.8086/8088CPU内部有（14）个（16位）的寄存器。</p><p>24.在8086/8088的16位寄存器中，有（4）各寄存器可拆分为8位寄存器使用。他们是（AX,BX,CX,DX）,他们又被称为（通用寄存器）。</p><p>25.8086/8088构成的微机中，每个主存单元对应两种地址（物理地址）和（逻辑地址）。</p><p>26.物理地址是指实际的（20）为主存储单元地址，每个存储单元对应唯一的物理地址，其范围是（00000H-FFFFFH）。</p><p>27.8088的ALE引脚的作用是（锁存复用线上的地址）。</p><p>28.在8088读存储器周期中，采样Ready线的目的是（确定是否在T3周期后插入Tw周期）。</p><p>29.8088在访问4个当前段时，代码段、数据段及堆栈段的偏移量分别由（IP）、（由寻址方式决定的16位偏移量）和（SP）提供。</p><p>30.堆栈按照___先进后出___原则工作，使用____堆栈指针___指明栈顶位置。</p><p>31.在IBM－PC/XT中，外设是通过（8259）器件对CPU产生中断请求。这些中断的中断类型码为（08H—OFH）。</p><p>32.8086最多能处理（256）种中断。</p><p>33.8086/8088的中断响应了两个总线周期，从（INTA）引脚输出两个负脉冲，第一个总线周期完成，（通知I/O接口，CPU已响应外部中断请求，使被响应的I/O接口把自己的中断类型号送到数据总线的低8位D0-D7上），第二个总线周期完成（通过CPU的地址/数据引脚AD0-AD7将信号传输给CPU）</p><p>34.8088中的指令INT n用（n）指定中断类型。</p><p>35.一片8255A端口A有（3）种工作方式，端口B有（2）种工作方式。</p><p>36.宏汇编语言程序被汇编时，指令语句产生代码指令，伪指令语句不产生代码指令，宏指令 语句可能产生也可能不产生代码指令。</p><p>37.调用程序、子程序传送参数的方法通常有寄存器、内存和堆栈三种方法。</p><p>38.伪指令EQU、DB、DW、MACRO的标号名字域必须有名字或标号的伪指令为EQU、MACRO。</p><p>39.虽在本模块无定义，却可以被单独引用的名字或标号，必须用EXTRN伪指令给以说明。</p><p>40.PENTIUM的工作模式有实模式、保护模式、虚拟8086模式。</p><p>42.乘法指令MUL的指令格式只有一个源操作数，若源操作数的类型属性为字节，则目的操作数在AX中，若源操作数的类型属性为字，则目的操作数在DX:AX中。</p><p>注：将题中的目的操作数改为乘积更确切一些。</p><p>43.请给出标志寄存器中标志位OF、IF、SF、ZF、PF、CF的说明: OF 溢出、IF 中断、SF 符号、ZF 零、PF 奇偶、CF 进位。</p><p>44.堆栈是按照先进后出原则组织的一片连续的存储区域。</p><p>45.变址寻址的有效地址是变址寄存器的内容与地址位移量代数和。</p><p>46.指令XLAT通常用于查表操作，在使用该指令前，应把表首的偏移首地址送入BX，待转换的代码在表中的序号送AL。</p><p>47.若要求不产生汇编错误，则字符串’ABC’只能出现在伪指令DB中。</p><p>48.实模式下，对于指令 MOV AX，DS：[BX]</p><p>执行前DS=1000H，BX=11H，</p><p>则操作数DS：[BX]的有效地址为0011H。</p><p>注：有效地址指段内的偏移量。</p><p>49.为下述情况各举一例。</p><p>⑴寄存器与存储单元内容相加送寄存器ADD AL, [BX]。</p><p>⑵寄存器互送MOV AX, BX。</p><p>⑶将标志寄存器进栈PUSHF。</p><p>⑷立即数与寄存器内容相加送寄存器ADD AX, 1234H。</p><p>⑸将48H、5AH存入字节数据区ARRAYB ARRAYB DB 48H , 5AH。</p><p>一、单项选择题</p><p>\1. CPU包括（ C ）两部分。</p><p>A、ALU和累加器  B、ALU和控制器  C、运算器和控制器   D、ALU和主存储器</p><p>\2. 财务会计方面的计算机应用属于(B )。</p><p>A、科学计算  B、数据处理   C、辅助设计   D、实时控制</p><p>\3. 采用十六进制书写二进制数，位数可以减少到原来的( C  )。</p><p>A、1／2  B、1／3  C、1／4  D、1／5</p><p>\4. 用二一十进制数表示一位十进制数的二进制位是( D )。</p><p>A、1位  B、2位  C、3位  D、4位</p><p>\5. 如果指令中的地址码就是操作数的有效地址，那么这种寻址方式称为(B )。</p><p>A、立即寻址  B、直接寻址  C、间接寻址  D、寄存器寻址</p><p>\6. Cache的主要特点之—是( B)。</p><p>A、存储量大  B、存取速度快  C、价格便宜  D、价格便宜但容量小</p><p>\7. 在主机与外围设备进行数据交换时，为解决两者之间的同步与协调、数据格式转换等问</p><p>题，必须要引入( C )。</p><p>A、数据缓冲寄存器   B、I／O总线   C、I/O接口    D、串并移位器</p><p>\8. 在采用DMA方式的I/O系统中，其基本思想是在以下部件或设备之间建立直接的数据</p><p>通路，这指的是( B )。</p><p>A、CPU与外围设备  B、主存与外围设备  C、外设与外设   D、CPU与主存</p><p>\9. 集成电路计算机属于第（D）代计算机。</p><p>A ．“一”     B ．“二”    C ．“三”     D ．“四”</p><p>\10. 堆栈是一种（B）存贮器。</p><p>A ．顺序   B ．先进后出    C ．只读   D ．先进先出</p><p>\11. 在多级存储体系中，“ cache —主存”结构的作用是解决（D）的问题。</p><p>A ．主存容量不足  B ．主存与辅存速度不匹配 C ．辅存与 CPU 速度不匹配  D ．主存与 CPU 速度不匹配</p><p>\12. 如指令中的地址码就是操作数，那么这种寻址方式称为（A）。</p><p>A ．立即寻址  B ．直接寻址    C ．间接寻址  D ．寄存器寻址</p><p>\13. 数控机床方面的计算机应用属于（B）。</p><p>A ．科学计算   B ．辅助设计   C ．数据处理   D ．实时控制</p><p>\14. 某数在计算机中用 8421BCD 码表示为 0011 1001 1000 ，其真值为（A）。</p><p>A ． 398    B ． 398H    C ． 1630Q    D ． 1110011000B</p><p>\15. 字符的编码，目前在微机中最普遍采用的是(  C )。</p><p>A.BCD码   B.16进制   C.ASCⅡ码   D.格雷码</p><p>\16. 在存储体系中，辅存的作用是（D）</p><p>A.弥补主存的存取速度不足  B.缩短主存的读写周期</p><p>C.减少CPU访问内存的次数  D.弥补主存容量不足的缺陷</p><p>\17. 以下叙述正确的是（C）</p><p>A.ASCII编码可以表示汉字的编码    B.汉字输入编码都是根据字音进行的编码</p><p>C.汉字输入码可以根据汉字字形编码    D.汉字字形码都是将汉字分解成若干“点”组成的点阵</p><p>\18. [x]补=11011100B，则x的真值为（A）</p><p>A.-36D    B.92D    C.-28D    D.5CH</p><p>\19. 计算机软件是指（D）</p><p>A.操作系统    B.汇编程序   C.用户程序    D.所有程序及文档的统称</p><p>\20. 目前微型机系统上广泛使用的机械式鼠标是一种（ A ）</p><p>A.输入设备  B.输出设备   C.输入输出设备   D.显示设备组成之一</p><p>\21. 二进制数1001101B的十进制数表示为（ C ）</p><p>A.4DH      B.95D      C.77D      D.9AD</p><p>\22. 十进制小数转换成十六进制数可采用（ B ）</p><p>A.除基（10）取余法                  B.除基（16）取余法</p><p>C.乘基（10）取整法                  D.乘基（16）取整法</p><p>\23. 家用电脑是指（ D ）</p><p>A.家用电器    B.家庭电影院    C.家庭音响设备     D.家用计算机</p><p>\24. 在8421码表示的二—十进制数中，代码1001表示( C )</p><p>A.3       B.6      C.9       D.1</p><p>\25. 目前普遍使用的微型计算机采用的电路是( D )</p><p>A.电子管      B.晶体管     C.集成电路    D.超大规模集电成路</p><p>\26. 8位定点原码整数10100011B的真值为( B )</p><p>A.+0100011   B. -0100011   C.+1011101   D. -1011101</p><p>\27. 现代计算机通常是将处理程序存放在连续的内存单元中，CPU在执行这个处理程序时，使用一个寄存器来指示程序的执行顺序，这个寄存器为（ D ）。</p><p>A．指令寄存器         B．指令译码器</p><p>C．指令缓冲寄存器       D．指令指针寄存器</p><p>\28. 某计算机字长为16位，其内存容量为1024K字节，按字编址，它的寻址空间为（ D ）。</p><p>A. 512KB      B. 512K     C. 1024KB     D. 1024K</p><p>29.若指令的运算结果不为0且低8位中“1”的个数为偶数，则标志寄存器中ZF和PF的状态为（ B）。</p><p>A. 0，0      B．0，1     C．1，0       D．1，1</p><p>30.指令“MOV AX，[BX+20H]”源操作数的寻址方式为（ C ）。</p><p>A．寄存器寻址 B．寄存器间接寻址  C．寄存器相对寻址 D．以上均不对</p><p>\31. 根据下面定义的数据段：</p><p>DSEG SEGMENT</p><p>​    DAT1 DB <code>1234</code></p><p>​    DAT2 DW 5678H</p><p>​    DAT3 DD  12345678H</p><p>​    ADDR EQU  DAT3-DAT1</p><p>DSEG ENDS</p><p>执行指令MOV AX, ADDR后，AX寄存器中的内容是（ C ）。</p><p>A. 5678H   B. 0008H   C. 0006H    D. 0004H</p><p>32.在8086系统的中断向量表中，若从0000H：005CH单元开始由低地址到高地址依次存放10H、20H、30H和40H四个字节，则相应的中断类型码和中断服务程序的入口地址分别为（A）。</p><p>A．17H，4030H：2010H      B．17H，2010H：4030H</p><p>C．16H，4030H：2010H      D．16H，2010H：4030H</p><p>33.在DMA控制器8237控制下进行“写传送”时，8237需先后向I/O接口和存储器发出的控制信号是（ B  ）。</p><p>A． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img" loading="lazy">     B． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img" loading="lazy"></p><p>C． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img" loading="lazy">      D． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img" loading="lazy"></p><p>34.下面是关于可编程中断控制器8259A的叙述，其中错误的是（ B ）。</p><p>A. 8259A具有优先级管理的功能</p><p>B. 8259A具有辨认中断源的功能</p><p>C. 8259A具有向CPU提供中断向量的功能</p><p>D. 一片8259A可管理8级中断</p><p>\35. CPU和主存之间增设高速缓存（Cache）的主要目的是（ B  ）。</p><p>A. 扩大主存容量       B. 解决CPU和主存之间的速度匹配问题</p><p>C. 提高存储器的可靠性   D. 以上均不对</p><p>\36. 中断向量可提供（ D  ）</p><p>A. 被选中设备的地址     B. 传送数据的起始地址</p><p>C. 主程序的断点地址     D. 中断服务程序的入口地址</p><p>\37. 3片8259A级联，最多可管理（ C   ）级中断。</p><p>A. 24     B. 23    C. 22     D. 21</p><p>\38. 按照USB 1.0 规范，一台主机最多可连接（ D ）个外设装置（含USB集线器—USB Hub）。</p><p>A. 120     B.122    C. 123    D. 127</p><p>三.判断题(你认为正确的，请在题末的括号内打“√”，错的打“×”。</p><p>1、8086的Ready信号是由外部硬件产生的。……………………………（√）<br>2、8088的M/<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png" alt="img" loading="lazy">引脚的低电平表明选通的是I/O接口。……………… （√）<br>3、8086 的数据可以存放在几个不连续的段中。……………………… （√）<br>4、8086 中，取指令和执行指令可以重叠操作。………………………… （√）<br>5、8255 只有三个普通I/O端口，所以它不可作为一个外部中断源去向8086申请中断（×）<br>6、多个外设可以通过一条中断请求线，向CPU发中断请求。……………… （√）<br>7、8253 的每个计数器只能按二进制计数。………………………………（×）<br>8、8253的计数器是对机器的CLK脉冲计数。……………………………（×）<br>9、8086的可屏蔽外部中断源的中断类型号是用软件设置的。…………（×）<br>10、8086的中断入口地址只能放到内存的最低端，即0——3FFH区域。………（√）<br>11、<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image013.png" alt="img" loading="lazy">／<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img" loading="lazy">及HOLD、HLDA信号是与系统中其它总线主设备有关的信号。  （√）</p><p>12.8088的<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img" loading="lazy">信号可用作中断矢量的读选通信号。………（√）<br>13、8088 的可屏蔽中断的优先权高于非屏蔽中断。…………（×）<br>14、8255A中端口A使用的是INTR，<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image016.png" alt="img" loading="lazy">及<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image017.png" alt="img" loading="lazy">等线是端口C的线。………（√）<br>15、串行异步接口的双向工作方式指的是在串行接口上可同时发送和接收串行数据。…（√）<br>16、EPROM 虽然是只读存储器，但在编程时可向内部写入数据。（√）<br>17、中断服务程序可放在用户可用的内存的任何区域。……（√）<br>18、字长越长，计算机处理数据的速度越快；        （  √ ）</p><p>19.汇编语言是面向机器的语言。                   （ √ ）</p><p>20.任何一个十进制小数都可以用二进制精确表示。 （  ×   ）</p><p>21.计算机的内存与外存都可以直接与CPU交换数据。（  ×  ）</p><p>22.复位影响片内RAM存放的内容。                  （ ×  ）</p><p>23.定时器/计数器溢出中断可以由硬件产生，也可以由软件产生。（  √   ）</p><p>四、简答题<br>1．8086的总线接口部件有哪些功能?由哪几部分组成?请逐一说明。8086的执行部件有什么功能?由哪几部分组成?</p><p>答：8086的总线接口部件的功能是负责完成CPU与存储器或I/O设备之间的数据传送。</p><p>8086的总线接口部件由：4个16位段地址寄存器（DS、DS、SS、ES），16位指令指针IP，6字节指令队列缓冲器，20位地址加法器和总线控制器几部分组成。</p><p>8086的执行部件的功能就是负责执行指令，它由16位的算术逻辑单元（ALU）、16位的标志寄存器F、数据暂存寄存器、通用寄存器组、EU控制电路组成。</p><p>2．8086 的中断系统分为哪几种类型的中断？其优先顺序如何？<br>答：8086 的中断系统分为外部中断（可屏蔽中断和不可屏蔽中断）和内部中断。</p><p>其优先顺序是：除单步中断以外，所有的内部中断优先权都比外部中断优先权高，在外部中断中，不可屏蔽中断比可屏蔽中断优先权高。</p><p>3 ．什么叫中断向量?它放在哪里？对应于lCH的中断向量存放在哪里?如果1CH的中断处理子程序从5110H：2030H开始，则中断向量应怎样存放?</p><p>答：中断向量是用来提供中断入口地址的一个地址指针；对应于lCH的中断向量存放在1CH×4=70H开始的4个单元</p><p>如果1CH的中断处理子程序从5110H：2030H开始，则中断向量应如下存放：</p><p>​         0070H：30H</p><p>​         0071H：20H</p><p>​         0072H：10H</p><p>​         0073H：51H</p><p>4.计算机分那几类？各有什么特点？</p><p>答：传统上分为三类：大型主机、小型机、微型机。大型主机一般为高性能的并行处理系统， 存储容量大，事物处理能力强，可为众多用户提供服务。小型机具有一定的数据处理能力，提供一定用户规模的信息服务，作为部门的信息服务中心。微型机一般指在办公室或家庭的桌面或可移动的计算系统，体积小、价格低、具有工业化标准体系结构，兼容性好。</p><p>5.简述微处理器、微计算机及微计算机系统三个术语的内涵。</p><p>答：微处理器是微计算机系统的核心硬件部件，对系统的性能起决定性的影响。微计算机包括微处理器、存储器、I/O接口电路及系统总线。微计算机系统是在微计算机的基础上配上相应的外部设备和各种软件，形成一个完整的、独立的信息处理系统。</p><p>6.80X86微处理器有几代？各代的名称是什么？</p><p>答：从体系结构上可分为3代： ¬ 8080/8085：8位机。 ­ 8086/8088/80286：16位机。</p><p>® 80386/80486：32位机。</p><p>7.8086是多少位的微处理器？为什么？</p><p>答：8086是16位的微处理器，其内部数据通路为16位，对外的数据总线也是16位。</p><p>8.EU与BIU各自的功能是什么？如何协同工作？</p><p>答：EU是执行部件，主要的功能是执行指令。BIU是总线接口部件，与片外存储器及I/O接口电路传输数据。EU经过BIU进行片外操作数的访问，BIU为EU提供将要执行的指令。EU与BIU可分别独立工作，当EU不需BIU提供服务时，BIU可进行填充指令队列的操作。</p><p>9.8086/8088与其前一代微处理器8085相比，内部操作有什么改进？</p><p>答：8085为8位机，在执行指令过程中,取指令与执行执令都是串行的。8086/8088由于内部有EU和BIU两个功能部件，可重叠操作，提高了处理器的性能。</p><p>10.8086/8088微处理器内部有那些寄存器，它们的主要作用是什么？</p><p>答：执行部件有8个16位寄存器，AX、BX、CX、DX、SP、BP、DI、SI。AX、BX、CX、DX一般作为通用数据寄存器。SP为堆栈指针存器，BP、DI、SI在间接寻址时作为地址寄存器或变址寄存器。总线接口部件设有段寄存器CS、DS、SS、ES和指令指针寄存器IP。段寄存器存放段地址，与偏移地址共同形成存储器的物理地址。IP的内容为下一条将要执行指令的偏移地址，与CS共同形成下一条指令的物理地址。</p><p>11.8086对存储器的管理为什么采用分段的办法？</p><p>答：8086是一个16位的结构，采用分段管理办法可形成超过16位的存储器物理地址，扩大对存储器的寻址范围 (1MB，20位地址)。若不用分段方法，16位地址只能寻址64KB空间。</p><p>12．在8086中，逻辑地址、偏移地址、物理地址分别指的是什么？具体说明。</p><p>答：逻辑地址是在程序中对存储器地址的一种表示方法，由段地址和段内偏移地址两部分组成，如1234H：0088H。偏移地址是指段内某个存储单元相对该段首地址的差值，是一个16位的二进制代码。物理地址是8086芯片引线送出的20位地址码，用来指出一个特定的存储单元。</p><p>13．给定一个存放数据的内存单元的偏移地址是20C0H，（DS）=0C00EH，求出该内存单元的物理地址。</p><p>答：物理地址：320F8H。</p><p>14．8086/8088为什么采用地址/数据引线复用技术？</p><p>答：考虑到芯片成本，8086/8088采用40条引线的封装结构。40条引线引出8086/8088的所有信号是不够用的，采用地址/数据线复用引线方法可以解决这一矛盾，从逻辑角度，地址与数据信号不会同时出现，二者可以分时复用同一组引线。</p><p>15.8086与8088的主要区别是什么？</p><p>答：8086有16条数据信号引线，8088只有8条；8086片内指令预取缓冲器深度为6字节，8088只有4字节。</p><p>16.怎样确定8086的最大或最小工作模式？最大、最小模式产生控制信号的方法有何不同</p><p>答：引线MN/MX#的逻辑状态决定8086的工作模式，MN/MX#引线接高电平，8086被设定为最小模式，MN/MX#引线接低电平，8086被设定为最大模式。</p><p>最小模式下的控制信号由相关引线直接提供；最大模式下控制信号由8288专用芯片译码后提供，8288的输入为8086的S2#~S0#三条状态信号引线提供。</p><p>17.8086被复位以后，有关寄存器的状态是什么？微处理器从何处开始执行程序？</p><p>答：标志寄存器、IP、DS、SS、ES和指令队列置0，CS置全1。处理器从FFFFOH存储单元取指令并开始执行。</p><p>18.8086基本总线周期是如何组成的？各状态中完成什么基本操作？</p><p>答：基本总线周期由4个时钟(CLK)周期组成，按时间顺序定义为T1、T2、T3、T4。在T1期间8086发出访问目的地的地址信号和地址锁存选通信号ALE；T2期间发出读写命令信号RD#、WR#及其它相关信号；T3期间完成数据的访问；T4结束该总线周期。</p><p>19.结合8086最小模式下总线操作时序图，说明ALE、M/IO#、DT/R#、RD#、READY信号的功能。</p><p>答：ALE为外部地址锁存器的选通脉冲，在T1期间输出；M/IO#确定总线操作的对象是存储器还是I/O接口电路，在T1输出；DT/R#为数据总线缓冲器的方向控制信号，在T1输出；RD#为读命令信号；在T2输出；READY信号为存储器或I/O接口“准备好”信号，在T3期间给出，否则8086要在T3与T4间插入Tw等待状态。</p><p>20.8086中断分哪两类？8086可处理多少种中断？</p><p>答：8086中断可分为硬件中断和软件中断两类。8086可处理256种类型的中断。</p><p>21.8086可屏蔽中断请求输入线是什么？“可屏蔽”的涵义是什么？</p><p>答：可屏蔽中断请求输入线为INTR；“可屏蔽”是指该中断请求可经软件清除标志寄存器中IF位而被禁止。</p><p>22.8086的中断向量表如何组成？作用是什么？</p><p>答：把内存0段中0~3FFH区域作为中断向量表的专用存储区。该区域存放256种中断的处理程序的入口地址，每个入口地址占用4个存储单元，分别存放入口的段地址与偏移地址。</p><p>23．8086如何响应一个可屏蔽中断请求？简述响应过程。</p><p>答：当8086收到INTR的高电平信号时，在当前指令执行完且IF=1的条件下，8086在两个总线周期中分别发出INTA#有效信号；在第二个INTA#期间，8086收到中断源发来的一字节中断类型码；8086完成保护现场的操作，CS、IP内容进入堆栈，请除IF、TF；8086将类型码乘4后得到中断向量表的入口地址，从此地址开始读取4字节的中断处理程序的入口地址，8086从此地址开始执行程序，完成了INTR中断请求的响应过程。</p><p>24.什么是总线请求？8086在最小工作模式下，有关总线请求的信号引脚是什么？</p><p>答：系统中若存在多个可控制总线的主模块时，其中之一若要使用总线进行数据传输时，需向系统请求总线的控制权，这就是一个总线请求的过程。8086在最小工作模式下有关总线请求的信号引脚是HOLD与HLDA。</p><p>25.简述在最小工作模式下，8086如何响应一个总线请求？</p><p>答：外部总线主控模块经HOLD引线向8086发出总线请求信号；8086在每个时钟周期的上升沿采样HOLD引线；若发现HOLD=1则在当前总线周期结束时(T4结束)发出总线请求的响应信号HLDA；8086使地址、数据及控制总线进入高阻状态，让出总线控制权，完成响应过程。</p><p>26．在基于8086的微计算机系统中，存储器是如何组织的？是如何与处理器总线连接的？</p><p>BHE信号起什么作用？</p><p>答：8086为16位处理器，可访问1M字节的存储器空间；1M字节的存储器分为两个512K字节的存储体，命名为偶字节体和奇字节体；偶体的数据线连接D7~D0，“片选”信号接地址线A0；奇体的数据线连接D15~D8，“片选”信号接BHE信号；BHE信号有效时允许访问奇体中的高字节存储单元，实现8086的低字节访问、高字节访问及字访问。</p><p>27．“80386是一个32位微处理器”，这句话的涵义主要指的是什么？</p><p>答：指80386的数据总线为32位，片内寄存器和主要功能部件均为32位，片内数据通路为32位。</p><p>28．80X86系列微处理器采取与先前的微处理器兼容的技术路线，有什么好处？有什么不足？</p><p>答：好处是先前开发的软件可以在新处理器组成的系统中运行，保护了软件投资。缺点是处理器的结构发展受到兼容的约束，为了保持兼容性增加了硅资源的开销，增加了结构的复杂性。</p><p>29．80386内部结构由哪几部分组成？简述各部分的作用。</p><p>答：80386内部结构由执行部件(EU)、存储器管理部件(MMU)和总线接口部件(BIU)三部分组成。EU包括指令预取部件、指令译码部件、控制部件、运算部件及保护检测部件，主要功能是执行指令。存储器管理部件包括分段部件、分页部件，实现对存储器的分段分页式的管理，将逻辑地址转换成物理地址。总线接口部件作用是进行片外访问：对存储器及I/O接口的访问、预取指令；另外的作用是进行总线及中断请求的控制</p><p>30．80386有几种存储器管理模式？都是什么？</p><p>答：80386有三种存储器管理模式，分别是实地址方式、保护方式和虚拟8086方式</p><p>31．在不同的存储器管理模式下，80386的段寄存器的作用是什么？</p><p>答：在实地址方式下，段寄存器与8086相同，存放段基地址。在保护方式下，每个段寄存器还有一个对应的64位段描述符寄存器，段寄存器作为选择器存放选择符。在虚拟8086方式下，段寄存器的作用与8086相同。</p><p>32.80386对中断如何分类？</p><p>答：80386把中断分为外部中断和内部中断两大类，外部中断经NMI和INTR引线输入请求信号。内部中断也叫内部异常中断，分为陷阱中断、内部故障异常中断、异常终止中断。</p><p>33.80386在保护方式下中断描述符表与8086的中断向量表有什么不同？</p><p>答：8086工作在实地址方式，向量表是在存储器的0段中最低1024字节内存中。80386在保护方式下要通过中断描述符表中的描述符访问虚拟空间的中断向量，中断描述符表的位置不是固定的，要由IDTR寄存器实现在虚拟空间的定位。</p><p>简述80386在保护方式下的中断处理过程。</p><p>答：80386响应中断后，接收由中断源提供的类型码并将其乘8，与IDTR寄存器中基地址相加，指出中断描述符的位置，读出中断描述符，依其中的段选择符及条件决定从两个描述符表LDT或GDT中的一个得到段描述符，形成中断服务程序入口所在存储器单元的线性地址。</p><p>34.8086CPU的字节寻址范围有多大？为什么？存储器为什么分段？20位物理地址的形成过程是怎样的？</p><p>答：8086CPU寻址范围1MB。因为8086CPU地址线为20条，2^20=1024KB，即1MB。8086系统中，指令仅给出16位地址，与寻址地址有关的寄存器也只有16位长，因此寻址范围只有64KB，为了寻址1MB，所以分成四个逻辑段。当CPU访问内存时，寄存器的内容（段基址）自动左移4位（二进制），与段内16位地址偏移量相加，形成20位的物理地址。</p><p>35.使用中断有什么好处？</p><p>答：  (1)解决快速CPU与慢速外设之间的矛盾，使CPU可以与外设同时工作，甚至可以与几个外设同时工作。</p><p>(2)计算机实现对控制对象的实时处理。</p><p>(3)计算机可以对故障自行处理。</p><p>36.什么是伪指令？</p><p>答：伪指令语句在形式上与指令语句很相似，但它不产生任何目标代码，只对汇编程序在汇编过程中提供必要的控制信息。</p><p>37.简述行列式键盘矩阵的读入方法。</p><p>答:将行线接输出口，列线接输入口，采用行扫描法，先将某一行输出为低电平，其它行输出为高电平，用输入口来查询列线上的电平，逐次读入列值，如果行线上的值为0时，列线上的值也为0，则表明有键按下。否则，接着读入下一列，直到找到该行有按下的键为止。如该行没有找到有键按下，就按此方法逐行找下去，直到扫描完全部的行和列。</p><p>38.简述用反转法实现键的识别的基本方法。</p><p>答: 将题目中的键改为闭合键。</p><p>用反转法识别闭合键，需要用可编程的并行接口。行线和列线分别接在PA和PB 2个并行口上，首先让行线上的PA口工作在输出方式，列线上的PB口工作在输入方式，通过编程使PA口都输出低电平，然后读取PB口的列线值，如果某一列线上的值为0，则判定该列有某一键按下。为了确定是哪一行要对PA和PB进行反转，即对PA口重新进行初始化工作在输入方式，列线上的PB口工作在输出方式，并将刚读取的列线值从列线所接的PB口输出，再读取行线所接的PA口，取得行线上的输入值，在闭合键所在的行线上的值必定为0。这样，当一个键被按下时，必定可读得一对唯一的行值和列值。根据这一对行值和列值就可判断是哪一行哪一列的键被按下。</p><p>39.LED数码管显示器共阴极和共阳极的接法主要区别是什么？</p><p>答:LED数码管显示器共阴极的接法是发光二极管的阴极接地，当数码管的笔划发光二极管的阳极为高电平时，该笔划被点亮。共阳极的接法是发光二极管的阳极接高电平，当数码管的笔划发光二极管的阴极为低电平时，该笔划被点亮。总之，主要区别在于LED数码管的接法和驱动笔划的数据电平的不同。</p><p>40.试绘图说明LED数码管显示器的动态显示原理。</p><p>答: 使用书上的图7.8</p><p>在图中LED数码管是共阴极的，总共可带动8位这样的LED数码管。动态驱动显示接口与静态驱动显示接口的一个明显特点是：动态驱动法将多位LED同名段的选择线都并联在一起，即8位中的所有同名段a接在一起，所有b段都接在一起……，这样只要一个8位的锁存器来控制段码a,b,c,d,e,f,g就够了。另外用一个锁存器来控制点亮的位。因此需要2个8位的I/O端口。</p><p>由于所有位的位选择码是用一个I/O端口控制，所有段的段选择码也是用一个I/O端口控制，因此在每个瞬间，8位LED只可能显示相同的字符。要想每位显示不同的字符，必须要采用扫描的显示方式。即在每一瞬间只能使某一位显示相应的字符，在此瞬间，由位选择控制的I/O端口在要显示的位上送入选通电平（共阴极接法送入低电平，共阳极接法送入高电平），以保证让该位显示字符；再由段选择控制的I/O端口输出相应字符的段选择码。如此循环下去，使每一位都显示该位应显示的字符，并保持延时一段时间，然后再选中下一位，利用发光显示器的余辉及人眼的视觉暂留特点，给人一种显示器同时被点亮的效果。段选择码，位选择码在每送入一次后一般需要延时1~5ms时间。</p><p>五、按要求编写指令或程序段(本大题共3小题，每小题4分，共12分)<br>1.用两种方法将存储器1000H的内容（1EH）扩大到原来的8倍。</p><p>答：第一种方法：MOV BX，1000H</p><p>​        MOV AL，[BX]</p><p>​        MOV CL，08H</p><p>MUL CL</p><p>MOV [BX]，AL</p><p>第二种方法：MOV BX，1000H</p><p>​        MOV AL，[BX]</p><p>​         MOV CL，03H</p><p>ROL AL，CL</p><p>MOV [BX]，AL</p><p>2.写出用一条指令就可使AL寄存器清零的指令；还写出用一条指令就可使AL寄存器为全1的指令（尽可能多地正确地写）。</p><p>答：用一条指令就可使AL寄存器清零的指令；用一条指令就可使AL寄存器为全1的指令</p><p>（1）MOV AX，0000H          （1） MOV AL，0FFH</p><p>（2）AND AX，0000H          （2） OR AL，0FFH</p><p>（3）XOR AX，AX</p><p>3.将存储器1000H到10FFH的连续单元中都放着一字节无符号数，将其中的最大无符号数放到偏移地址为1000H的单元中。</p><p>答： MOV BX，1000H</p><p>MOV CL，0FFH</p><p>MOV AL，[BX]</p><p>ABC：INC BX</p><p>CMP AL，[BX]</p><p>JNC BCD</p><p>MOV AL，[BX]</p><p>BCD：DEC CL</p><p>JNZ ABC</p><p>MOV BX，1000H</p><p>MOV [BX]，AL</p><p>JMP $</p><p>4.设计一个分支程序</p><p><img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img" loading="lazy">1   X&gt;0</p><p>Y =   0  X=0</p><p>-1   X&lt;0</p><p>程序为：</p><p>MOV AL ，X</p><p>CMP AL，0</p><p>JGE  BIG</p><p>MOV Y，-1</p><p>JMP EXIT</p><p>BIG：JE EQUL</p><p>MOV Y，1</p><p>JMP EXIT</p><p>EQUL：MOV Y，0</p><p>JMP $</p><p>5.编写程序段, 比较两个5字节的字符串OLDS和NEWS, 如果OLDS字符串与NEWS不同, 则执行NEW_LESS, 否则顺序执行程序。</p><p>LEA SI, OLDS</p><p>LEA DI, NEWS</p><p>MOV CX, 5</p><p>CLD</p><p>REPZ  CMPSB</p><p>JNZ NEW_LESS</p><p>6.变量N1和N2均为2字节的非压缩BCD数码，请写出计算N1与N2之差的指令序列。</p><p>MOV AX, 0</p><p>MOV AL, N1+1</p><p>SUB AL, N2+1</p><p>AAS</p><p>MOV DL, AL</p><p>MOV AL, N1</p><p>SBB AL, N2</p><p>AAS</p><p>MOV DH, AL</p><p>7.试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来。</p><p>abc:  mov   ah,1</p><p>​    int   21h</p><p>​    sub   al,20h</p><p>​    mov   dl,al</p><p>​    mov   ah,2</p><p>​    int   21h</p><p>​    jmp   abc</p><p>sto: ret</p><p>8.把AX寄存器清零。</p><p>①MOV AX,0</p><p>②XOR AX,AX</p><p>③AND AX,0</p><p>④SUB AX,AX</p><p>9.把AL中的数<em>x</em>乘10</p><p>因为10=8+2=23+21，所以可用移位实现乘10操作。程序如下：</p><p>MOV CL,3</p><p>SAL  AL,1   ; 2<em>x</em></p><p>MOV AH,AL</p><p>SAL  AL,1   ; 4<em>x</em></p><p>SAL  AL,1   ; 8<em>x</em></p><p>ADD AL,AH  ; 8<em>x</em>+2<em>x</em> = 10<em>x</em></p><p>10.按下述要求写出指令序列:</p><p>(1) DATAX和DATAY中的两个字数据相加, 和存放在DATAY和DATAY+2中。</p><p>(2) DATAX和DATAY中的两个双字数据相加, 和存放在DATAY开始的字单元中。</p><p>(3) DATAX和DATAY两个字数据相乘（用MUL）。</p><p>(4) DATAX和DATAY两个双字数据相乘（用MUL）。</p><p>(5) DATAX除以23（用DIV）。</p><p>(6) DATAX双字除以字DATAY（用DIV）。</p><p>DATAX和DATAY中的两个字数据相加, 和存放在DATAY和DATAY+2中。</p><p>(1) MOV AX, DATAX</p><p>ADD AX, DATAY</p><p>MOV BX, DATAX+2</p><p>ADD BX, DATAY+2</p><p>MOV DATAY, AX</p><p>MOV DATAY+2, BX</p><p>DATAX和DATAY中的两个双字数据相加, 和存放在DATAY开始的字单元中。</p><p>(2) MOV AX, DATAX</p><p>ADD DATAY, AX</p><p>MOV AX, DATAX+2</p><p>ADC DATAY+2, AX</p><p>DATAX和DATAY两个字数据相乘（用MUL）。</p><p>(3) MOV AX, DATAX</p><p>MUL DATAY</p><p>MOV DATAY,AX</p><p>MOV DATAY+2,DX</p><p>DATAX和DATAY两个双字数据相乘（用MUL）。</p><p>(4)</p><p>MOV AX,WORD PTR DATAX</p><p>MOV BX,WORD PTR DATAY</p><p>MUL BX</p><p>MOV RESULT,AX</p><p>MOV RESULT+2,DX</p><p>MOV AX,WORD PTR DATAX</p><p>MOV AX,WORD PTR DATAY+2</p><p>MUL BX</p><p>ADD RESULT+2,AX</p><p>ADC RESULT+4,DX</p><p>MOV AX,WORD PTR DATAX+2</p><p>MOV BX,WORD PTR DATAY</p><p>MUL BX</p><p>ADD RESULT+2,AX</p><p>ADC RESULT+4,DX</p><p>MOV AX,WORD PTR DATAX+2</p><p>MOV BX,WORD PTR DATAY+2</p><p>MUL BX</p><p>ADD RESULT+4,AX</p><p>ADC RESULT+6,DX</p><p>DATAX除以23（用DIV）。</p><p>(5)  MOV AX, DATAX</p><p>MOV BL, 23</p><p>DIV    BL</p><p>MOV  BL,AH</p><p>MOV  AH, 0</p><p>MOV  DATAY, AX    ;存放商</p><p>MOV  AL,BL</p><p>MOV  DATAY+2, AX ;存放余数</p><p>DATAX双字除以字DATAY（用DIV）。</p><p>(6) MOV AX, DATAX</p><p>MOV DX, DATAX+2</p><p>DIV   DATAY</p><p>MOV DATAY, AX</p><p>MOV DATAY+2, DX</p><p>五、软件设计</p><p>1、以BUF1和BUF2开头的2个字符串开头的2个字符串，其长度相等，试编程实现将两个字符串的内容对调。</p><p>DDD0  SEGMENT                                BUF1  DB “QWERTYUIOPASDFGHJKLR”</p><p>BUF2  DB “A1234567890ZXCVBNMPJ”<br>LEN   EQU LENGTH BLOCK1<br>DDD0  ENDS<br>ESEG  SEGMENT<br>BUF3  DB 20 DUP(?)<br>ESEG  ENDS<br>CSEG  SEGMENT<br>ASSUME CS:CSEG,DS:DDD0,ES:ESEG<br>START: CLD<br>MOV AX，DDD0<br>MOV DS，AX<br>MOV AX，ESEG<br>MOV ES，AX<br>MOV CX,LEN<br>LEA SI， BUF1</p><p>LEA DI， BUF3<br>REP MOVSB<br>MOV CX,LEN                                       LEA SI， BUF2                                           LEA DI， BUF1                                          REP MOVSB                                           MOV CX,LEN                                       LEA SI， BUF3                                   LEA DI， BUF2                                         REP MOVSB                                             CSEG   ENDS                                         END START</p><p>2、 在ABC和BCD两地址起，各有5个字节的无符号数，试编程实现这两个无符号数的加法并将结果分别存放到CBA开始的存储单元中去。</p><p>DDD0  SEGMENT                                 ABC   DB 9FH，26H，12H，5AH，23H                                    BCD   DH 74H，D3H，54H，43H，7DH                                     CBA   DB 6 DUP(?)                                                                   DDD0  ENDS                                CSEG  SEGMENT                                     ASSUME CS:CSEG,DS:DDD0                                START: MOV AX，DDD0                                     MOV DS，AX                                       MOV CX，5                                           CLC                                                 LEA SI,ABC；可做间址寄存器的有SI，DI，BX，BP及它们的组合                            LEA DI，BCD                                         LEA BX，CBA                                        XYZ： MOV AL，[SI]                                      ADC AL，[DI]                                        MOV [BX]，AL                                        INC SI                                         INC DI                                            INC BX                                        LOOP XYZ                                         MOV AL，0                                       ADC AL，0                                       MOV[BX]，AL                                         LEA BX，CBA                                       MOV [BX]，AX                                                                                                                    CSEG ENDS                                          END START</p><p>\3. 把0-100之间的30个数，存入首地址为GRAD的字数组中，GRAD+i表示学号为i+1的学生成绩。另一个数组RANK是30个学生的名次表，其中RANK+I的内容是学号为i+1的学生的名次。试编写程序，根据GRAD中的学生成绩，将排列的名次填入RANK数组中（提示：一个学生的名次等于成绩高于这个学生的人数加1）。</p><p>dseg  segment</p><p>grade dw 30 dup(?)</p><p>rank    dw 30 dup(?)</p><p>dseg  ends</p><p>cseg    segment</p><p>main  proc    far</p><p>assume cs:cseg, ds:dseg, es:dseg</p><p>start: push  ds</p><p>​    sub   ax,ax</p><p>​    push  ax</p><p>​    mov   ax,dseg</p><p>​    mov   ds,ax</p><p>​    mov   es,ax</p><p>begin: mov   di,0</p><p>​    mov   cx,30</p><p>loop1: push  cx</p><p>​    mov   cx,30</p><p>​    mov   si,0</p><p>​    mov   ax,grade[di]</p><p>​    mov   dx,0</p><p>loop2: cmp   grade[si],ax</p><p>​    jbe   go_on</p><p>​    inc   dx</p><p>go_on: add   si,2</p><p>​    loop    loop2</p><p>​    pop   cx</p><p>​    inc   dx</p><p>​    mov   rank[di],dx</p><p>​    sdd   di,2</p><p>​    loop    loop1</p><p>​    ret</p><p>main  endp</p><p>cseg    ends</p><p>​    end   start</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 微机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理复习</title>
      <link href="posts/d157d84d/"/>
      <url>posts/d157d84d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>1、简述存储器的分段结构，并简要说明ROM和RAM的区别?</p><p>答： (1)为了对1M存储单元进行管理，8086对存储器进行分段管理，分为许多逻辑段每个逻辑段最多可达64K个存储单元，允许它们在整个存储空间中浮动，各个逻辑段之间可以紧密相连，也可以互相重叠 。(2)ROM表示的是<a href="https://www.baidu.com/s?wd=%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">只读存储器</a>，ROM只能被CPU读取，而不能由CPU任意写入，断电后信息不会丢失。RAM表示的是随机读写存储器，可被CPU随机的读写，用于存放将要被CPU执行的用户程序、数据以及部分系统程序，断电后存放的信息将丢失。</p><p>2、试说明指令周期、总线周期、时钟周期的基本概念和三者的关系?</p><p>答：(1)指令周期：微处理器执行一条指令的时间(包括取指令和执行指令所需的全部时间。</p><p>(2)   总线周期：微处理器通过外部总线对存储器或I/O端口进行一次读写操作的过程。</p><p>(3)   (3)时钟周期：系统主时钟一个周期信号所持续的时间。           关系:一个指令周期由若干个总线周期组成;一个总线周期由若干个时钟周期组成。</p><p>3、已知中断向量表中004CH单元中的内容为9918H,004EH单元中的内容为4268H,试说明:这些单元对应的中断类型号是什么?该类型中断的服务程序入口地址是什么?</p><p>答：根据中断服务程序入口地址表在内存中的位置可知,调用中断类型号为 N 的中断程序时,可将中断类型号 N 乘以 4 求出中断矢量的首字节地址 4N。已知该中断向量的首字节为 004CH,所以,中断类型号为 13H。 根据该中断向量表中的 4 个字节内容,可知该类型中断服务程序的入口地址 为:PA=CS×10H+IP=4268H×10H+9918=4BF98H</p><p>4、输入接口常接有三态缓冲器，而输出接口常接有锁存器，试述其理由?</p><p>答：为了协调高速CPU与慢速的外设之间的速度匹配，以及避免数据的丢失，接口中一般设有数据锁存器或缓冲器。在输出接口中，一般都要安排锁存器，以便锁存输出数据，使较慢的外设有足够的时间进行处理，避免数据丢失，而CPU和总线可以回头去忙自己的其它工作。在输入接口中，一般需要安排缓冲隔离环节，如三态门。特别是当有多个外设与CPU进行数据交换时，只有当CPU连通时，才允许某个选定的输入设备才进行数据传输，而其它外设此时数据总线隔离，避免干扰数据的传输。</p><p>5、指出下列指令中源操作数的寻找方式;</p><ol><li><p>MOV AX, ES: [2009H]；直接寻址方式</p></li><li><p>MOV AX, [BP+DI+2009H]；基址加变址相对寻址方式</p></li><li><p>MOV AX,[BX]；寄存器间接寻址方式</p></li><li><p>MOV AX, 2009H；立即数寻址方式</p></li><li><p>MOV AX, DX；寄存器寻址方式</p></li></ol><p>\6. 假设在数据段中有一字符串 stringl,其长度为20，要求把它们传送到附加段string2中，假设DS和ES都初始化在同一数据段中。</p><p>答：LEA SI,STRING1</p><p>LEA DI,STRING2</p><p>MOV CX,20</p><p>CLD</p><p>REP MOVSB</p><p>HLT</p><p>7.若要测试AL寄存器中第2位是否为1 (但不能改变AL的值)，如为1刚转移到EXIT去执行(不考虑做什么)。否则将其第5,3位变反。</p><p>答：MOV  DL, AL</p><p>TEST  DL, 00000100B</p><p>JNZ  EXIT</p><p>XOR  AL, 00101000B</p><p>EXIT:</p><p>8、何谓堆栈?试述其作用与特点?</p><p>答：堆栈是存储器中的一个区域，一般≦64KB，主要用于存放调用子程序时保存的入口信息和存放中断时所需保存的断点现场信息，堆栈操作主要是入栈和出栈两种，采用“先入后出”或“后入先出”和“向下增长”原理进行操作。</p><p>9.通常解决中断优先级的方法有哪儿种?各有什么优缺点？<br>答：软件查询法。优点：节省硬件。缺点：响应速度较慢。</p><p>硬件排队电路法。优点：可实现中断嵌套。缺点：硬件上需要做大量工作。</p><p>专用中断控制芯片法。优点：可解决复杂系统的中断优先级管理。缺点：操作复杂。</p><p>10.指出下列指令的错误<br>POP CS ; CS不能作为POP指令的操作数。<br>INC [CX];寄存器间接寻址方式址不能用CX，只能为SI、DI、BX。</p><p>MOV 2012H，DX;立即数不能为目的操作数。</p><p>OUT 2008H,AL；端口地址大于255应先将地址存放在DX中。</p><p>ROR AX,5；移位次数大于1应先将其放在CL中。</p><p>11、8086的储存器空间最大可以为多少?怎样用16位寄存器实现对20位地址的寻址? (5分)</p><p>答：1M字节；8086引入分段管理机制，当CPU寻址某个存储单元时，先将段寄存器内的内容左移4位，然后加上指令中提供的16位偏移地址形成20位物理地址。</p><p>12.“8086执行了一个总线周期”是指8086 做了哪些可能的操作?基本总线周期如何组成?在一个典 型的读存储器总线周期中，地址信号、ALE信号、RD信号、数据信号分别在何时产生?</p><p>答：（1）是指8086对片外的存储器或I/O接口进行了一次访问，读写数据或取指令。<br>（2）基本总线周期由4个时钟周期组成，分别记为T1、T2、T3、T4。<br>（3）地址信号、ALE信号在T1周期内产生，RD信号在T2周期内产生，数据信号一般在T3内产生，若T3来不及提供数据，可在某Tw内产生有效数据。</p><p>13.8086，8088在什么时候及什么条件下可以响应一个外部INTR中断请求？中断向量表在存储器的什么位置，向量表的内容是什么？ 8086如何将控制转向中断服务程序？</p><p>答：（1）8086/8088在当前指令执行完且IF=1的情况下可以响应一个外部INTR中断请求。</p><p>（2）中断向量表在存储器的0段0000—03FFH区域，向量表存放中断服务程序的入口地址。</p><p>（3）8086/8088响应INTR中断请求时，首先在连续的两个总线周期中发出INTA负脉冲，在第二个INTA信号期间，中断源经数据总线向8086/8088送出一字节中断向量“类型码”。8086/8088收到“类型码”后将其乘4形成中断向量表的入口，从此地址开始的4个单元中读出中断服务程序的入口地址（IP、CS），8086/8088从此地址取指令执行，将控制转向中断服务程序。</p><p>14.8255A的方式选择字和C口置位/复位字都写入什么端口?用什么方式区分它们？</p><p>答：8255A的方式选择字和置位复位字都写入控制端口（写入控制字寄存器中）。用特征位D7区分， D7=1，为方式选择控制字， D7=0，为C口的按位置位/复位。<br>15.指出下列指令的错误(5分)</p><p>(1)SUB AH，BX:数据类型不同</p><p>(2)ADD OAH,BL:立即数不能作为目的操作数</p><p>(3)MOV CS,AX :CS不能作为目的操作数</p><p><img src="https://i.loli.net/2021/04/27/qiPJglyhOxLXUo6.jpg" alt="img" loading="lazy">(4)MOV AX，[SI][DI]:无此种组台</p><p>(5)MOV BYTE PIR[BX],999：999超过8位</p><p>16.用256*4位RAM芯片和74LS139 (2:4译码器)构成一个1kb的存储器子系统，试计算需要256X4位RA芯片多少个?这些芯片要组成几组才能满足要求?试画出存储器系统与CPU的连接图?</p><p>17.假设有一组字节数据:5，-4，0，100，-51，99试编写一程序，判断:每个数是否大于0?等于0?小于0并输出判断结果，即:当数据大于0时，运行程序后在屏幕上显示y=1,当数据等于0时，输出y=0.当数据小于0时，输出y=-1.根据本题的判断，系统最后运行结果为y=1，y=-1，y=0，y=l，y=-1，y=1或者为其它格式均可。</p><p>答：DATA SEGMENT</p><p>​    X DB 5,-4,0,100,-51,99</p><p>DATA1 DB ‘Y=1’,0DH,0AH,’$’</p><p>DATA2 DB ‘Y=0’,0DH,0AH,’$’</p><p>DATA3 DB ‘Y=-1’,0DH,0AH,’$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV SI,OFFSET X</p><p>CLD</p><p>MOV CX,6</p><p>CHECK:</p><p>MOV AL,[SI]</p><p>CMP AL,00H</p><p>JE LOOP1</p><p>JG LOOP2</p><p>MOV DI,OFFSET DATA3</p><p>JMP DOWN</p><p>LOOP1:</p><p>MOV DI,OFFSET DATA2</p><p>JMP DOWN</p><p>LOOP2:</p><p>MOV DI,OFFSET DATA1</p><p>DOWN:</p><p>MOV DX,DI</p><p>MOV AH,09H</p><p>INT 21H</p><p>INC SI</p><p>LOOP CHECK</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>\18. 某微机系统的存储器地址空间为A8000H-CFFFFH,若采用单片容量为16K*1位的SRAM芯片，问:系统存储容量为多少?组成该存储系统共需该类芯片多少?整个系统芯片组应为多少？</p><p>答:（1）该计算机系统的存储器地址空间为 A8000H~CFFFFH，系统存储容量为：</p><p>（2）单片容量为 16K*1 为的 SRAM 芯片的存储容量为 16Kbit=2KB</p><p>组成该存储系统共需该类芯片 160KB/2KB=80 个</p><p>（3）系统位宽为 16bit，则每组芯片组需要 16 个单片容量为 16K*1 为的   SRAM芯片所有整个系统应分为 80/16=5 组芯片</p><p>19.编写程序，要求程中运行后在屏幕上输出字符串&quot;How are you！&quot;<br>答：DATA SEGMENT</p><p>BUF DB ‘How are you!$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV DX,OFFSET BUF</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>20.已知某系统中8253的连接如下图所示，要求通道1的CLK1接4MHZ的信号。OUT1输出周期为10ms的方波。(10 分)<br>（1）8253各通道及控制寄存器的地址是多少? (2分)</p><p>（2）该计数器的方式控制字和计数初值各为多少? (4分)</p><p>（3）编写8253的初始化程序。（4分）</p><p><img src="https://i.loli.net/2021/04/27/7QbWuVLPkqKBZy9.jpg" alt="img" loading="lazy"></p><p>解：略</p><p>21.编写一程序段，统计数组num中大于0，等于0，小于0的数的个数，并分别存入plus、zero、negative三个单元中。其中给出了数据段的定义如下。<br>DATA SEGMENT<br>num DB -1、0、3、-6、7、23、0、-50、3、1<br>plus DB ？</p><p>zero DB ?</p><p>negative DB ?</p><p>答：DATA SEGMENT</p><p>NUM DB -1,0,3,-6,7,23,0,-50,3,1</p><p>plus DB ‘0’,0DH,0AH,’$’</p><p>zero DB ‘0’,0DH,0AH,’$’</p><p>negative DB ‘0’ ,0DH,0AH,’$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV SI,OFFSET NUM</p><p>CLD</p><p>MOV CX,10</p><p>CHECK:</p><p>MOV AL,[SI]</p><p>CMP AL,00H</p><p>JE LOOP1</p><p>JG LOOP2</p><p>INC negative</p><p>JMP DOWN</p><p>LOOP1:</p><p>INC zero</p><p>JMP DOWN</p><p>LOOP2:</p><p>INC plus</p><p>DOWN:</p><p>INC SI</p><p>LOOP CHECK</p><p>MOV DX,OFFSET plus</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV DX,OFFSET zero</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV DX,OFFSET negative</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>22、用2114（1K<em>4位）SARM芯片组一个容量为4K</em>8位的存储器，要几片2114？分成几组?每组几片?地址线如何分配?请面出简单连接图?</p><p><img src="https://i.loli.net/2021/04/27/pdbKQlw3H1rajf6.jpg" alt="@`~K7J8T70_8FP)FOOC@T1U" loading="lazy">答：共需（4/1）*（8/4）=8个芯片，分成4组，每组两片。<br>用A0-A9,10跟地址线对每组芯片进行片内寻址，同组芯片应被同时选中，故同组芯片的片选端应并联在一起。用2-4译码器对两根高位地址线A10、A11译码，产生四根片选信号线，分别与各组芯片的片选端相连。</p><p>23.8253通道2接有一发光二极管， 要使发光二极管以点亮3秒，熄灭3秒的间隔工作，请编程实现。( 8253 各通道地址分别为FFE9H -FFEFH或FFE8H一FFEEH, 选择可能的地址)</p><p><img src="https://i.loli.net/2021/04/27/ExOtYbrUAN7Xzqj.jpg" alt="33" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 微机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boot的烧写</title>
      <link href="posts/fd45d1aa/"/>
      <url>posts/fd45d1aa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="使用其他arduino板-烧写">使用其他Arduino板 烧写</h3><p>使用我们可以正常使用的Arduino 开发板也可作为烧写器给单片机芯片烧写BootLoader。在手上并没有如上2种方法的烧写/下载器等工具的时候，我们可以采用该种方法来完成Arduino BootLoader 的烧写。</p><p>在这里我们采用一块Arduino UNO 开发板作为烧写器对待烧写单片机进行Arduino BootLoader 的烧写。</p><h4 id="1-连接方式">（1）连接方式</h4><p>将Arduino 的 数字11、12、13引脚对应与待烧写的数字11、12、13引脚相连，UNO 的10号引脚连接到待烧写的RESET引脚上，并将UNO 板上的5V、GND接口与待烧写板的5V、GND分别相连。</p><p><em>也有说法称，当被烧写的电路板或对应最小系统电路为Arduino UNO 时，需要使用一个10uf的电容连接待烧写电路板的reset和GND。笔者未进行实验。</em></p><table><thead><tr><th>作为烧写器的Arduino UNO 板</th><th>待烧写单片机芯片/电路板</th></tr></thead><tbody><tr><td>D10</td><td>RESET</td></tr><tr><td>D11</td><td>D11</td></tr><tr><td>D12</td><td>D12</td></tr><tr><td>D13</td><td>D13</td></tr><tr><td>5V</td><td>5V</td></tr><tr><td>GND</td><td>GND</td></tr></tbody></table><h4 id="2-烧写arduinoisp固件">（2）烧写ArduinoISP固件</h4><p>1.将作为烧写器的Arduino UNO板通过USB线连接到电脑，打开Arduino IDE 。</p><p>2.选择并设置好开发板型号、处理器及COM口。（注意要选择的型号为作为烧写器的Arduino 型号）</p><p>3.在工具栏选择-&gt;文件-&gt;示例-&gt;11.Arduino ISP-&gt;ArduinoISP，打开ArduinoISP程序，编译（验证）、上传到开发板中。<br><img src="https://arduino.nxez.com/wp-content/uploads/2018/08/20180827224328520.png" alt="img" loading="lazy"></p><h4 id="3-bootloader烧写">（3）BootLoader烧写</h4><p>1.在在工具栏选择-&gt;工具-&gt;开发板型号，选择待烧写的Arduino型号。在工具-&gt;处理器，选择正确的处理器型号。</p><p>2.在工具-&gt;编译器 中，选择Arduino as ISP。</p><p><img src="https://arduino.nxez.com/wp-content/uploads/2018/08/20180827224328881.png" alt="img" loading="lazy"><br>3.点击 工具-&gt;烧录引导程序，等待下方提示烧录成功。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习</title>
      <link href="posts/4f95e9f6/"/>
      <url>posts/4f95e9f6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug_arduino_固件</title>
      <link href="posts/18a167d7/"/>
      <url>posts/18a167d7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> bug的来源十分简单，github上的那个grbl例程包里面有个小问题。那个grbl的包只要刷进去开发板，你的开发板就不能再写入其他程序了。是不是很诡异  </center><span id="more"></span><p><img src="https://i.loli.net/2021/04/18/3mMUzEtJoV6pyR4.png" alt="" loading="lazy"></p><p><img src="https://i.loli.net/2021/04/18/cot1SMRln6zvNBE.png" alt="" loading="lazy"></p><p>包括arduino ide本身也不能再次刷进去程序了，很是诡异。一些老哥说是bootloader给刷掉了，改天刷一个看看是否能还原。</p><p>就目前的项目来看，只能再买一个开发板了。日了</p><p><img src="https://i.loli.net/2021/04/18/YC1wpWbiaUEeGRq.png" alt="" loading="lazy"></p><p>再也不刷这个包了。。。。。。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小笑话_1</title>
      <link href="posts/85ba8d1d/"/>
      <url>posts/85ba8d1d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210611113213.png" alt="" loading="lazy"></p><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些想法</title>
      <link href="posts/2556b57a/"/>
      <url>posts/2556b57a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  都说人闲着的话能闲出来毛病，我为啥一闲下来就有一些奇怪的想法。。。。 </center><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">背景音乐:</span><br><span class="line">【呐呐呐——镜音；初音】</span><br></pre></td></tr></table></figure><audio id="audio" controls="" preload="none"><source id="mp3" src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/music/%E3%80%90%E9%8F%A1%E9%9F%B3%E3%83%AA%E3%83%B3%E3%83%BB%E5%88%9D%E9%9F%B3%E3%83%9F%E3%82%AF%E3%80%91%E5%91%90%E5%91%90%E5%91%90%E3%80%90%E3%83%94%E3%83%8E%E3%82%AD%E3%82%AA%E3%83%94%E3%83%BC%E3%80%91%20.mp3"></audio><h4 id="idea">IDEA</h4><h4 id="1-迷你打印机">1.迷你打印机</h4><p>虽然这个玩意早就有了，但是我还是想要搞一个。</p><p>原因：</p><p>之前需要写很多报告之类的东西，动不动就成千上万字，很难受。但是还tm不让打印，你说抄那玩意干啥?你又不看，我们抄下来也不过脑子，实验也是水一下，图个啥吧。起初我是想搞个之前网上很火的那种写字机来着（并且我也搞了）。</p><img src="https://i.loli.net/2021/04/17/4cvlsnkxWe8iLFJ.jpg" alt="IMG_20210413_222131_1" style="zoom:67%;" / loading="lazy"><p>这个是半成品，再加个小舵机写字模块就行了，问题不大。但是这个玩意有个问题，就是写字太慢了，毕竟拿笔写哪里有直接印的快。</p><p>于是乎，做个小打印机的想法就出来了。就是那种扫描一下识别字体，然后修正成自己的字体，再打印出来的那种小玩意。但是仔细想想，这种东西好像也不适合偷懒写报告。<strong>BUT</strong>他是不是很适合做笔记呢？？？</p><p><strong>是不是？</strong></p><p>有时候，我们做笔记其实就是把课本上的照抄一下，是不是有点浪费时间，并且有的图表我们也是画不了太规范.使用工具进行绘制的话又太浪费时间。直接打印的话，还要编辑文档（word，cad啥的）然后只能打印到打印纸上，想弄到笔记上还要进行裁剪粘贴，时间都浪费了。如果有这样一个小玩意，扫描一下原文本就可以直接打印在我们的笔记上，岂不美哉。省了时间还不用裁剪之类的操作就可以把很多东西放到我们的笔记上（还是纸质的）。<strong>COOL!</strong></p><p>这个玩意太极客了，就是目前做不出来。。。。。</p><h4 id="2-还没想好名字">2.还没想好名字</h4><p>大概就是一种特殊的传输结构可以快速还原一些地形和形状，有点像我们玩的那种橡皮泥插上牙签的一个玩意。具体有啥用，还没想好，以后再加。</p><hr><p>下面的是一些别的大佬的玩具（真厉害），改天没事了复刻一个！</p><p><img src="https://i.loli.net/2021/04/17/VWwmqOoiHckdgvy.jpg" alt="2" style="zoom:67%;" / loading="lazy"><img src="https://i.loli.net/2021/04/17/lo8Xai92z1CjQdL.jpg" alt="3" style="zoom:67%;" / loading="lazy"></p><p>材料不够以后再复刻。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论系统</title>
      <link href="posts/5f723dc9/"/>
      <url>posts/5f723dc9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210611112427.png" alt="2" loading="lazy"></p><span id="more"></span><h3 id="bug">BUG</h3><p>之前的评论系统在本地可以运行，但是部署到服务器之后就gg了，但是使用valine的话，不是很安全（因为信息没有加密传输），所以博客的评论系统挂了一段时间。<strong>今天</strong>，<strong>我tm才发现</strong>域名忘给白名单，以及忘了配置评论系统运行的环境（第一次用云端服务，不熟悉）。</p><p>总之，tm的解决了。哈哈哈哈</p><p><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210611112441.png" alt="2" loading="lazy"></p><p>这是我之前自己测试的时候的通知机器人（当然现在ip不会发给我），真不戳。</p><p>就是不知道这系统会不会抽风（毕竟没看手册）</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床大升级——picgo</title>
      <link href="posts/91c893f/"/>
      <url>posts/91c893f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 所以我使用了picgo  </center><span id="more"></span><h3 id="使用原因">使用原因</h3><p>之前的图片都是要打开网站，例如</p><p><img src="https://i.loli.net/2021/04/16/Ii28fB16ctFTVqU.png" alt="" loading="lazy"></p><p>然后手动上传，再打开之后复制链接，就像这样</p><img src="https://i.loli.net/2021/04/16/XZw2KBRjSHx6Idi.png" style="zoom: 67%;" / loading="lazy"><img src="https://i.loli.net/2021/04/16/Nn6O8ljI1rhiesc.png" style="zoom:67%;" / loading="lazy"><p>很麻烦，并且每次都要开开关关网页啦，编辑器啦</p><p>经过查询我用的markdown编辑器typora支持自动上传（芜湖起飞）</p><img src="https://i.loli.net/2021/04/16/7iBedgzM4LJs2T3.png" alt="Snipaste_2021-04-16_11-14-12" style="zoom:67%;" / loading="lazy"><p>于是乎就设置了一下，其实也很简单，去github下载picgo对应的版本然后注册图床账号，把接口放在picgo即可。剩下的就是点点鼠标的事情。</p><img src="https://i.loli.net/2021/04/16/xuHjwcayAzo2DSv.png" alt="picgo界面" style="zoom:67%;" / loading="lazy"><p><strong>真不戳！</strong></p><p>另外配合snipaste使用效果绝佳，因为snipaste有一个复制图片链接按键，picgo有一个快速上传的快捷键，两个相配合，绝了。甚至你可以自己搞个鼠标宏，一键解决。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bug_arduino_timeout</title>
      <link href="posts/88471254/"/>
      <url>posts/88471254/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  前面几天搞了个激光雕刻机玩玩，但是玩了一半的时候控制板gg了，所以我又刷了下固件，然后。。。。。 </center><p><img src="https://i.loli.net/2021/04/16/iD3tlZvuJBwzaex.png" alt="Snipaste_2021-04-16_09-29-21" loading="lazy"></p><span id="more"></span><p>Debug :</p><p>排除了bootload的问题</p><p>排除了芯片型号的问题</p><p>排除了驱动的问题</p><p>排除了接线的问题</p><p>排除了软件（上位机）问题</p><p>未排除下位机是否存在问题</p><p>未排除开发板是否短路</p><p>未排除开发板是否有故障</p><p>没有找到解决方案，打算换个控制系统试一下。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何学习（1）</title>
      <link href="posts/3bd094ff/"/>
      <url>posts/3bd094ff/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 这个方法我是从知乎上看到的，文章内容略有改动。  </center><p>原文<a href="https://www.zhihu.com/question/30178891">传送门</a></p><span id="more"></span><h3 id="罗斯福专注力"><strong>罗斯福专注力</strong></h3><p>第26届美国总统<strong>西奥多·罗斯福</strong>，昵称Teddy。这位总统在年轻的时候是一个金牌学霸，他在哈佛大学求学期间，不但学业出色，而且涉猎广泛，包括拳击、摔跤、健身、舞蹈、读诗会等等，而且对大自然特别着迷，喜欢解剖动植物制作标本，在大一暑假的时候就出版了一本鸟类研究的著作。为了满足这些广泛的兴趣，罗斯福不得不大大压缩用于专业学习的时间，他的传记作家推测他每天最多只有1/4的时间用于学习。但他的成绩并不差，而且经常获得奖学金。(酸了)</p><p>传记作家用了一个很形象的词来描述罗斯福的专注程度：blistering intensity，就是在健身房撸铁的时候，要把手磨出血泡那种强度，等同于电脑游戏里的死亡模式。给自己设定一个几乎不可能完成的任务，然后用尽全力去完成。比如阅读，如果一篇文章平时需要10分钟读完，就设定一个5分钟的定时器，尽力在不影响理解的前提下快速读完；再比如背单词，如果平时能背20个单词，就要挑战50个。可以把设定的目标告诉别人，或者通过挑战、竞赛的方法给自己一些外部压力，来强迫自己完成目标。一开始的时候可能会很吃力，但是经过不断的训练以后你会为自己的潜能感到震惊，因为人的大脑和肌肉一样，是能够通过训练得到提升的。学习的目的并不只是掌握知识而已，还应该有意识提高学习的能力（包括深度思考理解问题的能力），知识本身更新换代的速度很快，但是学习研究的能力却是终身受用的。我们既要「<strong>鱼</strong>」也要「<strong>渔</strong>」。</p><p>罗斯福的经验告诉我们高效的学习效率离不开极高的专注力。互联网上碎片化的信息导致很多现代人出现了<strong>注意力缺失症</strong>（ADD-Attention Deficit Disorder）。说实话我就有这个毛病，特别是用到电脑的时候，只要qq是登录状态就老是想去查看一下，并且bilibili的更新订阅也时不时打扰分散我的注意力。以及我喜欢在学习的时候听点小曲，现在想来也是极其分散注意力。想要做到十分专注，从注意力缺失慢慢调整到专注力极高（想想你的高中时光）是一个十分痛苦的过程。但是会受益良多。我觉得可以慢慢加量，首先是设置一个时间段，比如四十分钟用于读书。你就找一个倒计时的钟表（手机上有很多app有这个功能），然后这四十分钟就别去做其他的事情了。中间发生了一些事情打断了读书的这个过程的话，就拿个<strong>小本本</strong>记录下来，看看是什么事情打断了，有哪些是可以避免下次不会遇到的，有哪些是可以延缓的。做到统筹规划。</p><h3 id="费曼方法"><strong>费曼方法</strong></h3><p>费曼是20世纪著名的理论物理学家，在研制原子弹的曼哈顿计划中担任重要角色，曾获诺贝尔物理学奖。除了在物理研究领域中作出巨大贡献之外，他在教学方面也有独到的见解。他提出的「4步学习」技巧是非常有效的学习方法：</p><ol><li><strong>Pick a topic you want to understand and start studying it.</strong> 选择一个学习主题，开始阅读关于它的所有资料，做必要的笔记。</li><li><strong>Pretend to teach your topic to a classroom. Make sure you’re able to explain the topic in simple terms.</strong> 假装你在教室里向学生解释这个主题，用尽量简单的词汇去描述它，力求学生能听懂。（听众可以是人，也可以是你的毛绒玩具）。</li><li><strong>Go back to the books when you get stuck.</strong> 当你讲解卡壳的时候，再回头阅读资料，弄清楚再继续讲解。</li><li><strong>Simplify and use analogies.</strong> 回到第一步，试图用更加简洁、直白的语言去讲述概念。</li></ol><p>说实话，这个方法我们也经常遇到。上课时的数学题，给别人讲一遍，脑中的思路会更加清晰。我们以前也经常听到一种说法，叫做「把书读薄」。能用自己的语言，用最直白的词汇去讲述一个概念，才说明你对它的理解足够深刻。而费曼则提供了一种有效的实践方法。</p><h3 id="达芬奇的笔记"><strong>达芬奇的笔记</strong></h3><p>说到达芬奇，大多数人的反应都会立刻想到「蒙娜丽莎」这幅名画。但实际上，列奥纳多·达·芬奇是一位在绘画、雕刻、医学、科学、机械等各个方面集大成的天才大师，留下了令后人惊叹的智慧宝藏与谜团。他留下的笔记能部分解释他所取得的成就，欣赏一下：</p><p><a href="https://imgtu.com/i/cN1akV"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/cN1akV.jpg" alt="cN1akV.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1wfU"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/cN1wfU.jpg" alt="cN1wfU.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1twq"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/cN1twq.jpg" alt="cN1twq.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1dYT"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/cN1dYT.jpg" alt="cN1dYT.jpg" loading="lazy"></a></p><p>明显的可以看出，达芬奇的笔记特点十分明显。我们的笔记大部分都是列表格式，会使用思维导图来记笔记都算比较高级了。但是达芬奇的笔记图文并茂，充分调动了逻辑思维和形象思维，让左右脑都活跃起来。这种理性加感性、艺术与科学融合的创造性思考方法，也许就是破解达芬奇天才的密码吧。大佬就是大佬（酸了）</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小笑话_0</title>
      <link href="posts/85ba8d1c/"/>
      <url>posts/85ba8d1c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://imgtu.com/i/cEjlGR"><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/cEjlGR.png" alt="cEjlGR.png" loading="lazy"></a></p><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资源网站</title>
      <link href="posts/a7bf6cfe/"/>
      <url>posts/a7bf6cfe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>一、国内学习资源<br>1、中国大学MOOC（有app） <a href="https://www.icourse163.org/">https://www.icourse163.org/</a><br>2、中国职教MOOC <a href="https://www.icourse163.org/vemooc">https://www.icourse163.org/vemooc</a><br>3、学堂在线（有app） <a href="https://www.xuetangx.com/">https://www.xuetangx.com/</a><br>4、网易公开课（有app） <a href="https://open.163.com/">https://open.163.com/</a><br>5、网易云课堂（有app） <a href="https://study.163.com/">https://study.163.com/</a><br>6、腾讯课堂（有app） <a href="https://ke.qq.com/">https://ke.qq.com/</a></p><p>二、国外学习资源<br>1、译学馆（有app） <a href="https://www.yxgapp.com/">https://www.yxgapp.com/</a><br>2、MIT Open Courseware <a href="https://ocw.mit.edu/">https://ocw.mit.edu/</a><br>3、edX（有app） <a href="https://www.edx.org/">https://www.edx.org/</a><br>4、coursera（有app） <a href="https://www.coursera.org/">https://www.coursera.org/</a><br>5、Udemy（有app） <a href="https://www.udemy.com/">https://www.udemy.com/</a></p><p>三、学习资源聚合平台<br>1、爱课程 <a href="https://www.icourses.cn/">https://www.icourses.cn/</a><br>2、Coursade <a href="http://www.coursade.com/">http://www.coursade.com/</a><br>3、MOOC中国 <a href="https://www.mooc.cn/">https://www.mooc.cn/</a><br>4、哔哩哔哩（有app） <a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p><p>自媒体需求网站</p><p>1.视频片头动画模板 <a href="https://panzoid.com/">https://panzoid.com/</a><br>2.在线抠图 <a href="https://www.remove.bg/">https://www.remove.bg/</a><br>3.字体下载 <a href="https://www.zitijia.com/">https://www.zitijia.com/</a><br>4.p站 （二次元插画网站） <a href="https://www.pixiv.net/">https://www.pixiv.net/</a><br>5.论文下载 <a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a><br>6.文档格式在线转换 <a href="https://smallpdf.com/">https://smallpdf.com/</a><br>7.录屏投屏  <a href="http://web.airdroid.com/">http://web.airdroid.com/</a><br>8.各大网站热榜 <a href="https://tophub.today/">https://tophub.today/</a><br>9.超清图片壁纸 <a href="https://www.pexels.com/">https://www.pexels.com/</a><br>10.找网站的网站  <a href="http://www.addog.vip/">http://www.addog.vip/</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动控制原理(1)</title>
      <link href="posts/7a16e845/"/>
      <url>posts/7a16e845/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="学习重点">学习重点</h3><ul><li>了解自动控制系统的基本结构和特点及其工作原理；</li><li>了解闭环控制系统的组成和基本环节；</li><li>掌握反馈控制系统的基本要求及反馈控制系统的作用；</li><li>学会分析自动控制系统的类型及本质特征。</li></ul><h3 id="自动控制原理课程的性质和特点">自动控制原理课程的性质和特点</h3><p>自动控制是一门技术学科，从方法论的角度来研究控制系统的建立、分析与设计，《自动控制原理》是本学科的技术基础课。</p><span id="more"></span><h3 id="与其他课程的关系">与其他课程的关系</h3><p><a href="https://imgtu.com/i/6ZilIs"><img src="https://s3.ax1x.com/2021/03/04/6ZilIs.md.png" alt="6ZilIs.md.png" loading="lazy"></a></p><h3 id="开环控制系统和闭环控制系统">开环控制系统和闭环控制系统</h3><h4 id="自动控制">自动控制</h4><p>自动控制是在没有人的直接干预下，利用物理装置对生产设备和工艺过程进行合理的控制，使被控制的物理量保持恒定，或者按照一定的规律变化，例如矿井提升机的速度控制、轧钢厂加热炉温度的控制等等。</p><h4 id="自动控制系统">自动控制系统</h4><p>自动控制系统是为实现某一控制目标所需要的所有物理部件的有机组合体。</p><h4 id="开环控制系统">开环控制系统</h4><p><a href="https://imgtu.com/i/6ZFiOU"><img src="https://s3.ax1x.com/2021/03/04/6ZFiOU.png" alt="6ZFiOU.png" loading="lazy"></a></p><p><a href="https://imgtu.com/i/6ZFmf1"><img src="https://s3.ax1x.com/2021/03/04/6ZFmf1.png" alt="6ZFmf1.png" loading="lazy"></a></p><h4 id="开环控制">开环控制</h4><p>只有输入量对输出量产生控制作用，输出量不参与对系统的控制。</p><h4 id="开环控制特点">开环控制特点</h4><ul><li>输入控制输出－输入和输出之间存在对应关系；</li><li>信号传递时单方向的－输出不参与控制；</li><li>系统没有抗干扰能力。</li></ul><h3 id="闭环控制系统">闭环控制系统</h3><h4 id="人工闭环控制">人工闭环控制</h4><p><img src="https://s3.ax1x.com/2021/03/05/6eD0CF.png" alt="6eD0CF.png" loading="lazy"><em>图片来源于mooc</em></p><h4 id="自动闭环控制">自动闭环控制</h4><p><a href="https://imgtu.com/i/6eDcHx"><img src="https://s3.ax1x.com/2021/03/05/6eDcHx.png" alt="6eDcHx.png" loading="lazy"></a></p><p><a href="https://imgtu.com/i/6eDW4O"><img src="https://s3.ax1x.com/2021/03/05/6eDW4O.png" alt="6eDW4O.png" loading="lazy"></a></p><h4 id="闭环控制-反馈控制-偏差控制">闭环控制（反馈控制、偏差控制）</h4><p>把输出量的一部分检测出来，反馈到输入端，与给定信号进行比较，产生偏差，此偏差经过控制器产生<br>控制作用，使输出量按照要求的规律变化。反馈信号与给定信号极性相反为负反馈，反之为正反馈。</p><h4 id="闭环控制特点">闭环控制特点</h4><ul><li>输入控制输出－输入和输出之间存在对应关系；</li><li>信号传递是双方向的－输出参与控制；</li><li>检测与纠正偏差－具有抗干扰能力。</li></ul><h4 id="闭环控制系统中的基本术语">闭环控制系统中的基本术语</h4><ul><li><p>被控对象:要求实现自动控制的机器、设备或生产过程。</p></li><li><p>被控量或输出量:指被控对象中要求保持给定值、或按给定规律</p></li><li><p>控制量:使系统输出量达到应达到的数值（例如与要求的炉温对应的电压）。</p></li><li><p>扰动量:破坏系统输入量和输出量之间预定规律的信号。</p></li><li><p>反馈量</p></li><li><p>偏差量</p></li><li><p>前向通道或正向通道</p></li><li><p>反馈通道或反向通道</p></li><li><p>实际输出</p></li><li><p>理想输出</p><p><strong>闭环控制系统是《自动控制原理》研究的重点。</strong>(因为开环不好用，经常达不到要求)</p></li></ul><hr><center>END</center><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 自动控制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动控制原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English-listening-training_1</title>
      <link href="posts/d3eaa239/"/>
      <url>posts/d3eaa239/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公民科学</title>
      <link href="posts/8fdbaa14/"/>
      <url>posts/8fdbaa14/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Just 读 it ！</title>
      <link href="posts/1ae67c5b/"/>
      <url>posts/1ae67c5b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用markdown画图</title>
      <link href="posts/7f30ae8c/"/>
      <url>posts/7f30ae8c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 有需要的话直接点击标题链接即可！  </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电机学-绪论</title>
      <link href="posts/4cc868c2/"/>
      <url>posts/4cc868c2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://imgtu.com/i/6EpD3D"><img src="https://s3.ax1x.com/2021/03/03/6EpD3D.jpg" alt="6EpD3D.jpg" loading="lazy"></a></p><p>其实根据b乎上面的大佬的话来看，我校的电机学的授课体系与方法不是很适合我，我初到电气这边，对整个体系还没有什么了解。所以根据b乎大佬的意见，应该先学<a href="http://books.google.com.sg/books/about/Electric_Motors_and_Drives.html?id=gbIDM60AvGAC&amp;redir_esc=y">这本书</a>（谷歌资源，需要特殊方法，你懂的）。想学好这门课，需要<strong>高等数学</strong>，<strong>大学物理</strong>，<strong>电路理论</strong>，<strong>电磁场</strong>基础。就很烦QAQ</p><p>关于我的话，到此为止，想清楚了解电机学是个啥玩意，以及怎么学，那就到<a href="https://www.zhihu.com/question/23537799"><strong>这</strong></a>看看吧。因为在车上，没带书先整理这一些。</p><h3 id="电机的基本概念">电机的基本概念</h3><p>电机是依据<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%84%9F%E5%BA%94%E5%AE%9A%E5%BE%8B/742673?fr=aladdin">电磁感应定律</a>和<a href="https://www.diangon.com/wenku/dgjs/dgjc/201412/00016790.html">电磁力定律</a>,由电路和磁路构成的能实现机电能量转换或信号传递与转换的<strong>装置</strong>。</p><p>也就是说电机是个看到到摸得着的东西，是实际存在的。所以电机学这门课也充满了很多实际应用的哲学。</p><span id="more"></span><h3 id="分类">分类</h3><p><a href="https://imgtu.com/i/6kgZRJ"><img src="https://s3.ax1x.com/2021/03/02/6kgZRJ.md.png" alt="6kgZRJ.md.png" loading="lazy"></a></p><p><a href="https://imgtu.com/i/6kgBo8"><img src="https://s3.ax1x.com/2021/03/02/6kgBo8.md.png" alt="6kgBo8.md.png" loading="lazy"></a></p><p>关于分类有很多，这两个是我用的书上的分类，也是最常用的分类。</p><p>由此我们可以看到，电机的种类有很多，不仅仅只是旋转电机，广义上来看，电路和磁路构成的能实现机电能量转换或信号传递与转换的<strong>装置</strong>都叫电机，所以功放也是电机（bushi）。</p><h3 id="材料">材料</h3><ul><li>导电材料：铜线等（构成电路）</li><li>导磁材料：硅钢片等（构成磁路）</li><li>结构材料：铸铁、铸钢、与钢板（用于承受重量）</li><li>绝缘材料：聚酯漆（清漆也可以的）、环氧树脂（胶佬狂喜）、玻璃丝带等</li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 电机学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电机学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些语法的备忘录小本本</title>
      <link href="posts/30c2270c/"/>
      <url>posts/30c2270c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>首先是最基本的语法<br><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown基本用法</a><br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20210810154211.png" alt="" loading="lazy"></p><p><em><span id="more"></span></em></p><h4 id="markdown-列表">Markdown 列表</h4><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<em><strong><strong>)、加号(</strong>+</strong>)或是减号(</em><em>-</em>*)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h5 id="列表嵌套">列表嵌套</h5><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/8ED795DA-F124-4E70-BA71-57CD9CF958A4.jpg" alt="img" loading="lazy"></p><h4 id="图片注释">图片注释</h4><p>你可以遵循如下写法来对图片进行注释。</p><p>markdown图片地址_注释</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Audits - Lighthouse</span>](<span class="link">https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png</span>)<span class="emphasis">_谷歌浏览器 Audits - Lighthouse 检测分数_</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/19/2bOIPC3Wv4Gxetm.png" alt="img-caption-example.png" loading="lazy"></p><h4 id="视频局部播放器插入方法之一">视频局部播放器插入方法之一</h4><p>利用了xbeibeix的api实现</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b video_pc&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://xbeibeix.com/api/bilibili/biliplayer/?url=</span></span></span></span><br><span class="line"><span class="xml">https://www.bilibili.com/video/BV1RW411S7As/&quot; </span></span><br><span class="line"><span class="xml">frameborder=&quot;0&quot;</span></span><br><span class="line"><span class="xml">framespacing=&quot;0&quot;</span></span><br><span class="line"><span class="xml">allowfullscreen=&quot;true&quot;</span></span><br><span class="line"><span class="xml">style=&quot;position: middle;</span></span><br><span class="line"><span class="xml">width=&quot;100%&quot; </span></span><br><span class="line"><span class="xml">height=&quot;600&quot; </span></span><br><span class="line"><span class="xml">controls=&quot;controls&quot; </span></span><br><span class="line"><span class="xml">autoplay=&quot;autoplay&quot;</span></span><br><span class="line"><span class="xml">quality=&quot;high&quot;&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="视频全局化插入">视频全局化插入</h4><p>取消api的使用，其余语法一致</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b video_pc&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="xml">https://www.bilibili.com/video/BV1RW411S7As/&quot; </span></span><br><span class="line"><span class="xml">frameborder=&quot;0&quot;</span></span><br><span class="line"><span class="xml">framespacing=&quot;0&quot;</span></span><br><span class="line"><span class="xml">allowfullscreen=&quot;true&quot;</span></span><br><span class="line"><span class="xml">style=&quot;position: middle;</span></span><br><span class="line"><span class="xml">width=&quot;100%&quot; </span></span><br><span class="line"><span class="xml">height=&quot;600&quot; </span></span><br><span class="line"><span class="xml">controls=&quot;controls&quot; </span></span><br><span class="line"><span class="xml">autoplay=&quot;autoplay&quot;</span></span><br><span class="line"><span class="xml">quality=&quot;high&quot;&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="新增草稿语法">新增草稿语法</h4><p>1、添加草稿：hexo new draft “xx”<br>2、预览草稿：hexo server --draft<br>3、发布草稿：hexo publish draft “xx”</p><h4 id="新增的tag-common语法">新增的tag-common语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs First unique name %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line">**This is Tab 1.**</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line">**This is Tab 2.**</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line">**This is Tab 3.**</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tag-common tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div><h4 id="单元格语法">单元格语法</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>实例</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><h4 id="markdown-高级技巧">Markdown 高级技巧</h4><h5 id="支持的-html-元素">支持的 HTML 元素</h5><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><p>另外有的编辑器自带注入功能，更快</p><h4 id="公式">公式</h4><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>经过渲染后如下</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 248: …\end{vmatrix}$̲{$tep1}{\style{…'>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</p><h4 id="流程图">流程图</h4><p>以下几个实例效果图如下：</p><h5 id="1-横向流程图源码格式："><strong>1、横向流程图源码格式：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><h5 id="2-竖向流程图源码格式："><strong>2、竖向流程图源码格式：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><h5 id="3-标准流程图源码格式："><strong>3、标准流程图源码格式：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h5 id="4-标准流程图源码格式-横向-："><strong>4、标准流程图源码格式（横向）：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;flow</span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line">​&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h5 id="5-uml时序图源码样例："><strong>5、UML时序图源码样例：</strong></h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```sequence</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 对象B你好吗?（请求）</span></span><br><span class="line"><span class="code">Note right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="code">Note left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="code">对象B--&gt;对象A: 我很好(响应)</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 你真的好吗？</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><h5 id="6-uml时序图源码复杂样例："><strong>6、UML时序图源码复杂样例：</strong></h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```sequence</span></span><br><span class="line"><span class="code">Title: 标题：复杂使用</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 对象B你好吗?（请求）</span></span><br><span class="line"><span class="code">Note right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="code">Note left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="code">对象B--&gt;对象A: 我很好(响应)</span></span><br><span class="line"><span class="code">对象B-&gt;小三: 你好吗</span></span><br><span class="line"><span class="code">小三--&gt;&gt;对象A: 对象B找我了</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 你真的好吗？</span></span><br><span class="line"><span class="code">Note over 小三,对象B: 我们是朋友</span></span><br><span class="line"><span class="code">participant C</span></span><br><span class="line"><span class="code">Note right of C: 没人陪我玩</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><h5 id="7-uml标准时序图样例："><strong>7、UML标准时序图样例：</strong></h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span></span><br><span class="line"><span class="code">  sequenceDiagram</span></span><br><span class="line"><span class="code">    participant 张三</span></span><br><span class="line"><span class="code">    participant 李四</span></span><br><span class="line"><span class="code">    张三-&gt;王五: 王五你好吗？</span></span><br><span class="line"><span class="code">    loop 健康检查</span></span><br><span class="line"><span class="code">        王五-&gt;王五: 与疾病战斗</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span></span><br><span class="line"><span class="code">    李四--&gt;&gt;张三: 很好!</span></span><br><span class="line"><span class="code">    王五-&gt;李四: 你怎么样?</span></span><br><span class="line"><span class="code">    李四--&gt;王五: 很好!</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><h5 id="8-甘特图样例："><strong>8、甘特图样例：</strong></h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">%% 语法示例</span></span><br><span class="line"><span class="code">        gantt</span></span><br><span class="line"><span class="code">        dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">        title 软件开发甘特图</span></span><br><span class="line"><span class="code">        section 设计</span></span><br><span class="line"><span class="code">        需求                      :done,    des1, 2014-01-06,2014-01-08</span></span><br><span class="line"><span class="code">        原型                      :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="code">        UI设计                     :         des3, after des2, 5d</span></span><br><span class="line"><span class="code">    未来任务                     :         des4, after des3, 5d</span></span><br><span class="line"><span class="code">        section 开发</span></span><br><span class="line"><span class="code">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span></span><br><span class="line"><span class="code">        设计框架                             :crit, done, after des2, 2d</span></span><br><span class="line"><span class="code">        开发                                 :crit, active, 3d</span></span><br><span class="line"><span class="code">        未来任务                              :crit, 5d</span></span><br><span class="line"><span class="code">        耍                                   :2d</span></span><br><span class="line"><span class="code">        section 测试</span></span><br><span class="line"><span class="code">        功能测试                              :active, a1, after des3, 3d</span></span><br><span class="line"><span class="code">        压力测试                               :after a1  , 20h</span></span><br><span class="line"><span class="code">        测试报告                               : 48h</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><h4 id="markdown-代码">Markdown 代码</h4><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;printf()&#96; 函数</span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><code>printf()</code> 函数</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/C928FDA3-E0A7-4AFF-AB2A-B3AF44F93DF9.jpg" alt="img" loading="lazy"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h4 id="代码区块">代码区块</h4><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>实例如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/55EDFE05-5F27-458E-AFE0-7B96685C9603.jpg" alt="img" loading="lazy"></p><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/6DC89E5C-B41A-4938-97D8-D7D06B879F91.jpg" alt="img" loading="lazy"></p><p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">$(document).ready(function () &#123;</span></span><br><span class="line"><span class="code">    alert(&#x27;RUNOOB&#x27;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/88F52386-2F98-4D7E-8935-E43BECA6D868.jpg" alt="img" loading="lazy"></p><h4 id="思维导图">思维导图</h4><pre><code>&#123;% markmap 300px %&#125;    # Testa    ## test1    ## test2    # Testb    ## test1    ## test2    &#123;%endmarkmap%&#125;</code></pre><p>效果预览</p><div class="markmap-container" style="height:300px;" ><svg class="markmap-svg">{"t":"root","d":0,"v":"","c":[{"t":"heading","d":1,"v":"一级","c":[{"t":"heading","d":2,"v":"1.1"},{"t":"heading","d":2,"v":"1.2"}]},{"t":"heading","d":1,"v":"二级","c":[{"t":"heading","d":2,"v":"2.1"},{"t":"heading","d":2,"v":"2.2"}]}]}</svg></div><h4 id="steam游戏价格部分内嵌">STEAM游戏价格部分内嵌</h4><h5 id="单个游戏">单个游戏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% steamgame appid description %&#125;</span><br><span class="line">appid: Steam 游戏 id.</span><br><span class="line">description(可选): 用于替换默认游戏简介。</span><br></pre></td></tr></table></figure><iframe src="https://store.steampowered.com/widget/4000/?t=description" frameborder="0" width="100%" height="190"></iframe><h5 id="批量游戏">批量游戏</h5><pre><code>&#123;% steamgames %&#125;appidappid&#123;% endsteamgames %&#125;</code></pre><iframe src="https://store.steampowered.com/widget/4000/" frameborder="0" width="100%" height="190"></iframe><iframe src="https://store.steampowered.com/widget/4000/" frameborder="0" width="100%" height="190"></iframe><h4 id="音乐内嵌">音乐内嵌</h4><h5 id="网易云的音乐内嵌；">网易云的音乐内嵌；</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">life</span>&gt;</span></span> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">300</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;https://music.163.com/outchain/player?type=2&amp;id=1347717822&amp;auto=1&amp;height=66&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div align=life> <iframe frameborder="0" marginwidth="0" marginheight="0" width=300 height=86 src="https://music.163.com/outchain/player?type=2&id=1347717822&auto=0&height=66"></iframe></div>`frameborder`：为0关闭边框，为1显示边框<p><code>marginwidth</code>：框架的左边距和右边距</p><p><code>marginheight</code>：框架的上下空白边距</p><p><code>width</code>：<code>iframe</code>的<code>width</code>为宽度</p><p><code>height</code>：<code>iframe</code>的<code>height</code>为高度</p><p><code>src</code>：音乐的外链</p><p><code>id</code>：这是重点，网易云音乐的歌的ID</p><h5 id="其他平台资源内嵌-如腾讯云">其他平台资源内嵌（如腾讯云）</h5><p>mp3资源放在了我的cos里面，通过外链访问（实际上放在公共资源更划算）；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">&quot;mp3&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-1304932877.cos.ap-shanghai.myqcloud.com/music/Vitamin%20String%20Quartet%20-%20I%27m%20Yours.mp3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></table></figure><audio id="audio" controls="" preload="none"><source id="mp3" src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/music/Vitamin%20String%20Quartet%20-%20I%27m%20Yours.mp3"></audio>#### codepen嵌入<ul><li>你甚至还可以嵌入外部代码块在markdown里玩游戏</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;codepen&quot;</span> <span class="attr">data-height</span>=<span class="string">&quot;265&quot;</span> <span class="attr">data-theme-id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">data-default-tab</span>=<span class="string">&quot;js,result&quot;</span> <span class="attr">data-user</span>=<span class="string">&quot;moPsych&quot;</span> <span class="attr">data-slug-hash</span>=<span class="string">&quot;KKgQxWb&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;</span> <span class="attr">data-pen-title</span>=<span class="string">&quot;Snake Game&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span>See the Pen <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codepen.io/moPsych/pen/KKgQxWb&quot;</span>&gt;</span></span></span><br><span class="line">  Snake Game<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> by moPsych (<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codepen.io/moPsych&quot;</span>&gt;</span></span>@moPsych<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>)</span><br><span class="line">  on <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://codepen.io&quot;</span>&gt;</span></span>CodePen<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>.<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://static.codepen.io/assets/embed/ei.js&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="moPsych" data-slug-hash="KKgQxWb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Snake Game">  <span>See the Pen <a href="https://codepen.io/moPsych/pen/KKgQxWb">  Snake Game</a> by moPsych (<a href="https://codepen.io/moPsych">@moPsych</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="嵌入gist">嵌入gist</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://gist.github.com/Theigrams/98f6323969aa763cd1e343540e5420b4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script src="https://gist.github.com/Theigrams/98f6323969aa763cd1e343540e5420b4.js"></script><h4 id="pdf内嵌">pdf内嵌</h4><p><a href="https://zhuanlan.zhihu.com/p/342135587">谷歌引入方法来源</a></p><h5 id="谷歌的pdf外链引入内嵌">谷歌的pdf外链引入内嵌</h5><p>通过  <kbd>Google</kbd><kbd>Drive</kbd><kbd>Viewer</kbd>引入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://docs.google.com/gview?embedded=true&amp;url=http://infolab.stanford.edu/pub/papers/google.pdf&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:800px; height:500px;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><iframe src="https://docs.google.com/gview?embedded=true&url=http://infolab.stanford.edu/pub/papers/google.pdf" style="width:800px; height:500px;" frameborder="0"></iframe><h5 id="hexo渲染器的pdf内嵌-前提是你装了渲染器">hexo渲染器的pdf内嵌（前提是你装了渲染器）</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf https://pic-1304932877.cos.ap-shanghai.myqcloud.com/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%B3%BB%E5%88%97/HTTP.pdf %&#125;</span><br></pre></td></tr></table></figure><div class="row">    <embed src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%B3%BB%E5%88%97/HTTP.pdf" width="100%" height="550" type="application/pdf"></div><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开源指北</title>
      <link href="posts/6b54fb85/"/>
      <url>posts/6b54fb85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏名言</title>
      <link href="posts/b7933f67/"/>
      <url>posts/b7933f67/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  我们能从游戏中学到什么？<center>英雄联盟：你一个人靠谱能做的很好，但一群人靠谱才能走的更远<center>阴阳师：你永远不知道运气什么时候会砸向你<center>魔兽世界：能陪你走过十二年的，不止朋友，还有艾泽拉斯<span id="more"></span><p>贪吃蛇大作战：长大的我们渐渐失去了横冲直撞的勇气</p><p>纪念碑谷：面对困难多转几个弯，总会遇见柳暗花明</p><p>守望先锋：生活中并不缺少美，只是缺少发现美的眼睛，热火朝天的战场中也有靓丽的风景</p><p>愤怒的小鸟：失败时总有一群猪在嘲笑你，而他们不知道有再来一次</p><p>俄罗斯方块：犯下的错误会积累，而成功会消失</p><p>我的世界:一个游戏，一个人生，你的世界里你和你的朋友可以体验你梦寐以求的自由</p><p>TF2:如果你不懂得努力，你始终会失败，不要害怕强大的队友，而是永不放弃的去猎杀他;如果你没有朋友，陪伴着你一起战斗的队友，就是你真正的朋友;其实失败并不可怕，可怕的是你选择了放弃</p><p>半条命:你要懂得反抗，你不是弱者，你只是没有反抗</p><p>玩具熊的五夜后宫:不要害怕黑暗中的恐惧，只害怕你不敢去面对</p><p>泰拉瑞亚:虽然你什么都没，但是自己动手，你就能努力的生存下去</p><p>传说之下:只要你有决心，你就会知道决心能帮你实现很多东西</p><p>求生之路:只要和你的队友同心协力你们永远能战胜所有困难</p> </center><p><strong>我的几位有才的朋友又加了几条：</strong></p><p>黑暗之魂——菜就多练练</p><p>王者荣耀:你永远不知道孤儿是队友还是对面</p><p>原神:充3000和零氪没有什么区别</p><p>消逝的光芒：那天，我们在夕阳下奔跑……艹，夜魔</p><p>只狼:重复显示的“菜”显得你很呆</p><p>本文阅览次数 ：<span id="twikoo_visitors">0</span></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 游戏名言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程图</title>
      <link href="posts/7f59c40c/"/>
      <url>posts/7f59c40c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 程序框图也叫做流程图，它直观形象,易于理解，是描述算法的常用方式。美国国家标准化协会（ANSI）规定了一些常用的程序框图符号（如下图所示），已经成为世界各国程序工作者普遍采用的标准。  </center><img src="https://img-blog.csdnimg.cn/20190401090908105.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="1.jpg" style="zoom: 67%;" / loading="lazy"><span id="more"></span><p>从网络上找了个例子如下：</p><p><img src="https://img-blog.csdnimg.cn/20190401091228716.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190401090941605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>是不是和上一篇文章的伪代码有点像呢？其实这两个可以结合使用的，并且还经常这么干。</p><h3 id="基本结构">基本结构</h3><p>不论什么程序设计语言，程序设计都有3种基本结构：顺序结构、选择结构和循环结构。三种基本结构的特点： 一个入口，一个出口，不出现死循环和死语句。</p><img src="https://img-blog.csdn.net/20180923195231944" alt="img" style="zoom:50%;" / loading="lazy"><img src="https://img-blog.csdn.net/20180923195402731" alt="img" style="zoom:50%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20181227164842271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMwMTExNA==,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 67%;" / loading="lazy"><h3 id="实际应用类型">实际应用类型</h3><p>一般我们理工狗使用的较多的是<u>系统流程图与程序流程图</u>。此外还有<u>业务路程图、任务流程图、页面流程图</u>。多了解几个流程图更有助于我们理解这个新的事物，故将其列举于此。</p><p>一般说来做系统高层设计时，首先会考虑系统的整体结构，把<strong>系统</strong>会分成多个<strong>子系统</strong>，每个<strong>子系统</strong>又分成多个<strong>程序模块</strong>。系统流程图用图形化的符号来记录整个系统和系统各模块的结构，描述了系统各子系统、相关文件和数据之间的关系，记录了整个系统的体系结构。系统流程图主要应用在系统架构阶段，是系统分析员或系统设计师对将要构建系统的一种描述，这种描述以简单图形化的方式给出了系统的整体结构，涉及到系统将要使用的各种部件，如<strong>子系统、数据库、磁盘、文件、用户的输入与输出</strong>等。而每个模块中，单个功能的实现则可用程序流程图来描述。</p><p>下面展示几个例子：</p><p><strong>程序流程图</strong>：</p><img src="https://img-blog.csdnimg.cn/20191216113341635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpcmRfdHA=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 80%;" / loading="lazy"><p><strong>系统流程图</strong>：</p><img src="https://img-blog.csdnimg.cn/20191216113443426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpcmRfdHA=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 80%;" / loading="lazy"><p>同为流程图，下面这三个商务类的了解一下即可，因为对c语言学习帮助不大。</p><p><strong>业务流程图</strong><br>业务流程图就是描述那些个体在什么条件下做了什么事情，他们之间有何关联。主要分三个方面：</p><ul><li>涉及到哪些主体？</li><li>每个主体都有哪些任务？</li><li>各个主体之间怎么联系的？</li></ul><p>一般涉及到多个主体，每个主体之间有联系，比如p2p平台。下图为p2p的业务流程图、涉及到借款人、平台、投资人、第三方支付四个主体，以及每个主题需要完成的任务、任务之间的联系和先后顺序。<br><img src="https://img-blog.csdnimg.cn/20190510152051210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy"></p><p><strong>任务流程图</strong></p><p>泳道图一般是从战略上分析整个业务流程，让你对公司所做的业务有个大概的了解，而任务流程图就是在你的产品操作上，用户通过什么样的操作来完成它的目标，比如你去银行ATM机器上取钱，你是如何一步步操作把钱取出来的，这里以p2p理财产品购买为例，来说明购买的任务流程图。</p><img src="https://img-blog.csdnimg.cn/20190510152125838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy">画流程图的时候注意主要流程和异常流程，在这个例子中，主要流程就是购买流程、异常流程就是没有设置交易密码、用户忘记交易密码、以及超过重试次数这些流程，画流程图的时候先画主要的流程，然后再把异常额流程考虑上，查漏补缺，保证不遗漏，产品的逻辑漏洞多半是由于异常情况没有考虑清楚，画流程图可以有效的帮助你梳理逻辑。<p><strong>页面流程图</strong></p><p>如果说业务流程图帮助你梳理战略，任务流程图帮助你梳理用户操作行为（主要给程序员看）、页面跳转流程在帮助你梳理各个页面之间的跳转关系（主要给UI和前端程序员看）这是一个逐步从整体到局部，从后端到前端的过程。</p><p>所有的产品都是由页面组成的，不论是APP、PC、H5都是由一个个页面组成的，页面流程图描述完成一个任务需要经过哪些步骤，你在画图的时候只需要清晰的表现出用户点击页面的什么地方，然后跳转到那个页面。主要由页面、行动点、连接线组成，下面以用户购买理财产品举例。</p><img src="https://img-blog.csdnimg.cn/20190510152236906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy">页面流程一般只考虑正常的操作流程就行，对于异常的操作流程在正常流程的旁边画出，例如：上面的正常页面跳转是用户购买这个流程，异常页面跳转流程是在购买界面金额不足的时候点击去充值流程，这个在正常流程的旁边标示出来就好。<p>对这三种流程图感兴趣的话，来源：<a href="https://blog.csdn.net/qq_32811489/article/details/90067054?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264089304%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161266580216780264089304&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-90067054.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">流程图介绍以及工具推荐</a></p><h3 id="文章来源：">文章来源：</h3><p><a href="https://blog.csdn.net/bird_tp/article/details/103559761?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-103559761.first_rank_v2_pc_rank_v29_10&amp;spm=1018.2226.3001.4187">流程图学习</a></p><p><a href="https://blog.csdn.net/qq_42675313/article/details/88941058?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264089304%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161266580216780264089304&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-6-88941058.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">一个简单的画程序框图例子</a></p><p>另外如果需要绘制流程图，下面为快速链接</p><p><a href="https://blog.csdn.net/langhonglin/article/details/81091727?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264042445%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161266580216780264042445&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-10-81091727.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">画流程图的软件教程</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言初步学习——伪代码(2)</title>
      <link href="posts/7923a685/"/>
      <url>posts/7923a685/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> VS CODE支持很多的插件，今天我们就是利用code的一个插件实现对新的语言（伪代码）进行编辑。  </center>code不像vs studio，他不是ide，没有运行的环境，而是一款轻量级的跨平台的编辑器。所以环境我们要自己进行搭建，新的语言要利用一些插件实现。<p><strong>原作者的小建议</strong>：这篇文章的最佳阅读姿势是在电脑上打开，并跟着文章一步步做下去。</p><span id="more"></span><h2 id="创建项目">创建项目</h2><p>编写插件的第一步，就是创建我们的目录结构。这里我们使用一个叫做<code>yo</code>的脚手架工具。<code>yo</code>是一个富有高度扩展性的通用脚手架，可以通过插件来实现不同目录结构和初始选项。VS Code官方提供了名为<code>generator-code</code>的插件，来进行插件目录的创建。首先我们需要安装<code>yo</code>以及插件<code>generator-code</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yo generator-code</span><br></pre></td></tr></table></figure><p>在安装完成以后，使用下面的命令来创建目录结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure><p>在运行<code>yo code</code>以后，它会问你下面这些问题。建议大家和我的输入保持相同，以免遇到意外。这里我们给伪代码的取名为<code>zhuanzhuan</code>，并且告诉VS Code，当碰到一个文件的扩展名为<code>.zhuanzhuan</code>或者<code>.zz</code>时，就要运行我们这个插件。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoaWFJb0lpYzVEVTloTFpXS0ZpYzNXeG1tTlRHb3N0MmliUk10RTZyVVQycG1yUUdsb0JoZUlEbG84Zy82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>输入完所有的选项以后，我们的插件目录就创建完成了。结构是这样子的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── CHANGELOG.md</span><br><span class="line"></span><br><span class="line">├── README.md</span><br><span class="line"></span><br><span class="line">├── language-configuration.json</span><br><span class="line"></span><br><span class="line">├── <span class="keyword">package</span>.json</span><br><span class="line"></span><br><span class="line">├── syntaxes</span><br><span class="line"></span><br><span class="line">├──     # 在tmLanguage.json中自定义语法</span><br><span class="line"></span><br><span class="line">│   └── zhuanzhuan.tmLanguage.json </span><br><span class="line"></span><br><span class="line">└── vsc-extension-quickstart.md</span><br></pre></td></tr></table></figure><h2 id="了解scope">了解Scope</h2><p>想要实现语法高亮，就需要将一串代码字符串，拆分成无数的小碎片，然后分别为它们指定<code>color</code>等样式。这些拆分后的小碎片，被称作<code>token</code>。这里的<code>token</code>与<code>jwt</code>中的<code>token</code>不同，并没有安全、令牌等方面的意思，而是更偏向&quot;符号&quot;的含义。我们来看一个简单例子???来理解一下这段话。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum(a: number, b: number): number &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段TS代码中，我们定义了一个用于求和的函数。这时候我们按下VS Code快捷键，<code>shift+cmd+p</code>，然后输入<code>inspect editor tokens and scopes</code>，就可以看到每个token对应的类型。比如<code>sum</code>这个token的类型就是<code>function</code>，<code>a</code>和<code>b</code>的类型是<code>parameter</code>。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxod0tRZjNhclVnQUx5VDd4SFg0cGJFbGV6NXR2MGZoUmpCMmppYWVvVDVHcGN6MFl1QTZxbEJMQS82NDA?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>另外从截图的底部中，我们还可以看到，每个<code>token</code>还具有一个叫<code>textmate scope</code>的属性。通俗地说，<code>scope</code>指这个<code>token</code>所处的位置。</p><p>比如下面的代码片段里，有两个a变量。第一个是一个变量声明，而第二个是函数的参数之一。虽然它们都可以被笼统地称为变量，但是因为所处的<code>scope</code>不同（也就是处于不同环境），所以在VS Code中会被显示成不同的颜色。(由于微信文章中的代码高亮较弱，看不出区别。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function sum(a: number, b: number): number &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持注释">支持注释</h2><p>至此前置知识已经介绍完了，现在开始真正修改脚手架创建的代码。我们的第一个目标是，让<code>zhuanzhuan</code>语言支持注释。</p><p>首先打开根目录下的<code>language-configuration.json</code>文件，找到<code>comments</code>字段，将<code>lineComment</code>从默认的<code>//</code>修改为<code>注释：</code>。完成以后按下F5启动Debug程序，VS Code会打开一个新的窗口，且我们的插件会在其中生效。在新窗口中，我们随意打开一个空文件夹，然后新建名为<code>fakeCode.zz</code>，并输入以下内容进行测试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">注释： 当我们用中文伪代码来描述执行过程的时候，</span><br><span class="line"></span><br><span class="line">注释： 不管什么内容都被显示成灰色的字符串了。</span><br><span class="line"></span><br><span class="line">注释： 我们的目标就是让它们变得五彩斑斓。</span><br><span class="line"></span><br><span class="line">注释： 不要试图重构这个方法，不然你会虚度一天的光阴。</span><br><span class="line"></span><br><span class="line">如果 ([某个条件]) &#123;</span><br><span class="line"></span><br><span class="line">  做一些条件成立时的事情</span><br><span class="line"></span><br><span class="line">&#125; 否则 &#123;</span><br><span class="line"></span><br><span class="line">  当条件不成立的时候...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">遍历 商品</span><br><span class="line"></span><br><span class="line">  打印 《商品id》</span><br><span class="line"></span><br><span class="line">结束</span><br><span class="line"></span><br><span class="line">函数 [函数名] &#123;</span><br><span class="line"></span><br><span class="line">  函数的内容</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，我们按下注释转换的快捷键<code>cmd+/</code>，就会惊讶地发现，VS Code会为你自动转换注释内容，在这之间转换：<code>注释：具体内容</code>⇔<code>具体内容</code>。</p><p>这样，我们的Hello World项目就完成了，开始做稍微复杂一些的事情。打开<code>/syntexes/zhuanzhuan.tmLanguage.json</code>文件，将这个文件的所有内容替换成下面的内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;$schema&quot;</span>: <span class="string">&quot;https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;scopeName&quot;</span>: <span class="string">&quot;source.zz&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;include&quot;</span>: <span class="string">&quot;#comments&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ],</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;comments&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;注释：&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;end&quot;</span>: <span class="string">&quot;\\n&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;beginCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment.open&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;endCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment.close&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一眼看的时候都会懵的，我们慢慢理解一下这到底是什么意思。</p><ul><li><p>patterns &amp; repository</p><p>repository是规则的仓库，它规定了该条规则如何识别其适用的对象。而patterns则是规定了规则仓库中，哪些规则是需要生效的。所以如果我们想要加一条新的规则，需要在repository中加规则的内容，并在patterns中将这条规则<code>include</code>，不然即使在repository添加了规则也不会生效。</p></li><li><p>comments</p><p>这是我们加入的自定义规则，comments是规则的名字。</p></li><li><p>begin &amp; end</p><p>决定这条规则的适用对象。这里我们将<code>注释：</code>开头，回车符结尾的这部分字符作为适用对象。</p></li><li><p>beginCapture &amp; endCapture &amp; name</p><p>这三个属性，代表着我们赋予适用对象的scope名称。比这样一条注释&quot;注释：不要试图重构这个方法，不然你会虚度一天的光阴&quot;。，对应到我们这条规则，就是<code>注释：</code>这部分被赋予了<code>punctuation.comment.open</code> scope，不要试图重构这个方法，不然你会虚度一天的光阴。scope为<code>punctuation.comment</code>，最后的回车符scope为<code>punctuation.comment.open</code>。</p></li></ul><p>然后切换到刚才使用<code>F5</code>打开的Debug窗口，按下<code>cmd+shift+p</code>，运行<code>reload window</code>，让我们的修改生效，就可以看到scope名称的变化：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxobGNPU2txVlVvZE9GUkRlZXBGQjA3UHVOcFYzd2lhRHlPbEpkMWljWHlGMTRFcHk1cDUzRTdmaWJnLzY0MA?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><h2 id="支持关键字">支持关键字</h2><p>关键字同样是编辑这个文件<code>/syntexes/zhuanzhuan.tmLanguage.json</code>，在<code>repository</code>中新加入<code>keywords</code>规则(记得在顶部的patterns中include它)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;match&quot;</span>: <span class="string">&quot;\\b(如果|遍历|结束|打印|函数)\\b&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;keyword.control.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下这里的意思：</p><ul><li><code>match</code> 这是一个正则，如果碰上<code>如果|遍历|结束|打印|函数</code>其中之一，就将它标记为关键字。</li><li><code>name</code> 这些关键字对应的scope是什么。</li></ul><p>效果如图：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoSGlhZmJhRklZcDQzMDF3R0lVQ1h2Ynk0YlVDbm9pYllSOVQ4NHB1ZEc5bzV4SG9EVlE2d0FncWcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>从图中我们可以看出，正则中匹配的字符(如果、遍历、函数等)已经被一一高亮了。不过你的VS Code中不一定是蓝色，这取决于你当前使用的主题。</p><h2 id="支持字符串">支持字符串</h2><p>接着我们让<code>zhuanzhuan</code>语言支持字符串功能，同样是修改json文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;strings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;《&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="string">&quot;》&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;beginCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.open&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;endCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.close&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像JS中使用单双引号和模板字符串作为字符串的标志，为了体现<code>zhuanzhuan</code>语言的不同之处，我们使用书名号，而不是单双引号，来标志一个字符串。例如<code>《xxxx》</code>，它被分成了<code>《</code> <code>xxxx</code> <code>》</code>三个部分，这三个部分有各自的<code>scope</code>，对应关系如下：</p><ul><li><strong>《</strong>      <code>string.quoted.book.open</code></li><li><strong>xxxx</strong>    <code>string.quoted.book.zhuanzhuan</code></li><li><strong>》</strong>     <code>string.quoted.book.close</code></li></ul><p>为了看到修改后的效果，需要在调试窗口中，<code>cmd+shift+p</code>并运行<code>reload window</code>。重载后的效果是这样的：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoeVJQYjJOMUhTbW5KNmNHUVVpYnRHc1NLSnNTVVdUZ3BwTVhDd1NMQXV4cGNXdEdQdnFpY29ldEEvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>这时候第13行发生了变化，从原来的黑色，变成了绿色。</p><h2 id="深入理解scope">深入理解scope</h2><p>看到效果以后，再回过头看那份json文件，它到底表达了什么意思？</p><p>首先我们规定了顶层的<code>scope</code>名字叫<code>source.zz</code>。也就是说，当我们新建了<code>.zz</code>结尾的文件，开始写代码，这时所有的代码都处在顶层<code>scope</code>。</p><p><code>patterns</code>属性规定了在顶层<code>scope</code>中，有哪些方式可以开辟一个子<code>scope</code>。<code>patterns</code>数组<code>inclucde</code>(即引入)了名为<code>strings</code>和<code>keywords</code>的规则，这些规则被放在了<code>repository</code>(也就是仓库，一个规则的仓库)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;strings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;《&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;end&quot;</span>: <span class="string">&quot;》&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>repository</code>中，以<code>strings</code>规则为例，当VS Code解析引擎遇到以“《”开头，“》”结尾的<code>token</code>时，中间的内容会被认为是字符串。也就是说，我们让书名号具备了和JS中的单双引号相同的功能。字符串的<code>scope</code>变成了我们规定的<code>string.quoted.book.zhuanzhuan</code>。我们可以通过<code>inspect editor tokens and scopes</code>命令来验证这一点。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoTlJrVnFwN21vVGZ4TmVEOTIzZUJWSm5qcnVxcmlhandqWFlvMmlhU3labVlEbGJIRHB3NnNJZHcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>图片中，<code>xxxx</code>所属的<code>scope</code>有两个，一个是<code>constant.character.escape.zhuanzhuan</code>，另一个就是根<code>scope</code>。一个<code>token</code>往往拥有多个<code>scope</code>，就像字符串，同时处于根<code>scope</code>和书名号创建的一个<code>scope</code>。</p><p>在上文的json文件中，还有一个叫<code>keywords</code>的属性，当有字符串满足<code>match</code>字段中的正则表达式时，会被认为是一个关键字。</p><p>事实上，当我们把上文的json规则进行更多的扩展和嵌套，就会越来越接近现流行的其他语言，存在无数的嵌套。一个<code>token</code>会属于无数的<code>scope</code>。</p><p>那么问题来了，这些<code>scope</code>的作用是什么？我们花了很多的力气去定义json格式，来让不同位置的<code>token</code>拥有不同的<code>scope</code>。这样我们就拥有了一个类似于CSS选择器的东西，我们可以为不同<code>scope</code>指定不同的样式，从而让我们自创的语言高亮起来。</p><h2 id="使用scope">使用Scope</h2><p>接下来我们要使用上文中定义的几个<code>scope</code>。因为目前为止，我们只是重新定义了<code>zhuanzhuan</code>语言中一部分情景下的<code>scope</code>名称，我们可以利用这些自定义的<code>scope</code>，做出更细致的高亮配置。</p><p>使用<code>scope</code>的方式就是创建一个<code>theme</code>类型的插件(没错我们要写第二个插件了)。这次我们需要cd到用户文件夹下的<code>.vscode/extensions</code>，这样我们的主题就可以免安装，可以直接出现在VS Code主题列表中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoNVJZcDNQSTgwaWJmNUdCOWJOWXBLQzB6NTFmSGpRMjQ4eDlHNWw4bUl6YXVqMlFWMXZMQ1ZIZy82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>使用VS Code打开项目，然后编辑<code>theme/zhuanzhuan-lang-theme-color-theme.json</code>文件，文件的结构是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhuanzhuan-lang-theme&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;colors&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;editor.background&quot;</span>: <span class="string">&quot;#f5f5f5&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;editor.foreground&quot;</span>: <span class="string">&quot;#333333&quot;</span></span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;tokenColors&quot;</span>: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Comments&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;scope&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;comment&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;punctuation.definition.comment&quot;</span></span><br><span class="line"></span><br><span class="line">   ],</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;fontStyle&quot;</span>: <span class="string">&quot;italic&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#AAAAAA&quot;</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>tokenColors</code>字段是我们需要关心的地方，它针对了不同的<code>scope</code>，指定不同的样式。<code>name</code>是这条规则的名字，可以随意命名，保证唯一性即可。<code>scope</code>类似于CSS选择器，是规则应用的对象。<code>settings</code>则是具体的样式。</p><p>然后我们在<code>tokenColors</code>中，加上我们自定义的样式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;tokenColors&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他原有的规则，仅列出新增的规则。</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;quotedBookOpen&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将scope为string.quoted.book.open的token，</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 也就是《，颜色设置成#33ec0e(原谅色)。</span></span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;string.quoted.book.open&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#33ec0e&quot;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略了大段雷同的配置。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要scope和我们的zhuanzhuan语言定义中的scope相同，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 就可以高亮对应的token。</span></span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>zhuanzhuan-lang</code>插件的调试窗口，打开主题选择列表，选择<code>zhuanzhuan-lang-theme</code>主题，就可以看到上面的三条规则对<code>《商品id》</code>这部分生效了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoR1haaWNpYjFpYkRJMnVSQjcyWnc5QzdUY0dpYW9CbGx6MjBpYldpY2RoanZYd1dTNXprMzVmV2VpY0cwUS82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>文字及其对应的scope和颜色如下：</p><ul><li><code>《</code></li><li><ul><li>scope: <code>string.quoted.book.open</code></li><li>颜色：#33ec0e</li></ul></li><li><code>》</code></li><li><ul><li>scope: <code>string.quoted.book.close</code></li><li>颜色：#33ec0e</li></ul></li><li><code>xxxx</code></li><li><ul><li>scope: <code>string.quoted.book.open</code></li><li>颜色：#eb8837</li></ul></li></ul><p>其他的scope可以自行挑选喜欢的色值一一定义，这里就不再重复罗列。</p><h2 id="成果">成果</h2><p>经过上面一系列的努力，然后再添加亿点点细节，最终的效果就是下图。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoVWtkQ3FnaWE0Vm9NUUM0RkJnbW1sYUFMbzZiR3NxSUozWXJjT0tpY3JEQ3R5bHRkMXQ2QzJKaHcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><h2 id="总结">总结</h2><p>通过阅读文章，我们总共创建了两个VS Code插件。一个是语言支持插件，通过简单的配置，使<code>zhuanzhuan</code>语言支持了中文关键字、书名号字符串以及中括号表示的变量。第二个是主题插件，为<code>zhuanzhuan</code>语言中自定义的<code>scope</code>提供了高亮规则。<code>scope</code>名称，是连接两个插件的枢纽。</p><p>不过<code>zhuanzhuan</code>语言离一门完善的语言还需要海量的工作，我们需要定义更多的scope规则，规则之间往往还存在复杂的嵌套关系。这篇文章只是讲了冰山露出海面的那一角。如果想深入学习这方面的知识，仍需参考VS Code官方的文档，以及学习编译原理相关知识。</p><p>另外附上文章中两个插件最终的代码：</p><p><a href="https://github.com/inkyMountain/zhuanzhuan-lang">https://github.com/inkyMountain/zhuanzhuan-lang</a></p><p><a href="https://github.com/inkyMountain/zhuanzhuan-lang-theme">https://github.com/inkyMountain/zhuanzhuan-lang-theme</a></p><p>参考文档：<a href="https://code.visualstudio.com/api#vscode">https://code.visualstudio.com/api#vscode</a></p><p>文章来源：<a href="https://blog.csdn.net/P6P7qsW6ua47A2Sb/article/details/110151903?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161228068816780262512132%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fall.%252522%25257D&amp;request_id=161228068816780262512132&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-16-110151903.first_rank_v2_pc_rank_v29_10&amp;utm_term=%25E4%25BC%25AA%25E4%25BB%25A3%25E7%25A0%2581">链接</a></p><p>因为我对这方面也不是太懂，市面上也已经有很多的轮子了，本着不造烂轮子误人子弟的原则，整理了这篇文章。</p><p>水平有限，若有错漏，敬请指正。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 伪代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言初步学习——伪代码(1)</title>
      <link href="posts/520ef546/"/>
      <url>posts/520ef546/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>伪代码（Pseudocode）是一种非正式的，类似于英语结构的，用于描述模块结构图的语言，并且英语国家使用的较多。人们在用不同的编程语言实现同一个算法时意识到，他们的实现（注意：这里是实现，不是功能）很不同。尤其是对于那些熟练于不同编程语言的程序员要理解一个（用其他编程语言编写的程序的）功能时可能很难，因为程序语言的形式限制了程序员对程序关键部分的理解。这样伪代码就应运而生了。伪代码提供了更多的设计信息，每一个模块的描述都必须与设计结构图一起出现。<br>使用伪代码的目的是使被描述的算法可以容易地以任何一种编程语言（Pascal，C，Java等）实现。因此，伪代码必须结构清晰、代码简单、可读性好，并且类似自然语言。 介于自然语言与编程语言之间。以编程语言的书写形式指明算法职能。使用伪代码， 不用拘泥于具体实现。相比程序语言（例如Java, C++,C, Dephi 等等）它更类似自然语言。它是半角式化、不标准的语言。可以将整个算法运行过程的结构用接近自然语言的形式（可以使用任何一种你熟悉的文字，关键是把程序的意思表达出来）描述出来。这个在数据结构讲算法等部分体现的较多。</p><p>并且，学习代码类相关专业的同学，在<a href="https://blog.csdn.net/weixin_41275726/article/details/102796822?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161228068816780266227075%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=161228068816780266227075&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-102796822.first_rank_v2_pc_rank_v29_10&amp;utm_term=%25E4%25BC%25AA%25E4%25BB%25A3%25E7%25A0%2581"><strong>论文</strong></a>上也要使用一些相关的伪代码，所以<strong>掌握</strong>伪代码的写法也是很重要的一个环节 。</p><span id="more"></span><h2 id="语法规则">语法规则</h2><p>例如，类Pascal语言的伪代码的语法规则是： 在伪代码中，每一条指令占一行（else if，例外）。指令后不跟任何符号（Pascal和C中语句要以分号结尾）。书写上的“缩进”表示程序中的分支程序结构。这种缩进风格也适用于if-then-else语句。用缩进取代传统Pascal中的begin和end语句来表示程序的块结构可以大大提高代码的清晰性；同一模块的语句有相同的缩进量，次一级模块的语句相对与其父级模块的语句缩进。</p><p>算法的伪代码语言在某些方面可能显得不太正规，但是给我们描述算法提供了很多方便，并且可以使我们忽略算法实现中很多麻烦的细节。通常每个算法开始时都要描述它的输入和输出，而且算法中的每一行都给编上号码，在解释算法的过程中会经常使用算法步骤中的行号来指代算法的步骤。算法的伪代码描述形式上并不是非常严格，其主要特性和通常的规定如下：<br>1) 算法中出现的数组、变量可以是以下类型：整数、实数、字符、位串或指针。通常这些类型可以从算法的上下文来看是清楚的，并不需要额外加以说明。<br>2) 在算法中的某些指令或子任务可以用文字来叙述，例如，“设x是A中的最大项”，这里A是一个数组；或者&quot;将x插入L中&quot;，这里L是一个链表。这样做的目的是为了避免因那些与主要问题无关的细节使算法本身杂乱无章。<br>3) 算术表达式可以使用通常的算术运算符（+，-，<em>，/，以及表示幂的^）。逻辑表达式可以使用关系运算符=,≠,&lt;,&gt;,≤和≥，以及逻辑运算符与(and),或（or），非（not）。<br>4) 赋值语句是如下形式的语句：a&lt;-b 。<br>这里a是变量、数组项，b是算术表达式、逻辑表达式或指针表达式。语句的含义是将b的值赋给a。<br>5) 若a和b都是变量、数组项，那么记号a&lt;-&gt;b 表示a和b的内容进行交换。<br>6) goto语句具有形式<br>goto label（goto标号）<br>它将导致转向具有指定标号的语句。<br>7) 条件语句有以下两种形式：<br>if c then s或者<br>if c then s<br>else s′<br>这里c是逻辑表达式，s和s′是单一的语句或者是被括在do和end之间的语句串。对于上述两种形式，假若c为真，则s被执行一次。假若c为假，则在第一种形式中，if语句的执行就完成了，而在第二种形式中，执行s′。在所有的情况下，控制就进行到了下一个语句，除非在s或s′中的goto语句使控制转向到其它地方。<br>8) 有两种循环指令：while和for。<br>while语句的形式是<br>while c do<br>s<br>end<br>这里c是逻辑表达式，而s是由一个或更多个语句组成的语句串。当c为真时，执行s。在每一次执行s之前，c都被检查一下；假若c为假，控制就进行到紧跟在while语句后面的语句。注意，当控制第一次达到while语句时，假若c为假，则s一次也不执行。<br>for语句的形式是<br>for var init to limit by incr do<br>s<br>end<br>这里var是变量，init、limit和incr都是算术表达式，而s是由一个或多个语句组成的语句串。初始时，var被赋予init的值。假若incr≥0，则只要var≤limit，就执行s并且将incr加到var上。（假若incr&lt;0，则只要var≥limit，就执行s并且将incr加到var上）。incr的符号不能由s来该改变。<br>9) exit语句可以在通常的结束条件满足之前，被用来结束while循环或者for循环的执行。exit导致转向到紧接在包含exit的（最内层）while或者for循环后面的一个语句。<br>10) return用来指出一个算法执行的终点；如果算法在最后一条指令之后结束，它通常是被省略的；它被用得最多的场合是检测到不合需要的条件时。return的后面可以紧接被括在引号的信息。<br>11) 算法中的注释被括在/</em> */之中。诸如read和output之类的各种输入或者输出也在需要时被用到。</p><p><strong>伪代码实例</strong></p><p>伪代码只是像流程图一样用在程序设计的初期，帮助写出程序流程。简单的程序一般都不用写流程、写思路，但是复杂的代码，最好还是把流程写下来，总体上去考虑整个功能如何实现。写完以后不仅可以用来作为以后测试,维护的基础，还可用来与他人交流。但是，如果把全部的东西写下来必定可能会让费很多时间，那么这个时候可以采用伪代码方式。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IF 九点以前 THEN</span><br><span class="line"></span><br><span class="line">do 私人事务；</span><br><span class="line"></span><br><span class="line">ELSE 9点到18点 THEN</span><br><span class="line"></span><br><span class="line">工作；</span><br><span class="line"></span><br><span class="line">ELSE</span><br><span class="line"></span><br><span class="line">下班;</span><br><span class="line"></span><br><span class="line">END IF</span><br></pre></td></tr></table></figure><p>这样不但可以达到文档的效果,同时可以节约时间. 更重要的是,使结构比较清晰,表达方式更加直观.</p><p>下面介绍一种类Pascal语言的伪代码的语法规则。</p><p>在伪代码中，每一条指令占一行(else if 例外，)，指令后不跟任何符号（Pascal和C中语句要以分号结尾）；</p><p>书写上的“缩进”表示程序中的分支程序结构。这种缩进风格也适用于if-then-else语句。用缩进取代传统Pascal中的begin和end语句来表示程序的块结构可以大大提高代码的清晰性；同一模块的语句有相同的缩进量，次一级模块的语句相对与其父级模块的语句缩进；</p><p>在伪代码中，通常用连续的数字或字母来标示同一即模块中的连续语句，有时也可省略标号。</p><p>符号△后的内容表示注释；</p><p>在伪代码中，变量名和保留字不区分大小写，这一点和Pascal相同，与C或C++不同；</p><p>在伪代码中，变量不需声明，但变量局部于特定过程，不能不加显示的说明就使用全局变量；</p><p>赋值语句用符号←表示，x←exp表示将exp的值赋给x，其中x是一个变量，exp是一个与x同类型的变量或表达式（该表达式的结果与x同类型）；多重赋值i←j←e是将表达式e的值赋给变量i和j，这种表示与j←e和i←e等价。</p><p>例如：</p><pre><code>x←yx←20*(y+1)x←y←30</code></pre><p>以上语句用C分别表示为：</p><pre><code>x = y;x = 20*(y+1);x = y = 30;</code></pre><p>选择语句用if-then-else来表示，并且这种if-then-else可以嵌套，与Pascal中的if-then-else没有什么区别。</p><p>例如:</p><pre><code>if (Condition1)then [ Block 1 ]else if (Condition2)then [ Block 2 ]else [ Block 3 ]</code></pre><p>循环语句有三种：while循环、repeat-until循环和for循环，其语法均与Pascal类似，只是用缩进代替begin - end；</p><p>例如：</p><ul><li>x ← 0</li><li>y ← 0</li><li>z ← 0</li><li>while x &lt; N</li><li>do x ← x + 1</li><li>y ← x + y</li><li>for t ← 0 to 10</li><li>do z ← ( z + x * y ) / 100</li><li>repeat</li><li>y ← y + 1</li><li>z ← z - y</li><li>until z &lt; 0</li><li>z ← x * y</li><li>y ← y / 2</li></ul><p>上述语句用C或C++来描述是：</p><pre><code>x = y = z = 0;while( z &lt; N )&#123;x ++;y += x;for( t = 0; t &lt; 10; t++ )&#123;z = ( z + x * y ) / 100;do &#123;y ++;z -= y;&#125; while( z &gt;= 0 );&#125;z = x * y;&#125;y /= 2;</code></pre><p>数组元素的存取有数组名后跟“[下标]”表示。例如A[j]指示数组A的第j个元素。符号“ …”用来指示数组中值的范围。</p><p>例如：</p><p>A[1…j]表示含元素A[1], A[2], … , A[j]的子数组；</p><p>复合数据用对象(Object)来表示，对象由属性(attribute)和域(field)构成。域的存取是由域名后接由方括号括住的对象名表示。</p><p>例如：</p><p>数组可被看作是一个对象，其属性有length，表示其中元素的个数，则length[A]就表示数组A中的元素的个数。在表示数组元素和对象属性时都要用方括号，一般来说从上下文可以看出其含义。</p><p>用于表示一个数组或对象的变量被看作是指向表示数组或对象的数据的一个指针。对于某个对象x的所有域f，赋值y←x就使f[y]=f[x]，更进一步，若有f[x]←3，则不仅有f[x]=3，同时有f[y]=3，换言之，在赋值y←x后，x和y指向同一个对象。</p><p>有时，一个指针不指向任何对象，这时我们赋给他nil。</p><p>函数和过程语法与Pascal类似。</p><p>函数值利用 “return (函数返回值)” 语句来返回，调用方法与Pascal类似；过程用 “call 过程名”语句来调用；</p><p>例如：</p><p>1. x ← t + 10</p><p>2. y ← sin(x)</p><p>3. call CalValue(x,y)</p><p>参数用按值传递方式传给一个过程：被调用过程接受参数的一份副本，若他对某个参数赋值，则这种变化对发出调用的过程是不可见的。当传递一个对象时，只是拷贝指向该对象的指针，而不拷贝其各个域。</p><p>部分文章来源：<a href="https://www.cnblogs.com/huipengkankan/archive/2011/07/28/2120416.html">伪代码规范</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 伪代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AD_learning_video</title>
      <link href="posts/60bf2a09/"/>
      <url>posts/60bf2a09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>AD教学视频，来源：bilibili</center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD_learning_video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AD快捷键</title>
      <link href="posts/5a758763/"/>
      <url>posts/5a758763/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>1：shift+s 键 切换单层显示<br>2：q   英寸和毫米 尺寸切换<br>3：D+R进入布线规则设置。其中 Clearance 是设置最小安全线间距，覆铜时候间距的。比较常用<br>4：CTRL+鼠标单击某个线，整个线的NET 网络 呈现高亮状态<br>5：小键盘上的 * （星号键）可以在top、bottom layer 切换，达到快速切换上下层。另外 + - 可以把所有显示的层轮流切换。<br>6：CTRL+SHIFT+ T 、B、L、R 可以快速对齐所选中的元件 上 下 左 右。<br>7：M+I 可以把选中所有的元件，翻转过来。这样可以在上下层切换，方便布线，调整印丝层。 很实用的一个操作。<br>8：如上所述，还可以 查看板子底部，就点击  查看  翻转板子 板子就反过来，但是属性还是 一样。只是从板子底部看了。<br>9：器件联合 选中两个器件 然后右击 选择 联合-从选中的器件生成联合 这样可以操作两个位置在一起的器件<br>当要去掉时候 选中器件 右击 联合-从联合打散器件  那么连接在一起的就能够单独操作了。<br>当选中联合的器件，右击选择联合，有个 选择所有的联合 这样一下子选择所有联合的器件。固定的外框就可以联合起来移动操作。<br>10：多根线同时画的时候，每个先画个短的线，按SHIFT 选中所有一起画的线，选好，松开SHIFT. 鼠标移动到线头 白点处，然后拖动，那么所有线就一起拖动。 转弯一次，松开， 在拖，又可以转弯。<br>11: 快捷键 t c 交叉探针 看到寻找 原理图 和 PCB 的元件位置  选下，然后跑到PCB 就能看到原理图那个元件的位置。<br>12: ed 删线<br>13: 捕获焊盘 查看——网格——切换电气网格（shift + E）</p><p>方格与格点的切换:View-Grids-ToggleVisible Grid Kind</p><p>原点：Edit-Origin-Set<br>边界的定义：Keep Out Layer-Utility Tools-Place Line 按TAB可定义线宽<br>选取元件：PCB-PCB Filter-IS Component<br>逐个放置元件：TOOLS-Component Placement-RepositionSelected Components<br>自动布局：ToolS-Component Placement–Arrange Within Room<br>自动布局器：ToolS-Component Placement–Auto Placer<br>元件排列：选中元件右键Align-  或Alignment Tools–</p><p>元件在层之间的快速切换：拖动元件的过程按L键<br>让焊盘放在格点上：选中元件，右键-Component Actions-Move ComponentOrigin To Grid<br>移动元件的远近：&quot;G&quot;键 选择mil<br>刷新屏幕： END<br>改走线模式：shift+空格键<br>（“45°线性” “45°+圆角” “90°”“ 任意角”“90°+圆弧 ”“圆弧”）<br>遇障碍物：右键-Options-Preferences-…<br>推挤： Shift+R<br>布线快捷菜单：“~ ”键<br>线宽设置：“Shift+W”</p><p>过孔修改规则:Design-Rules-HoleSize;<br>板边5mm圆弧:Place-KeepOut-Arc<br>切换英美单位制度：Ctrl+Q</p><p>保护元器件位置：锁定 双击-Lock打钩<br>保护已锁定物体：Tools-Preference-PCB Editer-General-ProtectLocked Objects 打勾；</p><p>显示布线快捷菜单：键盘左上角快捷键“~ ”</p><p>层间切换：&quot;+&quot;&quot;-&quot;</p><p>字体（条形码）放置：“A”-Place String；<br>对板的定义：Designers-Board Shape-R/D；<br>尺寸标注：Place Dimension-Place Linear Dimension<br>工具栏恢复原始状态:在工具栏处右键CustomizingPCB Editor-Toolbar-Restore；<br>填充：Place Fill；</p><p>复制粘贴：选中-Edit-Rubber Stamp-单击<br>粘贴特殊形状：选中-Edit-Paste Special<br>选择一组Select：“S键”-Touching Liner线/Rectangle矩形<br>或Shift 一个个选<br>移动Move:“M”<br>整体移动：选中-右键-Unions-Create Union fromselected object/break<br>解脱从联合体<br>弱小信号线包地：选中-“s”select net,Tool-Outline-Selected Objects<br>查找相似物体：右键-Find SimilarObject</p><p>测距离：Report-Measure Distance<br>自动布线:Auto Route:Net/NetClass/Connection/Area/Room</p><p>查看布线层：Shift+F或“*”切换层<br>切断线：Edit-Slice Tracks<br>布完线进行规则检查：Tools-Design Rule Check-Run D_R_C_<br>3D视图：数字键“3”或View-Switch to3D,Shift+右键旋转；</p><p>铺铜：Place-Polyon Pour</p><p>去死铜：<strong>双击铜区，Remove Deader Copper 打勾</strong></p><p>原理图和PCB的双向同步更新：<br>检测PCB与原理图的不同处：Project-Show Differences<br>在原理图里更改后更新到PCB:Design-Update PCB Document in<br>在PCB里更改后更新到原理图:Design-UpdateSchematics in<br>标号Designator显示：PCB FilterISDesignator 然后PCB Inspector Hide<br>重新标注：Tool- Re Annotate</p><p>元器件标号自动排列：选中器件-右键-Align-Position Component Text<br>补泪滴：Tool-Teardrops，焊盘与导线连接更牢固<br>生成生产制造文件：File-Fabrication Outputs<br>生成PDF文件：File-Smart PDF<br>翻板：View-Flip Board</p><p>**打开层对话框：**<strong>L</strong></p><p>打开选择：S<br>跳转：J<br>英寸和毫米切换：Q<br>翻转元器件：空格<br>改变线宽，孔径：选中导线或过孔,同时按下Tab键<br>选中目标：shift+单击</p><p>PCB换层并自动添加过孔：小键盘上的“*”<br>系统设置：DXP-&gt;preferences<br>其中General–Use localized resources中文<br>其中Backup ：设置备份时间<br>树形图标：home<br>快捷键：右下角help-shortcuts<br>默认布局：View-Desktop layouts–Default<br>窗口缩回的速度：DXP-&gt;preferences-&gt;system-&gt;view–Hidedelay<br>打开不同面板：右下角System等等<br>切换不同窗口：ctrl+tab<br>放大和缩小：ctrl+鼠标中键滚轴<br>修改右下方的边框(title，日期)格式：DeSign-Template-Set Template File Name…A4</p><p><strong>走线自动延长：</strong> <strong>Drag—ctrl+鼠标拖动</strong></p><p>复制目标：选择目标，按住shift拖动<br>自动添加元件编号：Tools-&gt;Annotate Schematics<br>Preferences–&gt;Schematic–&gt;Graphical Editing Convert Special Strings 转换特殊字符串</p><p>如何全局修改<br>例如：单击电容C1选中，鼠标右键选择Find Similar Objects (Select Matching 选中，二步骤可以跳过</p><p>(1) Part Comment —same Current Footprint —same ,点击OK按钮<br>(2) Select ALL<br>(3) SCH Inspector 窗口 修改 Footprint<br>Tools–&gt;FootPrint Manager</p><p>分层设计</p><p>(1)一种水平设置，N个分图 ，net设置全局(project–&gt;project options–&gt;<a href="http://www.wenkuxiazai.comIdentifier">http://www.wenkuxiazai.comIdentifier</a> Scope…Gloal) 不推荐<br>(2)一种垂直设置</p><p>，一个总图(Sheet Entry),N个分图(PORT) 连接只能Sheet Entry到PORT<br>第二种方法：<br>(1)Place sheet Symbol(方框) 和sheet Entry(放在方框边界内侧)<br>(2)选择sheet Symbol，右键选择&quot;Sheetsymbol actions&quot;–creat sheet from symbol<br>原理图库<br>(1) File–&gt;New–&gt;Library–&gt;sch…<br>(2) 右边下方SCH打开SCH Library</p><p>窗口<br>(3) Place-&gt;RecTangle,注意放在原点<br>(4) Library Components Properties<br>Designator U?<br>Comment max232<br>Symbol Refernece max234<br>(5) 可将一个元件库分为两个Part,例如parta,partb(通过Tools–&gt;new part)<br>特殊用途：选择该元件，按F1打开该元件的pdf文档<br>Library Components Properties–&gt;Parameters for Component --&gt;Add…<br>Name: HelpURL Value: C:\zy\abc.pdf#page=5</p><p>PCB库</p><p>(1) File–&gt;New–&gt;Library–&gt;pcb…<br>(2) 右边下方PCB打开pcb Library 窗口<br><strong>集成库</strong></p><p>(1) File–&gt;New–&gt;Project–&gt;Interger Library<br>(2) 新建sch.lib和pcb.lib, 在sch.lib中选择Tools–&gt;Model Manage…<br>(3) Project–&gt;Compile Integrated Library<br>盲孔（BIINDVIA）：从印制板内仅延展到一个表层的导通孔。<br>埋孔（BURIEDVIA）：未延伸到印制板表面的一种导通孔。</p><p>PCB绘制</p><p>(1) 在PCB中 Design–&gt;ImportChanges From…<br>(2) S+N 选择相同net的线<br>(3) Design–&gt;Board layers &amp; color–&gt;show/hide polygons hide (将覆铜隐藏) （L快捷键）<br>(4) 查看PCB元件，通过打开PCB窗口，选择Components<br>(5) shift+S 单层打开或关闭<br>(6) 对弱小信号可选择包地处理(Tools–&gt;Outline Selected Object)<br>(7) Tools–&gt;Design Rule Check…<br>(8) File–&gt;Fabrication Outputs–&gt;Gerber Files</p><p><strong>覆铜：</strong></p><p>place–&gt;polygon Pour…<br>\1. Pour Over Same Net Polygons Only 相同net铜箔覆盖<br>\2. Pour Over All Same Net Objects 铜箔覆盖相同net部分（将相同net的导线等等融合了)<br>注意 ：如果要保存为PCB4.0 Binary File(*.pcb), 覆铜要选择网格式，(可将网格Track With和GridSize设置一样，就如同Solid格式了)<br>如何隐藏所有Designator(即u1,r1,r2…)<br>(1) PCB filer–&gt;IsDesignator 选择所有Designator<br>(2) PCB Inspector–&gt;Hide<br>如何将Designator(即u1,r1,r2…)自动放置在元件附件<br>(1) PCB filer–&gt;IsComponent<br>(2) Align–&gt;Position Component Text…<br>将PCB翻转 查看反面方便 view–&gt;FilpBoard<br>PCB查看层数 Design–&gt;Layer Stack Manager<br>“类” Design–&gt;class<br>比如新建一个net class ,把Vc3.3 VC5等加入，然后在rule中选择Net class,这样规则适用范围就是自己定义的类了<br>按键2–2D 按键3–3D</p><p>原理图画线：P+W</p><p>PCB图画线： P+T<br>在原理图里同快速查找元器件：CTRL+F<br>在PCB里面快速查的元件：J+C</p><p>选择net： ctr+H或S+N<br>去掉全部选中物体：E+E+A<br>删除两个焊点间的导线：T+U+C</p><p>单层打开或关闭：shift+S</p><p>去掉过滤：shift+C</p><p>在交互布线的过程中，切换布线形状：Shift+空格键</p><p>拖动时连线跟着延长：ctrl+鼠标左键拖动</p><p>PCB选择相同net，并高亮：ctrl+鼠标右键</p><p>hide/show层：ctrl+D</p><p>**原理图和PCB快速切换：**<strong>ctrl+crosspobe</strong></p><p>分图和总图的切换：ctrl+上下箭头<br>测量距离：ctrl+M<br>放弃上一步操作：Backspace键</p><p><strong>一、PCB中常用快捷键</strong></p><ul><li>R+L 输出PCB中所有网络的布线长度</li><li>Ctrl+左键点击对正在布的线完成自动布线连接</li><li>M+G 可更改铜的形状;</li><li>按P+T在布线状态下，按Shift+A可直接进行蛇线走线</li><li>T+R对已布完的线进行蛇线布线</li><li>E++M+C点击空白出可迅速找到PCB上想要的元件</li><li>Backspace 撤销正在布线的上一步操作</li><li>* 切换布线层，可在布线过程中放置过孔</li><li>Ctrl+Shift 切换层并放置过孔</li><li>F8/E+O+S设置圆心点</li><li>M+I 翻转选中的元件</li><li>P+T 布线</li><li>T+E 补泪滴</li><li>P+G 铺铜</li><li>S+Y 单层选择线</li><li>E+B 选择进行复制</li></ul><p><strong>二、以下来源郑振宇老师学生总结：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qRFdYM01HdFBJZWswOFRtaHlqNEF6bkh3VWM3SHg2TkFTM0RCaFNwN3F4aWNSUVZvd0JRYWRpYXcvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qNUxhdlhUS09YOHo3UEFlRnVxQjlZQTdkZExmd1RzR3VCRFFLMWNwWWliR2ljVTZ0bmx2VHA0V2cvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qVkdpYUJuZ2FKMU9VYXZ5TXZNTFhLSUU5aWJjUE5qbklZd2h4N0RtbUl0c3d5VHl3VkQwcGg0VlEvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><strong>三、BGA 扇出注意事项</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qMWdkdDd2OWdPZmNqVDBSc3NsRmpKa2ljaWE5Y01nQTVKOUludWRCcUtpYmtOR0ZRZnV5RFB2RlRnLzY0MD93eF9mbXQ9cG5n" alt="640?wx_fmt=png" loading="lazy"></p><p><strong>四、常见的单位换算</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qNmlhRjFTaWNBQzVuWEY1OGZpYm5nUGNCelhXelgxOWhFaWN6eUd1S0RoaWNvSkJsMWw2YmhYaWF5Y0RRLzY0MD93eF9mbXQ9cG5n" alt="640?wx_fmt=png" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL21tYml6LnFwaWMuY24vbW1iaXovNnptOEZxekU3UncxSFNRUTNpY2RpYWNDcEVpY2dselNUWUpBcmdqdnRVbGV3OTNJemlhZTZIcklDeldjV05ZVWZVQzhPWFZFT1Z2b2paZFpTWmliT2w3ZGU4QS82NDA_" alt="640?" loading="lazy"></p><p>图文转自https://blog.csdn.net/woshiyuzhoushizhe/article/details/97000298，仅供参考</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> AD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>艹</title>
      <link href="posts/4c7020/"/>
      <url>posts/4c7020/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc"         src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1cV411S7DD" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远古项目</title>
      <link href="posts/78f61393/"/>
      <url>posts/78f61393/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>成本很低大约花了不到一百，视频里的是第一代机器，后续还会开发升级版本。</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1bZ4y1j76W" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《关于吃个猕猴桃酸到脸部变形这档事》</title>
      <link href="posts/668164b5/"/>
      <url>posts/668164b5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1TK411K7XP/" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这就是赛博抖枪术么，i了i了</title>
      <link href="posts/38ba560b/"/>
      <url>posts/38ba560b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>不久前入手了赛博朋克2077，but，bug是真的多。。。。。。</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1nr4y1F7Dg/" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><p>还有这个大字。。。。无语</p><img src="https://s3.ax1x.com/2020/12/19/rU1dYR.md.png" alt="rU1dYR.md.png" style="zoom:50%;" / loading="lazy"><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣诞节（×） 万圣节（√）</title>
      <link href="posts/cdeb55ca/"/>
      <url>posts/cdeb55ca/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>今天在打守望的时候遇到了诡异的事情详情看视频</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1kv41147K3" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mc混剪（视频）</title>
      <link href="posts/c13eda59/"/>
      <url>posts/c13eda59/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>许久之前做的视频，练手用的，挺怀念的</center><span id="more"></span><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奥斯夫托洛斯基（视频）</title>
      <link href="posts/30c0c306/"/>
      <url>posts/30c0c306/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>之前闲的无聊，做的一个小视频，仅供娱乐，还望轻喷，(狗头保命)</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1j7411C7s6" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code编写Keil工程</title>
      <link href="posts/8eea644e/"/>
      <url>posts/8eea644e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="前言">前言</h3><p>keil 作为最经典的入门IDE，尽管功能强大，但是界面不太友好，也不支持常用的代码自动补全，代码重构等基本功能，代码量多了以后，程序的编写，调用，查看，修改等都很不方便。之前看到网上很多人都用的code进行的开发，于是我也搞了一个。我将过程记录下来，方便自己和其他人查阅和学习。</p><p>通常换了一个开发工具软件，需要重新搭建开发环境，这是很麻烦的事情，但是使用VS Code + Keil Assistant插件可以让这个过程变得非常简单。十分感谢写这个插件的大神！</p><p>另外，博客里的图片是我随手从网上截取的，只是个参考例子作用，版本可能较老旧，小伙伴们下载的时候选择最新的即可</p><span id="more"></span><hr><h3 id="大致过程">大致过程</h3><ul><li><p>1、首先下载一个CODE的安装包，用搜索引擎查一下，找到官方的安装包</p><img src="https://s3.ax1x.com/2020/12/15/rMqAW6.png" alt="rMqAW6.png" style="zoom: 80%;" / loading="lazy"></li><li><p>VS Code官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li><li><p>2、其次按照说明以及需求安装</p></li><li><p>3、配置环境</p></li><li><p>4、安装插件</p><hr></li></ul><h3 id="中文化">中文化</h3><p>大部分刚入手的的小伙伴可能看不懂英文，所以可以下载一个中文的插件</p><p>1、在插件里面搜索chinexe就可以找到中文化的插件了</p><p><img src="https://s3.ax1x.com/2020/12/15/rMLoUs.jpg" alt="rMLoUs.jpg" border="0" style="zoom: 50%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20190118174440530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211bXUxOTk4,size_16,color_FFFFFF,t_70" alt="2" style="zoom:50%;" / loading="lazy"></p><img src="https://s3.ax1x.com/2020/12/15/rMOWJ1.md.png" alt="rMOWJ1.md.png"  / loading="lazy"><p>2、安装好插件后可以使用快捷键Shift+Ctrl+P，然后输入Configure Language</p><p>3、选中打开之后就会打开 locale.json 文件</p><p>{<br>// 定义 VSCode 的显示语言。</p><p>“locale”:“en”  ；<br>}</p><p>4、将en改成zh-CN重启后就变成中文</p><hr><h3 id="安装keil插件">安装keil插件</h3><p>同样的，在插件那里查找Keil Assistant</p><p><img src="https://img-blog.csdnimg.cn/20201122183739896.png#pic_center" alt="keil插件" loading="lazy"></p><p>C/C++ IntelliSense（PS：这个插件安装好就不用管它了，要问问什么，因为没啥可管的）</p><p><img src="https://s3.ax1x.com/2020/12/15/rMX66f.md.png" alt="rMX66f.md.png" loading="lazy"></p><hr><h3 id="keil-assistant的设置和使用">keil assistant的设置和使用</h3><p>打开Keil Assiatant的扩展设置，填写UV4.exe的路径到对应位置即可。这里用的是Keil C51，如果是Keil MDK，就填写在下面。</p><p><img src="https://s3.ax1x.com/2020/12/15/rMvnIJ.md.png" alt="rMvnIJ.md.png" loading="lazy"></p><p>然后就可以添加Keil工程到VS Code了：</p><p><img src="https://s3.ax1x.com/2020/12/15/rMxPTe.md.png" alt="rMxPTe.md.png" loading="lazy"></p><p>点击这里进行编译，或者按F7编译：</p><p><img src="https://s3.ax1x.com/2020/12/15/rMxum8.png" alt="rMxum8.png" loading="lazy"></p><hr><p>但是注意，VSCode只是一个纯文本<strong>编辑器</strong>(editor)，不是IDE(集成开发环境)，不含<strong>编译器</strong>(compiler)和许多其它功能，所以需要自己先搭建环境。但是对很多刚上手或者初次使用的朋友来说，面对一堆的环境变量操作，搭建环境就成了一个麻烦事，动辄就要十几分钟甚至几十分钟。</p><hr><p>我遇到的问题主要是配置c语言环境时MinGw必需文件下载不下来（f**k the wall）</p><p><img src="https://s3.ax1x.com/2020/12/10/rFW7vj.md.png" alt="rFW7vj.md.png" loading="lazy"></p><p>于是乎，去网上找了另一条途径，这个大佬做成了视频参考如下</p><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/av52434248" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="80%" height="500" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><p>就是这个版本较老了，新的方法还在找。</p><p>分割线***</p><hr><p>新的方法找到了</p><p>MinGW64 链接：<a href="https://pan.baidu.com/s/12WgeDh6MrnOI9SwPBF7IzA">https://pan.baidu.com/s/12WgeDh6MrnOI9SwPBF7IzA</a><br>提取码：bh7u</p><p>网上有一些朋友分享了MinGW64的文件，直接下载下来放到一些地方别再动就可以了。</p><h3 id="使用教程"><strong>使用教程</strong></h3><p>配置一下系统变量即可，具体教程可以去网上寻找一下，在此不再赘述（水平不足）。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习历程</title>
      <link href="posts/ecf03602/"/>
      <url>posts/ecf03602/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="center-从前辈那里讨教了一些方法-大致就是下面这些-center"><center>从前辈那里讨教了一些方法，大致就是下面这些。</center></h3><span id="more"></span><ul><li><p>1、STM32 Cube MX使用方法</p><p>2、STM32 HAL库使用方法</p><p>3、STM32启动文件理解</p><p>4、时钟系统（时钟树）梳理、systick定时器</p><p>5、GPIO（8种状态）使用</p><p>6、NVIC中断应用</p><p>7、USART串口通信</p><p>8、DMA外设的应用（基于串口）</p><p>9、IIC外设应用</p><p>10、SPI外设应用</p><p>11、ADC 电压采集</p><p>12、TIM定时器</p><p>13、RTC实时时钟</p><p>14、看门狗应用</p><p>15、PWR电源管理</p></li></ul><hr><p>还有就是不要只是看看例程玩一玩，做项目就简单改改代码。要深入了解底层的原理，比如一开始的点灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);<span class="comment">//使能GPIOF时钟</span></span><br></pre></td></tr></table></figure><p>很多人都知道这个是用来初始化io口用的，但是为什么这么写就不清楚了；</p><p>这时候就要翻一翻官方的手册了，主要有两本一本《STM32中文参考手册》（因为英语不好），还有一本《stm32固件库中文说明》（理由同上）。遇到一些小麻烦可以去这俩本书上查一下，说不定就会有很大收获。</p><hr><p>另外还有很多的企业或者公司或者社区又或者团队都会有一些参考资料，觉得有用的就拿过来用就是了。例如正点原子，野火等</p><p>遇到不会的问题尽量少去东奔西跑的去询问，很多人都很烦这种行为的。要学会思考，学会自己解决问题的技能，这点非常重要。也有很多人是直接百度的，有时候确实能得到一些答案，但是更多的时候还是一堆疑问。（黑人问号.jpg）毕竟百毒的作用还是有限的，这里建议去一些社区或者论坛来寻找解决方案。例如意法半导体官方，那里有很多的资料文献和文件，还有一些大神的解决方案（但是不多）。还有就是csdn，那里的带佬很多，解决方案也很全面，非常建议去那里查找你需要的答案。</p><p>最后朋友，希望我们能够一起进步、共同成长。</p><p>HOPE FOREVER</p><p>Your friend DarkFox</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32底层（3）</title>
      <link href="posts/6b873f70/"/>
      <url>posts/6b873f70/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>user</h1><p>/**</p><hr><ul><li>@file    Project/STM32F10x_StdPeriph_Template/main.c</li><li>@author  MCD Application Team</li><li>@version V3.5.0</li><li>@date    08-April-2011</li><li>@brief   Main program body</li></ul><hr><ul><li>@attention<br>*</li><li>THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</li><li>WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</li><li>TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</li><li>DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</li><li>FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</li><li>CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.<br>*</li><li><h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2></li></ul><hr><p>*/</p><p>/* Includes ------------------------------------------------------------------*/<br>#include “stm32f10x.h”<br>#include “stm32_eval.h”<br>#include &lt;stdio.h&gt;</p><p>#ifdef USE_STM32100B_EVAL<br>#include “stm32100b_eval_lcd.h”<br>#elif defined USE_STM3210B_EVAL<br>#include “stm3210b_eval_lcd.h”<br>#elif defined USE_STM3210E_EVAL<br>#include “stm3210e_eval_lcd.h”<br>#elif defined USE_STM3210C_EVAL<br>#include “stm3210c_eval_lcd.h”<br>#elif defined USE_STM32100E_EVAL<br>#include “stm32100e_eval_lcd.h”<br>#endif</p><p>/** @addtogroup STM32F10x_StdPeriph_Template</p><ul><li>@{<br>*/</li></ul><p>/* Private typedef -----------------------------------------------------------<em>/<br>/</em> Private define ------------------------------------------------------------*/<br>#ifdef USE_STM32100B_EVAL<br>#define MESSAGE1   “STM32 MD Value Line &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;  STM32100B-EVAL    &quot;<br>#elif defined (USE_STM3210B_EVAL)<br>#define MESSAGE1   “STM32 Medium Density”<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210B-EVAL    &quot;<br>#elif defined (STM32F10X_XL) &amp;&amp; defined (USE_STM3210E_EVAL)<br>#define MESSAGE1   &quot;  STM32 XL Density  &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210E-EVAL    &quot;<br>#elif defined (USE_STM3210E_EVAL)<br>#define MESSAGE1   &quot; STM32 High Density &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210E-EVAL    &quot;<br>#elif defined (USE_STM3210C_EVAL)<br>#define MESSAGE1   &quot; STM32 Connectivity &quot;<br>#define MESSAGE2   &quot; Line Device running”<br>#define MESSAGE3   &quot; on STM3210C-EVAL   &quot;<br>#elif defined (USE_STM32100E_EVAL)<br>#define MESSAGE1   &quot;STM32 HD Value Line &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;  STM32100E-EVAL    &quot;<br>#endif</p><p>/* Private macro -------------------------------------------------------------<em>/<br>/</em> Private variables ---------------------------------------------------------*/<br>USART_InitTypeDef USART_InitStructure;</p><p>/* Private function prototypes -----------------------------------------------<em>/<br>#ifdef <strong>GNUC</strong><br>/</em> With GCC/RAISONANCE, small printf (option LD Linker-&gt;Libraries-&gt;Small printf<br>set to ‘Yes’) calls __io_putchar() */<br>#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)<br>#else<br>#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE <em>f)<br>#endif /</em> <strong>GNUC</strong> */</p><p>/* Private functions ---------------------------------------------------------*/</p><p>/**</p><ul><li>@brief  Main program.</li><li>@param  None</li><li>@retval None<br><em>/<br>int main(void)<br>{<br>/</em>!&lt; At this stage the microcontroller clock setting is already configured,<br>this is done through SystemInit() function which is called from startup<br>file (startup_stm32f10x_xx.s) before to branch to application main.<br>To reconfigure the default setting of SystemInit() function, refer to<br>system_stm32f10x.c file<br>*/</li></ul><p>/* Initialize LEDs, Key Button, LCD and COM port(USART) available on<br>STM3210X-EVAL board ******************************************************/<br>STM_EVAL_LEDInit(LED1);<br>STM_EVAL_LEDInit(LED2);<br>STM_EVAL_LEDInit(LED3);<br>STM_EVAL_LEDInit(LED4);</p><p>/* USARTx configured as follow:<br>- BaudRate = 115200 baud<br>- Word Length = 8 Bits<br>- One Stop Bit<br>- No parity<br>- Hardware flow control disabled (RTS and CTS signals)<br>- Receive and transmit enabled<br>*/<br>USART_InitStructure.USART_BaudRate = 115200;<br>USART_InitStructure.USART_WordLength = USART_WordLength_8b;<br>USART_InitStructure.USART_StopBits = USART_StopBits_1;<br>USART_InitStructure.USART_Parity = USART_Parity_No;<br>USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</p><p>STM_EVAL_COMInit(COM1, &amp;USART_InitStructure);</p><p>/* Initialize the LCD */<br>#ifdef USE_STM32100B_EVAL<br>STM32100B_LCD_Init();<br>#elif defined (USE_STM3210B_EVAL)<br>STM3210B_LCD_Init();<br>#elif defined (USE_STM3210E_EVAL)<br>STM3210E_LCD_Init();<br>#elif defined (USE_STM3210C_EVAL)<br>STM3210C_LCD_Init();<br>#elif defined (USE_STM32100E_EVAL)<br>STM32100E_LCD_Init();<br>#endif</p><p>/* Display message on STM3210X-EVAL LCD ************************************<em>/<br>/</em> Clear the LCD */<br>LCD_Clear(LCD_COLOR_WHITE);</p><p>/* Set the LCD Back Color <em>/<br>LCD_SetBackColor(LCD_COLOR_BLUE);<br>/</em> Set the LCD Text Color */<br>LCD_SetTextColor(LCD_COLOR_WHITE);<br>LCD_DisplayStringLine(LCD_LINE_0, (uint8_t *)MESSAGE1);<br>LCD_DisplayStringLine(LCD_LINE_1, (uint8_t *)MESSAGE2);<br>LCD_DisplayStringLine(LCD_LINE_2, (uint8_t *)MESSAGE3);</p><p>/* Retarget the C library printf function to the USARTx, can be USART1 or USART2<br>depending on the EVAL board you are using ********************************/<br>printf(&quot;\n\r %s&quot;, MESSAGE1);<br>printf(&quot; %s&quot;, MESSAGE2);<br>printf(&quot; %s\n\r&quot;, MESSAGE3);</p><p>/* Turn on leds available on STM3210X-EVAL **********************************/<br>STM_EVAL_LEDOn(LED1);<br>STM_EVAL_LEDOn(LED2);<br>STM_EVAL_LEDOn(LED3);<br>STM_EVAL_LEDOn(LED4);</p><p>/* Add your application code here<br>*/</p><p>/* Infinite loop */<br>while (1)<br>{<br>}<br>}</p><p>/**</p><ul><li>@brief  Retargets the C library printf function to the USART.</li><li>@param  None</li><li>@retval None<br><em>/<br>PUTCHAR_PROTOTYPE<br>{<br>/</em> Place your implementation of fputc here <em>/<br>/</em> e.g. write a character to the USART */<br>USART_SendData(EVAL_COM1, (uint8_t) ch);</li></ul><p>/* Loop until the end of transmission */<br>while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)<br>{}</p><p>return ch;<br>}</p><p>#ifdef  USE_FULL_ASSERT</p><p>/**</p><ul><li>@brief  Reports the name of the source file and the source line number</li><li><pre><code>    where the assert_param error has occurred.</code></pre></li><li>@param  file: pointer to the source file name</li><li>@param  line: assert_param error line source number</li><li>@retval None<br><em>/<br>void assert_failed(uint8_t</em> file, uint32_t line)<br>{<br>/* User can add his own implementation to report the file name and line number,<br>ex: printf(“Wrong parameters value: file %s on line %d\r\n”, file, line) */</li></ul><p>/* Infinite loop */<br>while (1)<br>{<br>}<br>}<br>#endif</p><p>/**</p><ul><li>@}<br>*/</li></ul><p>/******************* © COPYRIGHT 2011 STMicroelectronics *<strong><strong>END OF FILE</strong></strong>/</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32c底层(2)</title>
      <link href="posts/6c0ac526/"/>
      <url>posts/6c0ac526/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>Fwlib-src</h1><p>/**</p><hr><ul><li>@file    misc.c</li><li>@author  MCD Application Team</li><li>@version V3.5.0</li><li>@date    11-March-2011</li><li>@brief   This file provides all the miscellaneous firmware functions (add-on</li><li><pre><code>     to CMSIS functions).</code></pre></li></ul><hr><ul><li>@attention<br>*</li><li>THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</li><li>WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</li><li>TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</li><li>DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</li><li>FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</li><li>CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.<br>*</li><li><h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2></li></ul><hr><p>*/</p><p>/* Includes ------------------------------------------------------------------*/<br>#include “misc.h”</p><p>/** @addtogroup STM32F10x_StdPeriph_Driver</p><ul><li>@{<br>*/</li></ul><p>/** @defgroup MISC</p><ul><li>@brief MISC driver modules</li><li>@{<br>*/</li></ul><p>/** @defgroup MISC_Private_TypesDefinitions</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Defines</p><ul><li>@{<br>*/</li></ul><p>#define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)<br>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Macros</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Variables</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_FunctionPrototypes</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Functions</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@brief  Configures the priority grouping: pre-emption priority and subpriority.</li><li>@param  NVIC_PriorityGroup: specifies the priority grouping bits length.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority</code></pre></li><li><pre><code>                           4 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority</code></pre></li><li><pre><code>                           3 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority</code></pre></li><li><pre><code>                           2 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority</code></pre></li><li><pre><code>                           1 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority</code></pre></li><li><pre><code>                           0 bits for subpriority</code></pre></li><li>@retval None<br><em>/<br>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));</li></ul><p>/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */<br>SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;<br>}</p><p>/**</p><ul><li>@brief  Initializes the NVIC peripheral according to the specified</li><li><pre><code>    parameters in the NVIC_InitStruct.</code></pre></li><li>@param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains</li><li><pre><code>    the configuration information for the specified NVIC peripheral.</code></pre></li><li>@retval None<br><em>/<br>void NVIC_Init(NVIC_InitTypeDef</em> NVIC_InitStruct)<br>{<br>uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;</li></ul><p>/* Check the parameters */<br>assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct-&gt;NVIC_IRQChannelCmd));<br>assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct-&gt;NVIC_IRQChannelPreemptionPriority));<br>assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct-&gt;NVIC_IRQChannelSubPriority));</p><p>if (NVIC_InitStruct-&gt;NVIC_IRQChannelCmd != DISABLE)<br>{<br>/* Compute the Corresponding IRQ Priority --------------------------------*/<br>tmppriority = (0x700 - ((SCB-&gt;AIRCR) &amp; (uint32_t)0x700))&gt;&gt; 0x08;<br>tmppre = (0x4 - tmppriority);<br>tmpsub = tmpsub &gt;&gt; tmppriority;</p><pre><code>tmppriority = (uint32_t)NVIC_InitStruct-&gt;NVIC_IRQChannelPreemptionPriority &lt;&lt; tmppre;tmppriority |=  NVIC_InitStruct-&gt;NVIC_IRQChannelSubPriority &amp; tmpsub;tmppriority = tmppriority &lt;&lt; 0x04;    NVIC-&gt;IP[NVIC_InitStruct-&gt;NVIC_IRQChannel] = tmppriority;/* Enable the Selected IRQ Channels --------------------------------------*/NVIC-&gt;ISER[NVIC_InitStruct-&gt;NVIC_IRQChannel &gt;&gt; 0x05] =  (uint32_t)0x01 &lt;&lt; (NVIC_InitStruct-&gt;NVIC_IRQChannel &amp; (uint8_t)0x1F);</code></pre><p>}<br>else<br>{<br>/* Disable the Selected IRQ Channels -------------------------------------*/<br>NVIC-&gt;ICER[NVIC_InitStruct-&gt;NVIC_IRQChannel &gt;&gt; 0x05] =<br>(uint32_t)0x01 &lt;&lt; (NVIC_InitStruct-&gt;NVIC_IRQChannel &amp; (uint8_t)0x1F);<br>}<br>}</p><p>/**</p><ul><li>@brief  Sets the vector table location and Offset.</li><li>@param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_VectTab_RAM</code></pre></li><li><pre><code>@arg NVIC_VectTab_FLASH</code></pre></li><li>@param  Offset: Vector Table base offset field. This value must be a multiple</li><li><pre><code>    of 0x200.</code></pre></li><li>@retval None<br><em>/<br>void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));<br>assert_param(IS_NVIC_OFFSET(Offset));</li></ul><p>SCB-&gt;VTOR = NVIC_VectTab | (Offset &amp; (uint32_t)0x1FFFFF80);<br>}</p><p>/**</p><ul><li>@brief  Selects the condition for the system to enter low power mode.</li><li>@param  LowPowerMode: Specifies the new mode for the system to enter low power mode.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_LP_SEVONPEND</code></pre></li><li><pre><code>@arg NVIC_LP_SLEEPDEEP</code></pre></li><li><pre><code>@arg NVIC_LP_SLEEPONEXIT</code></pre></li><li>@param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.</li><li>@retval None<br><em>/<br>void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_LP(LowPowerMode));<br>assert_param(IS_FUNCTIONAL_STATE(NewState));</li></ul><p>if (NewState != DISABLE)<br>{<br>SCB-&gt;SCR |= LowPowerMode;<br>}<br>else<br>{<br>SCB-&gt;SCR &amp;= (uint32_t)(~(uint32_t)LowPowerMode);<br>}<br>}</p><p>/**</p><ul><li>@brief  Configures the SysTick clock source.</li><li>@param  SysTick_CLKSource: specifies the SysTick clock source.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.</code></pre></li><li><pre><code>@arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.</code></pre></li><li>@retval None<br><em>/<br>void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));<br>if (SysTick_CLKSource == SysTick_CLKSource_HCLK)<br>{<br>SysTick-&gt;CTRL |= SysTick_CLKSource_HCLK;<br>}<br>else<br>{<br>SysTick-&gt;CTRL &amp;= SysTick_CLKSource_HCLK_Div8;<br>}<br>}</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/******************* © COPYRIGHT 2011 STMicroelectronics *<strong><strong>END OF FILE</strong></strong>/</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32底层（1）</title>
      <link href="posts/c18ef7fb/"/>
      <url>posts/c18ef7fb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>以下为我从网络上找到的cm3底层资料</p><h3 id="core">core</h3><p>/************************************************************************<strong>//</strong></p><ul><li>@file     core_cm3.c</li><li>@brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File</li><li>@version  V1.30</li><li>@date     30. October 2009</li><li></li><li>@note</li><li>Copyright © 2009 ARM Limited. All rights reserved.</li><li></li><li>@par</li><li>ARM Limited (ARM) is supplying this software for use with Cortex-M</li><li>processor based microcontrollers.  This file can be freely distributed</li><li>within development tools that are supporting such ARM based processors.</li><li></li><li>@par</li><li>THIS SOFTWARE IS PROVIDED “AS IS”.  NO WARRANTIES, WHETHER EXPRESS, IMPLIED</li><li>OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF</li><li>MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.</li><li>ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR</li><li>CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.</li><li></li></ul><p>******************************************************************************/</p><p>#include &lt;stdint.h&gt;</p><p>/* define compiler specific symbols <em>/<br>#if defined ( __CC_ARM   )<br>#define __ASM            __asm                                      /</em>!&lt; asm keyword for ARM Compiler          <em>/<br>#define __INLINE         __inline                                   /</em>!&lt; inline keyword for ARM Compiler       */</p><p>#elif defined ( <strong>ICCARM</strong> )<br>#define __ASM           __asm                                       /*!&lt; asm keyword for IAR Compiler          <em>/<br>#define __INLINE        inline                                      /</em>!&lt; inline keyword for IAR Compiler. Only avaiable in High optimization mode! */</p><p>#elif defined   (  <strong>GNUC</strong>  )<br>#define __ASM            __asm                                      /*!&lt; asm keyword for GNU Compiler          <em>/<br>#define __INLINE         inline                                     /</em>!&lt; inline keyword for GNU Compiler       */</p><p>#elif defined   (  <strong>TASKING</strong>  )<br>#define __ASM            __asm                                      /*!&lt; asm keyword for TASKING Compiler      <em>/<br>#define __INLINE         inline                                     /</em>!&lt; inline keyword for TASKING Compiler   */</p><p>#endif</p><p>/* ###################  Compiler specific Intrinsics  ########################### */</p><p>#if defined ( __CC_ARM   ) /<em>------------------RealView Compiler -----------------</em>/<br>/* ARM armcc specific functions */</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>__ASM uint32_t __get_PSP(void)<br>{<br>mrs r0, psp<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>__ASM void __set_PSP(uint32_t topOfProcStack)<br>{<br>msr psp, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>__ASM uint32_t __get_MSP(void)<br>{<br>mrs r0, msp<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>__ASM void __set_MSP(uint32_t mainStackPointer)<br>{<br>msr msp, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param   value  value to reverse</li><li>@return         reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>__ASM uint32_t __REV16(uint16_t value)<br>{<br>rev16 r0, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in signed short value with sign extension to integer</li><li></li><li>@param   value  value to reverse</li><li>@return         reversed value</li><li></li><li>Reverse byte order in signed short value with sign extension to integer<br>*/<br>__ASM int32_t __REVSH(int16_t value)<br>{<br>revsh r0, r0<br>bx lr<br>}</li></ul><p>#if (__ARMCC_VERSION &lt; 400000)</p><p>/**</p><ul><li>@brief  Remove the exclusive lock created by ldrex</li><li></li><li>Removes the exclusive lock which is created by ldrex.<br>*/<br>__ASM void __CLREX(void)<br>{<br>clrex<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Base Priority value</li><li></li><li>@return BasePriority</li><li></li><li>Return the content of the base priority register<br>*/<br>__ASM uint32_t  __get_BASEPRI(void)<br>{<br>mrs r0, basepri<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Base Priority value</li><li></li><li>@param  basePri  BasePriority</li><li></li><li>Set the base priority register<br>*/<br>__ASM void __set_BASEPRI(uint32_t basePri)<br>{<br>msr basepri, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Priority Mask value</li><li></li><li>@return PriMask</li><li></li><li>Return state of the priority mask bit from the priority mask register<br>*/<br>__ASM uint32_t __get_PRIMASK(void)<br>{<br>mrs r0, primask<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Priority Mask value</li><li></li><li>@param  priMask  PriMask</li><li></li><li>Set the priority mask bit in the priority mask register<br>*/<br>__ASM void __set_PRIMASK(uint32_t priMask)<br>{<br>msr primask, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Fault Mask value</li><li></li><li>@return FaultMask</li><li></li><li>Return the content of the fault mask register<br>*/<br>__ASM uint32_t  __get_FAULTMASK(void)<br>{<br>mrs r0, faultmask<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Fault Mask value</li><li></li><li>@param  faultMask  faultMask value</li><li></li><li>Set the fault mask register<br>*/<br>__ASM void __set_FAULTMASK(uint32_t faultMask)<br>{<br>msr faultmask, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Control Register value</li><li></li><li>@return Control value</li><li></li><li>Return the content of the control register<br>*/<br>__ASM uint32_t __get_CONTROL(void)<br>{<br>mrs r0, control<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Control Register value</li><li></li><li>@param  control  Control value</li><li></li><li>Set the control register<br>*/<br>__ASM void __set_CONTROL(uint32_t control)<br>{<br>msr control, r0<br>bx lr<br>}</li></ul><p>#endif /* __ARMCC_VERSION  */</p><p>#elif (defined (<strong>ICCARM</strong>)) /<em>------------------ ICC Compiler -------------------</em>/<br>/* IAR iccarm specific functions */<br>#pragma diag_suppress=Pe940</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>uint32_t __get_PSP(void)<br>{<br>__ASM(“mrs r0, psp”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>void __set_PSP(uint32_t topOfProcStack)<br>{<br>__ASM(“msr psp, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>uint32_t __get_MSP(void)<br>{<br>__ASM(“mrs r0, msp”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>void __set_MSP(uint32_t topOfMainStack)<br>{<br>__ASM(“msr msp, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>uint32_t __REV16(uint16_t value)<br>{<br>__ASM(“rev16 r0, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse bit order of value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse bit order of value<br>*/<br>uint32_t __RBIT(uint32_t value)<br>{<br>__ASM(“rbit r0, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (8 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 8 bit values)<br>*/<br>uint8_t __LDREXB(uint8_t *addr)<br>{<br>__ASM(“ldrexb r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (16 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 16 bit values<br>*/<br>uint16_t __LDREXH(uint16_t *addr)<br>{<br>__ASM(“ldrexh r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (32 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 32 bit values<br>*/<br>uint32_t __LDREXW(uint32_t *addr)<br>{<br>__ASM(“ldrex r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (8 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 8 bit values<br>*/<br>uint32_t __STREXB(uint8_t value, uint8_t *addr)<br>{<br>__ASM(“strexb r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (16 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 16 bit values<br>*/<br>uint32_t __STREXH(uint16_t value, uint16_t *addr)<br>{<br>__ASM(“strexh r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (32 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 32 bit values<br>*/<br>uint32_t __STREXW(uint32_t value, uint32_t *addr)<br>{<br>__ASM(“strex r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>#pragma diag_default=Pe940</p><p>#elif (defined (<strong>GNUC</strong>)) /<em>------------------ GNU Compiler ---------------------</em>/<br>/* GNU gcc specific functions */</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>uint32_t __get_PSP(void) <strong>attribute</strong>( ( naked ) );<br>uint32_t __get_PSP(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, psp\n\t”<br>“MOV r0, %0 \n\t”<br>“BX  lr     \n\t”  : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>void __set_PSP(uint32_t topOfProcStack) <strong>attribute</strong>( ( naked ) );<br>void __set_PSP(uint32_t topOfProcStack)<br>{<br>__ASM volatile (“MSR psp, %0\n\t”<br>“BX  lr     \n\t” : : “r” (topOfProcStack) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>uint32_t __get_MSP(void) <strong>attribute</strong>( ( naked ) );<br>uint32_t __get_MSP(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, msp\n\t”<br>“MOV r0, %0 \n\t”<br>“BX  lr     \n\t”  : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>void __set_MSP(uint32_t topOfMainStack) <strong>attribute</strong>( ( naked ) );<br>void __set_MSP(uint32_t topOfMainStack)<br>{<br>__ASM volatile (“MSR msp, %0\n\t”<br>“BX  lr     \n\t” : : “r” (topOfMainStack) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Base Priority value</li><li></li><li>@return BasePriority</li><li></li><li>Return the content of the base priority register<br>*/<br>uint32_t __get_BASEPRI(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, basepri_max” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Base Priority value</li><li></li><li>@param  basePri  BasePriority</li><li></li><li>Set the base priority register<br>*/<br>void __set_BASEPRI(uint32_t value)<br>{<br>__ASM volatile (“MSR basepri, %0” : : “r” (value) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Priority Mask value</li><li></li><li>@return PriMask</li><li></li><li>Return state of the priority mask bit from the priority mask register<br>*/<br>uint32_t __get_PRIMASK(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, primask” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Priority Mask value</li><li></li><li>@param  priMask  PriMask</li><li></li><li>Set the priority mask bit in the priority mask register<br>*/<br>void __set_PRIMASK(uint32_t priMask)<br>{<br>__ASM volatile (“MSR primask, %0” : : “r” (priMask) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Fault Mask value</li><li></li><li>@return FaultMask</li><li></li><li>Return the content of the fault mask register<br>*/<br>uint32_t __get_FAULTMASK(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, faultmask” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Fault Mask value</li><li></li><li>@param  faultMask  faultMask value</li><li></li><li>Set the fault mask register<br>*/<br>void __set_FAULTMASK(uint32_t faultMask)<br>{<br>__ASM volatile (“MSR faultmask, %0” : : “r” (faultMask) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Control Register value</li><li></li><li>@return Control value</li><li></li><li>Return the content of the control register<br>*/<br>uint32_t __get_CONTROL(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, control” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Control Register value</li><li></li><li>@param  control  Control value</li><li></li><li>Set the control register<br>*/<br>void __set_CONTROL(uint32_t control)<br>{<br>__ASM volatile (“MSR control, %0” : : “r” (control) );<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in integer value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in integer value<br>*/<br>uint32_t __REV(uint32_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“rev %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>uint32_t __REV16(uint16_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“rev16 %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Reverse byte order in signed short value with sign extension to integer</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in signed short value with sign extension to integer<br>*/<br>int32_t __REVSH(int16_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“revsh %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li><p>@brief  Reverse bit order of value</p></li><li></li><li><p>@param  value  value to reverse</p></li><li><p>@return        reversed value</p></li><li></li><li><p>Reverse bit order of value<br>*/<br>uint32_t __RBIT(uint32_t value)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“rbit %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (8 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 8 bit value<br>*/<br>uint8_t __LDREXB(uint8_t *addr)<br>{<br>uint8_t result=0;</p><p>__ASM volatile (“ldrexb %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (16 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 16 bit values<br>*/<br>uint16_t __LDREXH(uint16_t *addr)<br>{<br>uint16_t result=0;</p><p>__ASM volatile (“ldrexh %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (32 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 32 bit values<br>*/<br>uint32_t __LDREXW(uint32_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“ldrex %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (8 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 8 bit values<br>*/<br>uint32_t __STREXB(uint8_t value, uint8_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strexb %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (16 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 16 bit values<br>*/<br>uint32_t __STREXH(uint16_t value, uint16_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strexh %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (32 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 32 bit values<br>*/<br>uint32_t __STREXW(uint32_t value, uint32_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strex %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>#elif (defined (<strong>TASKING</strong>)) /<em>------------------ TASKING Compiler ---------------------</em>/<br>/* TASKING carm specific functions */</p><p>/*</p><ul><li>The CMSIS functions have been implemented as intrinsics in the compiler.</li><li>Please use “carm -?i” to get an up to date list of all instrinsics,</li><li>Including the CMSIS ones.<br>*/</li></ul><p>#endif</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的照片</title>
      <link href="posts/68ac9c73/"/>
      <url>posts/68ac9c73/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>照片体积有点大，缓冲的可能有点慢</center><span id="more"></span><p><a href="https://imgchr.com/i/0xrBnK"><img src="https://s1.ax1x.com/2020/10/19/0xrBnK.jpg" alt="0xrBnK.jpg" loading="lazy"></a><br><a href="https://imgchr.com/i/0xrr7D"><img src="https://s1.ax1x.com/2020/10/19/0xrr7D.jpg" alt="0xrr7D.jpg" loading="lazy"></a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 随拍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过山车</title>
      <link href="posts/224ff270/"/>
      <url>posts/224ff270/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>狐言乱语</h1><p>RTkldTIwMENBNiV1MjAwQzk2JTIwRTUldTIwMEM4NSV1MjAwQz<br>g4JTIwRTUldTIwMEM5MSV1MjAwQ0EyJTIwRUYldTIwMENCQyV<br>1MjAwQzhDJTIwRTQldTIwMENCQiV1MjAwQzhBJTIwRTUldTIwM<br>ENBNCV1MjAwQ0E5JTIwRTkldTIwMEM5MiV1MjAwQzg4JTIwRT<br>QldTIwMENCOCV1MjAwQzhEJTIwRTYldTIwMEM4OCV1MjAwQ0Iz</p><p>RTUldTIwMENCRiV1MjAwQzgzJTIwRTYldTIwMEM4MyV1MjAwQzg1<br>JTIwRTQldTIwMENCOSV1MjAwQzlGJTIwRTUldTIwMENBNiV1MjAw<br>QzgyJTIwRTUldTIwMEM5MCV1MjAwQzhDJTIwRTgldTIwMENCRiV1<br>MjAwQzg3JTIwRTUldTIwMENCMSV1MjAwQ0IxJTIwRTgldTIwMENC<br>RCV1MjAwQ0E2JTIwRTQldTIwMENCOCV1MjAwQzgwJTIwRTgldTIw<br>MEM4OCV1MjAwQ0FDJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwRT<br>UldTIwMEM4RSV1MjAwQzlGJTIwRTYldTIwMEM5QyV1MjAwQ0FDJT<br>IwRTQldTIwMENCQiV1MjAwQ0E1JTIwRTQldTIwMENCOCV1MjAwQ0<br>JBJTIwRTgldTIwMEM4NyV1MjAwQ0FBJTIwRTUldTIwMENCNyV1MjA<br>wQ0IxJTIwRTUldTIw<br>MEM5NSV1MjAwQzhBJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwRTU<br>ldTIwMENCNyV1MjAwQ0IyJTIwRTcldTIwMENCQiV1MjAwQzhGJTIwR<br>TgldTIwMENCNiV1MjAwQzg1JTIwRTgldTIwMENCRCV1MjAwQ0E2JT<br>IwRTQldTIwMENCQSV1MjAwQzg2JTIwRUYldTIwMENCQyV1MjAwQz<br>hDJTIwRTYldTIwMENCMiV1MjAwQ0ExJTIwRTYldTIwMEM4MyV1MjA<br>wQ0IzJTIwRTUldTIwMEM4OCV1MjAwQ0IwJTIwRTUldTIwMEM4MyV<br>1MjAwQzhGJTIwRTUldTIwMEM5RCV1MjAwQzkwJTIwRTgldTIwMENC<br>RiV1MjAwQzg3JTIwRTUldTIwMENCMSV1MjAwQ0IxJTIwRTgldTIwME<br>NCRCV1MjAwQ0E2JTIwRTQldTIwMENCOCV1MjAwQzgwJTIwRTgldT<br>IwMEM4OCV1MjAwQ0FDJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwR<br>TcldTIwMEM5QiV1MjAwQ0I0JTIwRTQldTIwMENCOCV1MjAwQzhBJTI<br>wRTcldTIwMEM5QiV1MjAwQ0I0JTIwRTQldTIwMENCOCV1MjAwQzhC<br>JTIwRTMldTIwMEM4MCV1MjAwQzgy</p><p><u>E9‌92‌88 E5‌88‌BA E6‌BF‌80 E3‌80‌82</u></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Fox saying </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-3</title>
      <link href="posts/63792a05/"/>
      <url>posts/63792a05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今天做了个小题</p><p>题目如下</p><hr><h2 id="题目描述：菜狗找到了文件中的彩蛋很开心-给菜猫发了个表情包00c8s0-gif">题目描述：菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包<br><img src="https://s1.ax1x.com/2020/10/08/00c8s0.gif" alt="00c8s0.gif" loading="lazy"></h2><span id="more"></span><p>我们很容易就能看出，这个动图里面有一帧是带二维码的，于是乎，把这一帧给抽出来。s<br><img src="https://s1.ax1x.com/2020/10/08/00cQRs.png" alt="00cQRs.png" loading="lazy"><br>我们明显看出这个二维码缺了三块 （定位角）。<br>于是乎，祭出了我的大ps。<br>从网络上找了一个定位角</p><hr><p><img src="https://s1.ax1x.com/2020/10/08/00cnIg.th.png" alt="00cnIg.th.png" loading="lazy"><br>简单修一下之后p进去图片</p><hr><p><img src="https://s1.ax1x.com/2020/10/08/00cMGj.png" alt="00cMGj.png" loading="lazy"></p><hr><p>之后找个二维码工具扫描一下就行了，就可以获得flag了。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-2</title>
      <link href="posts/147e1a93/"/>
      <url>posts/147e1a93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><hr><h3 id="题目如图所示">题目如图所示</h3><img src="https://s1.ax1x.com/2020/10/08/00bXQK.png" alt="00bXQK.png" style="zoom: 67%;" / loading="lazy"><span id="more"></span><hr><h3 id="下载下来附件">下载下来附件</h3><p><img src="https://s1.ax1x.com/2020/10/08/00q1S0.png" alt="00q1S0.png" loading="lazy"></p><hr><h3 id="打开pdf-里面是一张图片">打开pdf，里面是一张图片</h3><p><img src="https://s1.ax1x.com/2020/10/08/00qdYR.png" alt="00qdYR.png" loading="lazy"></p><hr><p><strong>结合题目，图片下面什么都没有（滑稽）</strong><br><strong>就能猜出个大概了，应该是图片下面有一些小文章</strong><br><em><strong>but</strong></em>，<strong>pdf格式直接打开是不能编辑的</strong><br>这时候我们就要想几个<strong>特殊</strong>方案了</p><blockquote><ul><li>方案一</li><li>使用pdf转换器，将pdf文件转换为word文件</li></ul><ul><li>方案2</li><li>使用可以直接编辑pdf的编辑器（这个有很多，大多叫什么高级编辑器，很容易就能找到）</li></ul><ul><li>方案3</li><li>转换为文本格式打开（笑），找到flag并复制</li></ul></blockquote><p>这三种方法都可以找到图片下面的小东西，之后复制flag提交上去就完成了！</p><hr><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-1</title>
      <link href="posts/8d774b29/"/>
      <url>posts/8d774b29/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>misc最简单的一道题目,如图所示</center><hr><img src="https://s1.ax1x.com/2020/10/08/002kHf.png" alt="002kHf.png" style="zoom:67%;" / loading="lazy"><span id="more"></span><hr><p><strong>这道题主要是说明夺旗战的玩法，以及我们在做题时需要上传的答案的格式说明。</strong><br><strong>flag只要复制下来即可</strong></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
