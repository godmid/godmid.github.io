<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Just 读 it ！</title>
      <link href="/blogbeta/posts/1ae67c5b/"/>
      <url>/blogbeta/posts/1ae67c5b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用markdown画图</title>
      <link href="/blogbeta/posts/7f30ae8c/"/>
      <url>/blogbeta/posts/7f30ae8c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 有需要的话直接点击标题链接即可！  </center><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电机学</title>
      <link href="/blogbeta/posts/4cc868c2/"/>
      <url>/blogbeta/posts/4cc868c2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>其实根据b乎上面的大佬的话来看，我校的电机学的授课体系与方法不是很适合我，我初到电气这边，对整个体系还没有什么了解。所以根据b乎大佬的意见，应该先学<a href="http://books.google.com.sg/books/about/Electric_Motors_and_Drives.html?id=gbIDM60AvGAC&amp;redir_esc=y">这本书</a>（谷歌资源，需要特殊方法，你懂的）。想学好这门课，需要<strong>高等数学</strong>，<strong>大学物理</strong>，<strong>电路理论</strong>，<strong>电磁场</strong>基础。就很烦QAQ</p><p>关于我的话，到此为止，想清楚了解电机学是个啥玩意，以及怎么学，那就到<a href="https://www.zhihu.com/question/23537799"><strong>这</strong></a>看看吧。因为在车上，没带书先整理这一些。</p><h3 id="电机的基本概念">电机的基本概念</h3><p>电机是依据<a href="https://baike.baidu.com/item/%E7%94%B5%E7%A3%81%E6%84%9F%E5%BA%94%E5%AE%9A%E5%BE%8B/742673?fr=aladdin">电磁感应定律</a>和<a href="https://www.diangon.com/wenku/dgjs/dgjc/201412/00016790.html">电磁力定律</a>,由电路和磁路构成的能实现机电能量转换或信号传递与转换的<strong>装置</strong>。</p><p>也就是说电机是个看到到摸得着的东西，是实际存在的。所以电机学这门课也充满了很多实际应用的哲学。</p><span id="more"></span><h3 id="分类">分类</h3><p><a href="https://imgtu.com/i/6kgZRJ"><img src="https://s3.ax1x.com/2021/03/02/6kgZRJ.md.png" alt="6kgZRJ.md.png" loading="lazy"></a></p><p><a href="https://imgtu.com/i/6kgBo8"><img src="https://s3.ax1x.com/2021/03/02/6kgBo8.md.png" alt="6kgBo8.md.png" loading="lazy"></a></p><p>关于分类有很多，这两个是我用的书上的分类，也是最常用的分类。</p><p>由此我们可以看到，电机的种类有很多，不仅仅只是旋转电机，广义上来看，电路和磁路构成的能实现机电能量转换或信号传递与转换的<strong>装置</strong>都叫电机，所以功放也是电机（bushi）。</p><h3 id="材料">材料</h3><ul><li>导电材料：铜线等（构成电路）</li><li>导磁材料：硅钢片等（构成磁路）</li><li>结构材料：铸铁、铸钢、与钢板（用于承受重量）</li><li>绝缘材料：聚酯漆（清漆也可以的）、环氧树脂（胶佬狂喜）、玻璃丝带等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 电机学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电机学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘</title>
      <link href="/blogbeta/posts/30c2270c/"/>
      <url>/blogbeta/posts/30c2270c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="图片注释">图片注释</h3><p>你可以遵循如下写法来对图片进行注释。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Audits - Lighthouse</span>](<span class="link">https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png</span>)<span class="emphasis">_谷歌浏览器 Audits - Lighthouse 检测分数_</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/19/2bOIPC3Wv4Gxetm.png" alt="img-caption-example.png" loading="lazy"></p><h4 id="新增草稿">新增草稿</h4><p>1、添加草稿：hexo new draft “xx”<br>2、预览草稿：hexo server --draft<br>3、发布草稿：hexo publish draft “xx”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开源指北</title>
      <link href="/blogbeta/posts/6b54fb85/"/>
      <url>/blogbeta/posts/6b54fb85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏名言</title>
      <link href="/blogbeta/posts/b7933f67/"/>
      <url>/blogbeta/posts/b7933f67/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  我们能从游戏中学到什么？<center>英雄联盟：你一个人靠谱能做的很好，但一群人靠谱才能走的更远<center>阴阳师：你永远不知道运气什么时候会砸向你<center>魔兽世界：能陪你走过十二年的，不止朋友，还有艾泽拉斯<span id="more"></span><p>贪吃蛇大作战：长大的我们渐渐失去了横冲直撞的勇气</p><p>纪念碑谷：面对困难多转几个弯，总会遇见柳暗花明</p><p>守望先锋：生活中并不缺少美，只是缺少发现美的眼睛，热火朝天的战场中也有靓丽的风景</p><p>愤怒的小鸟：失败时总有一群猪在嘲笑你，而他们不知道有再来一次</p><p>俄罗斯方块：犯下的错误会积累，而成功会消失</p><p>我的世界:一个游戏，一个人生，你的世界里你和你的朋友可以体验你梦寐以求的自由</p><p>TF2:如果你不懂得努力，你始终会失败，不要害怕强大的队友，而是永不放弃的去猎杀他;如果你没有朋友，陪伴着你一起战斗的队友，就是你真正的朋友;其实失败并不可怕，可怕的是你选择了放弃</p><p>半条命:你要懂得反抗，你不是弱者，你只是没有反抗</p><p>玩具熊的五夜后宫:不要害怕黑暗中的恐惧，只害怕你不敢去面对</p><p>泰拉瑞亚:虽然你什么都没，但是自己动手，你就能努力的生存下去</p><p>传说之下:只要你有决心，你就会知道决心能帮你实现很多东西</p><p>求生之路:只要和你的队友同心协力你们永远能战胜所有困难</p> </center><p><strong>我的几位有才的朋友又加了几条：</strong></p><p>黑暗之魂——菜就多练练</p><p>王者荣耀:你永远不知道孤儿是队友还是对面</p><p>原神:充3000和零氪没有什么区别</p><p>消逝的光芒：那天，我们在夕阳下奔跑……艹，夜魔</p><p>只狼:重复显示的“菜”显得你很呆</p><p>本文阅览次数 ：<span id="twikoo_visitors">0</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏名言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程图</title>
      <link href="/blogbeta/posts/7f59c40c/"/>
      <url>/blogbeta/posts/7f59c40c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 程序框图也叫做流程图，它直观形象,易于理解，是描述算法的常用方式。美国国家标准化协会（ANSI）规定了一些常用的程序框图符号（如下图所示），已经成为世界各国程序工作者普遍采用的标准。  </center><img src="https://img-blog.csdnimg.cn/20190401090908105.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="1.jpg" style="zoom: 67%;" / loading="lazy"><span id="more"></span><p>从网络上找了个例子如下：</p><p><img src="https://img-blog.csdnimg.cn/20190401091228716.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190401090941605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjc1MzEz,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>是不是和上一篇文章的伪代码有点像呢？其实这两个可以结合使用的，并且还经常这么干。</p><h3 id="基本结构">基本结构</h3><p>不论什么程序设计语言，程序设计都有3种基本结构：顺序结构、选择结构和循环结构。三种基本结构的特点： 一个入口，一个出口，不出现死循环和死语句。</p><img src="https://img-blog.csdn.net/20180923195231944" alt="img" style="zoom:50%;" / loading="lazy"><img src="https://img-blog.csdn.net/20180923195402731" alt="img" style="zoom:50%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20181227164842271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMwMTExNA==,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 67%;" / loading="lazy"><h3 id="实际应用类型">实际应用类型</h3><p>一般我们理工狗使用的较多的是<u>系统流程图与程序流程图</u>。此外还有<u>业务路程图、任务流程图、页面流程图</u>。多了解几个流程图更有助于我们理解这个新的事物，故将其列举于此。</p><p>一般说来做系统高层设计时，首先会考虑系统的整体结构，把<strong>系统</strong>会分成多个<strong>子系统</strong>，每个<strong>子系统</strong>又分成多个<strong>程序模块</strong>。系统流程图用图形化的符号来记录整个系统和系统各模块的结构，描述了系统各子系统、相关文件和数据之间的关系，记录了整个系统的体系结构。系统流程图主要应用在系统架构阶段，是系统分析员或系统设计师对将要构建系统的一种描述，这种描述以简单图形化的方式给出了系统的整体结构，涉及到系统将要使用的各种部件，如<strong>子系统、数据库、磁盘、文件、用户的输入与输出</strong>等。而每个模块中，单个功能的实现则可用程序流程图来描述。</p><p>下面展示几个例子：</p><p><strong>程序流程图</strong>：</p><img src="https://img-blog.csdnimg.cn/20191216113341635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpcmRfdHA=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 80%;" / loading="lazy"><p><strong>系统流程图</strong>：</p><img src="https://img-blog.csdnimg.cn/20191216113443426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpcmRfdHA=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 80%;" / loading="lazy"><p>同为流程图，下面这三个商务类的了解一下即可，因为对c语言学习帮助不大。</p><p><strong>业务流程图</strong><br>业务流程图就是描述那些个体在什么条件下做了什么事情，他们之间有何关联。主要分三个方面：</p><ul><li>涉及到哪些主体？</li><li>每个主体都有哪些任务？</li><li>各个主体之间怎么联系的？</li></ul><p>一般涉及到多个主体，每个主体之间有联系，比如p2p平台。下图为p2p的业务流程图、涉及到借款人、平台、投资人、第三方支付四个主体，以及每个主题需要完成的任务、任务之间的联系和先后顺序。<br><img src="https://img-blog.csdnimg.cn/20190510152051210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy"></p><p><strong>任务流程图</strong></p><p>泳道图一般是从战略上分析整个业务流程，让你对公司所做的业务有个大概的了解，而任务流程图就是在你的产品操作上，用户通过什么样的操作来完成它的目标，比如你去银行ATM机器上取钱，你是如何一步步操作把钱取出来的，这里以p2p理财产品购买为例，来说明购买的任务流程图。</p><img src="https://img-blog.csdnimg.cn/20190510152125838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy">画流程图的时候注意主要流程和异常流程，在这个例子中，主要流程就是购买流程、异常流程就是没有设置交易密码、用户忘记交易密码、以及超过重试次数这些流程，画流程图的时候先画主要的流程，然后再把异常额流程考虑上，查漏补缺，保证不遗漏，产品的逻辑漏洞多半是由于异常情况没有考虑清楚，画流程图可以有效的帮助你梳理逻辑。<p><strong>页面流程图</strong></p><p>如果说业务流程图帮助你梳理战略，任务流程图帮助你梳理用户操作行为（主要给程序员看）、页面跳转流程在帮助你梳理各个页面之间的跳转关系（主要给UI和前端程序员看）这是一个逐步从整体到局部，从后端到前端的过程。</p><p>所有的产品都是由页面组成的，不论是APP、PC、H5都是由一个个页面组成的，页面流程图描述完成一个任务需要经过哪些步骤，你在画图的时候只需要清晰的表现出用户点击页面的什么地方，然后跳转到那个页面。主要由页面、行动点、连接线组成，下面以用户购买理财产品举例。</p><img src="https://img-blog.csdnimg.cn/20190510152236906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODExNDg5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  / loading="lazy">页面流程一般只考虑正常的操作流程就行，对于异常的操作流程在正常流程的旁边画出，例如：上面的正常页面跳转是用户购买这个流程，异常页面跳转流程是在购买界面金额不足的时候点击去充值流程，这个在正常流程的旁边标示出来就好。<p>对这三种流程图感兴趣的话，来源：<a href="https://blog.csdn.net/qq_32811489/article/details/90067054?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264089304%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161266580216780264089304&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-90067054.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">流程图介绍以及工具推荐</a></p><h3 id="文章来源：">文章来源：</h3><p><a href="https://blog.csdn.net/bird_tp/article/details/103559761?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-103559761.first_rank_v2_pc_rank_v29_10&amp;spm=1018.2226.3001.4187">流程图学习</a></p><p><a href="https://blog.csdn.net/qq_42675313/article/details/88941058?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264089304%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161266580216780264089304&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-6-88941058.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">一个简单的画程序框图例子</a></p><p>另外如果需要绘制流程图，下面为快速链接</p><p><a href="https://blog.csdn.net/langhonglin/article/details/81091727?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161266580216780264042445%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161266580216780264042445&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-10-81091727.first_rank_v2_pc_rank_v29_10&amp;utm_term=%E6%B5%81%E7%A8%8B%E5%9B%BE&amp;spm=1018.2226.3001.4187">画流程图的软件教程</a></p>]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言初步学习——伪代码(2)</title>
      <link href="/blogbeta/posts/7923a685/"/>
      <url>/blogbeta/posts/7923a685/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> VS CODE支持很多的插件，今天我们就是利用code的一个插件实现对新的语言（伪代码）进行编辑。  </center>code不像vs studio，他不是ide，没有运行的环境，而是一款轻量级的跨平台的编辑器。所以环境我们要自己进行搭建，新的语言要利用一些插件实现。<p><strong>原作者的小建议</strong>：这篇文章的最佳阅读姿势是在电脑上打开，并跟着文章一步步做下去。</p><span id="more"></span><h2 id="创建项目">创建项目</h2><p>编写插件的第一步，就是创建我们的目录结构。这里我们使用一个叫做<code>yo</code>的脚手架工具。<code>yo</code>是一个富有高度扩展性的通用脚手架，可以通过插件来实现不同目录结构和初始选项。VS Code官方提供了名为<code>generator-code</code>的插件，来进行插件目录的创建。首先我们需要安装<code>yo</code>以及插件<code>generator-code</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yo generator-code</span><br></pre></td></tr></table></figure><p>在安装完成以后，使用下面的命令来创建目录结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure><p>在运行<code>yo code</code>以后，它会问你下面这些问题。建议大家和我的输入保持相同，以免遇到意外。这里我们给伪代码的取名为<code>zhuanzhuan</code>，并且告诉VS Code，当碰到一个文件的扩展名为<code>.zhuanzhuan</code>或者<code>.zz</code>时，就要运行我们这个插件。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoaWFJb0lpYzVEVTloTFpXS0ZpYzNXeG1tTlRHb3N0MmliUk10RTZyVVQycG1yUUdsb0JoZUlEbG84Zy82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>输入完所有的选项以后，我们的插件目录就创建完成了。结构是这样子的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── CHANGELOG.md</span><br><span class="line"></span><br><span class="line">├── README.md</span><br><span class="line"></span><br><span class="line">├── language-configuration.json</span><br><span class="line"></span><br><span class="line">├── <span class="keyword">package</span>.json</span><br><span class="line"></span><br><span class="line">├── syntaxes</span><br><span class="line"></span><br><span class="line">├──     # 在tmLanguage.json中自定义语法</span><br><span class="line"></span><br><span class="line">│   └── zhuanzhuan.tmLanguage.json </span><br><span class="line"></span><br><span class="line">└── vsc-extension-quickstart.md</span><br></pre></td></tr></table></figure><h2 id="了解scope">了解Scope</h2><p>想要实现语法高亮，就需要将一串代码字符串，拆分成无数的小碎片，然后分别为它们指定<code>color</code>等样式。这些拆分后的小碎片，被称作<code>token</code>。这里的<code>token</code>与<code>jwt</code>中的<code>token</code>不同，并没有安全、令牌等方面的意思，而是更偏向&quot;符号&quot;的含义。我们来看一个简单例子???来理解一下这段话。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sum(a: number, b: number): number &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段TS代码中，我们定义了一个用于求和的函数。这时候我们按下VS Code快捷键，<code>shift+cmd+p</code>，然后输入<code>inspect editor tokens and scopes</code>，就可以看到每个token对应的类型。比如<code>sum</code>这个token的类型就是<code>function</code>，<code>a</code>和<code>b</code>的类型是<code>parameter</code>。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxod0tRZjNhclVnQUx5VDd4SFg0cGJFbGV6NXR2MGZoUmpCMmppYWVvVDVHcGN6MFl1QTZxbEJMQS82NDA?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>另外从截图的底部中，我们还可以看到，每个<code>token</code>还具有一个叫<code>textmate scope</code>的属性。通俗地说，<code>scope</code>指这个<code>token</code>所处的位置。</p><p>比如下面的代码片段里，有两个a变量。第一个是一个变量声明，而第二个是函数的参数之一。虽然它们都可以被笼统地称为变量，但是因为所处的<code>scope</code>不同（也就是处于不同环境），所以在VS Code中会被显示成不同的颜色。(由于微信文章中的代码高亮较弱，看不出区别。)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function sum(a: number, b: number): number &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持注释">支持注释</h2><p>至此前置知识已经介绍完了，现在开始真正修改脚手架创建的代码。我们的第一个目标是，让<code>zhuanzhuan</code>语言支持注释。</p><p>首先打开根目录下的<code>language-configuration.json</code>文件，找到<code>comments</code>字段，将<code>lineComment</code>从默认的<code>//</code>修改为<code>注释：</code>。完成以后按下F5启动Debug程序，VS Code会打开一个新的窗口，且我们的插件会在其中生效。在新窗口中，我们随意打开一个空文件夹，然后新建名为<code>fakeCode.zz</code>，并输入以下内容进行测试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">注释： 当我们用中文伪代码来描述执行过程的时候，</span><br><span class="line"></span><br><span class="line">注释： 不管什么内容都被显示成灰色的字符串了。</span><br><span class="line"></span><br><span class="line">注释： 我们的目标就是让它们变得五彩斑斓。</span><br><span class="line"></span><br><span class="line">注释： 不要试图重构这个方法，不然你会虚度一天的光阴。</span><br><span class="line"></span><br><span class="line">如果 ([某个条件]) &#123;</span><br><span class="line"></span><br><span class="line">  做一些条件成立时的事情</span><br><span class="line"></span><br><span class="line">&#125; 否则 &#123;</span><br><span class="line"></span><br><span class="line">  当条件不成立的时候...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">遍历 商品</span><br><span class="line"></span><br><span class="line">  打印 《商品id》</span><br><span class="line"></span><br><span class="line">结束</span><br><span class="line"></span><br><span class="line">函数 [函数名] &#123;</span><br><span class="line"></span><br><span class="line">  函数的内容</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，我们按下注释转换的快捷键<code>cmd+/</code>，就会惊讶地发现，VS Code会为你自动转换注释内容，在这之间转换：<code>注释：具体内容</code>⇔<code>具体内容</code>。</p><p>这样，我们的Hello World项目就完成了，开始做稍微复杂一些的事情。打开<code>/syntexes/zhuanzhuan.tmLanguage.json</code>文件，将这个文件的所有内容替换成下面的内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;$schema&quot;</span>: <span class="string">&quot;https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;scopeName&quot;</span>: <span class="string">&quot;source.zz&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;include&quot;</span>: <span class="string">&quot;#comments&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ],</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;comments&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;注释：&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;end&quot;</span>: <span class="string">&quot;\\n&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;beginCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment.open&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;endCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;punctuation.comment.close&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一眼看的时候都会懵的，我们慢慢理解一下这到底是什么意思。</p><ul><li><p>patterns &amp; repository</p><p>repository是规则的仓库，它规定了该条规则如何识别其适用的对象。而patterns则是规定了规则仓库中，哪些规则是需要生效的。所以如果我们想要加一条新的规则，需要在repository中加规则的内容，并在patterns中将这条规则<code>include</code>，不然即使在repository添加了规则也不会生效。</p></li><li><p>comments</p><p>这是我们加入的自定义规则，comments是规则的名字。</p></li><li><p>begin &amp; end</p><p>决定这条规则的适用对象。这里我们将<code>注释：</code>开头，回车符结尾的这部分字符作为适用对象。</p></li><li><p>beginCapture &amp; endCapture &amp; name</p><p>这三个属性，代表着我们赋予适用对象的scope名称。比这样一条注释&quot;注释：不要试图重构这个方法，不然你会虚度一天的光阴&quot;。，对应到我们这条规则，就是<code>注释：</code>这部分被赋予了<code>punctuation.comment.open</code> scope，不要试图重构这个方法，不然你会虚度一天的光阴。scope为<code>punctuation.comment</code>，最后的回车符scope为<code>punctuation.comment.open</code>。</p></li></ul><p>然后切换到刚才使用<code>F5</code>打开的Debug窗口，按下<code>cmd+shift+p</code>，运行<code>reload window</code>，让我们的修改生效，就可以看到scope名称的变化：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxobGNPU2txVlVvZE9GUkRlZXBGQjA3UHVOcFYzd2lhRHlPbEpkMWljWHlGMTRFcHk1cDUzRTdmaWJnLzY0MA?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><h2 id="支持关键字">支持关键字</h2><p>关键字同样是编辑这个文件<code>/syntexes/zhuanzhuan.tmLanguage.json</code>，在<code>repository</code>中新加入<code>keywords</code>规则(记得在顶部的patterns中include它)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;match&quot;</span>: <span class="string">&quot;\\b(如果|遍历|结束|打印|函数)\\b&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;keyword.control.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下这里的意思：</p><ul><li><code>match</code> 这是一个正则，如果碰上<code>如果|遍历|结束|打印|函数</code>其中之一，就将它标记为关键字。</li><li><code>name</code> 这些关键字对应的scope是什么。</li></ul><p>效果如图：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoSGlhZmJhRklZcDQzMDF3R0lVQ1h2Ynk0YlVDbm9pYllSOVQ4NHB1ZEc5bzV4SG9EVlE2d0FncWcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>从图中我们可以看出，正则中匹配的字符(如果、遍历、函数等)已经被一一高亮了。不过你的VS Code中不一定是蓝色，这取决于你当前使用的主题。</p><h2 id="支持字符串">支持字符串</h2><p>接着我们让<code>zhuanzhuan</code>语言支持字符串功能，同样是修改json文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;strings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;《&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;end&quot;</span>: <span class="string">&quot;》&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;beginCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.open&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;endCaptures&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;0&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.close&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像JS中使用单双引号和模板字符串作为字符串的标志，为了体现<code>zhuanzhuan</code>语言的不同之处，我们使用书名号，而不是单双引号，来标志一个字符串。例如<code>《xxxx》</code>，它被分成了<code>《</code> <code>xxxx</code> <code>》</code>三个部分，这三个部分有各自的<code>scope</code>，对应关系如下：</p><ul><li><strong>《</strong>      <code>string.quoted.book.open</code></li><li><strong>xxxx</strong>    <code>string.quoted.book.zhuanzhuan</code></li><li><strong>》</strong>     <code>string.quoted.book.close</code></li></ul><p>为了看到修改后的效果，需要在调试窗口中，<code>cmd+shift+p</code>并运行<code>reload window</code>。重载后的效果是这样的：</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoeVJQYjJOMUhTbW5KNmNHUVVpYnRHc1NLSnNTVVdUZ3BwTVhDd1NMQXV4cGNXdEdQdnFpY29ldEEvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>这时候第13行发生了变化，从原来的黑色，变成了绿色。</p><h2 id="深入理解scope">深入理解scope</h2><p>看到效果以后，再回过头看那份json文件，它到底表达了什么意思？</p><p>首先我们规定了顶层的<code>scope</code>名字叫<code>source.zz</code>。也就是说，当我们新建了<code>.zz</code>结尾的文件，开始写代码，这时所有的代码都处在顶层<code>scope</code>。</p><p><code>patterns</code>属性规定了在顶层<code>scope</code>中，有哪些方式可以开辟一个子<code>scope</code>。<code>patterns</code>数组<code>inclucde</code>(即引入)了名为<code>strings</code>和<code>keywords</code>的规则，这些规则被放在了<code>repository</code>(也就是仓库，一个规则的仓库)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;strings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;string.quoted.book.zhuanzhuan&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;begin&quot;</span>: <span class="string">&quot;《&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;end&quot;</span>: <span class="string">&quot;》&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>repository</code>中，以<code>strings</code>规则为例，当VS Code解析引擎遇到以“《”开头，“》”结尾的<code>token</code>时，中间的内容会被认为是字符串。也就是说，我们让书名号具备了和JS中的单双引号相同的功能。字符串的<code>scope</code>变成了我们规定的<code>string.quoted.book.zhuanzhuan</code>。我们可以通过<code>inspect editor tokens and scopes</code>命令来验证这一点。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoTlJrVnFwN21vVGZ4TmVEOTIzZUJWSm5qcnVxcmlhandqWFlvMmlhU3labVlEbGJIRHB3NnNJZHcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><p>图片中，<code>xxxx</code>所属的<code>scope</code>有两个，一个是<code>constant.character.escape.zhuanzhuan</code>，另一个就是根<code>scope</code>。一个<code>token</code>往往拥有多个<code>scope</code>，就像字符串，同时处于根<code>scope</code>和书名号创建的一个<code>scope</code>。</p><p>在上文的json文件中，还有一个叫<code>keywords</code>的属性，当有字符串满足<code>match</code>字段中的正则表达式时，会被认为是一个关键字。</p><p>事实上，当我们把上文的json规则进行更多的扩展和嵌套，就会越来越接近现流行的其他语言，存在无数的嵌套。一个<code>token</code>会属于无数的<code>scope</code>。</p><p>那么问题来了，这些<code>scope</code>的作用是什么？我们花了很多的力气去定义json格式，来让不同位置的<code>token</code>拥有不同的<code>scope</code>。这样我们就拥有了一个类似于CSS选择器的东西，我们可以为不同<code>scope</code>指定不同的样式，从而让我们自创的语言高亮起来。</p><h2 id="使用scope">使用Scope</h2><p>接下来我们要使用上文中定义的几个<code>scope</code>。因为目前为止，我们只是重新定义了<code>zhuanzhuan</code>语言中一部分情景下的<code>scope</code>名称，我们可以利用这些自定义的<code>scope</code>，做出更细致的高亮配置。</p><p>使用<code>scope</code>的方式就是创建一个<code>theme</code>类型的插件(没错我们要写第二个插件了)。这次我们需要cd到用户文件夹下的<code>.vscode/extensions</code>，这样我们的主题就可以免安装，可以直接出现在VS Code主题列表中。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoNVJZcDNQSTgwaWJmNUdCOWJOWXBLQzB6NTFmSGpRMjQ4eDlHNWw4bUl6YXVqMlFWMXZMQ1ZIZy82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>使用VS Code打开项目，然后编辑<code>theme/zhuanzhuan-lang-theme-color-theme.json</code>文件，文件的结构是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhuanzhuan-lang-theme&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;colors&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;editor.background&quot;</span>: <span class="string">&quot;#f5f5f5&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;editor.foreground&quot;</span>: <span class="string">&quot;#333333&quot;</span></span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;tokenColors&quot;</span>: [</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Comments&quot;</span>,</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;scope&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;comment&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;punctuation.definition.comment&quot;</span></span><br><span class="line"></span><br><span class="line">   ],</span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;fontStyle&quot;</span>: <span class="string">&quot;italic&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#AAAAAA&quot;</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>tokenColors</code>字段是我们需要关心的地方，它针对了不同的<code>scope</code>，指定不同的样式。<code>name</code>是这条规则的名字，可以随意命名，保证唯一性即可。<code>scope</code>类似于CSS选择器，是规则应用的对象。<code>settings</code>则是具体的样式。</p><p>然后我们在<code>tokenColors</code>中，加上我们自定义的样式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;tokenColors&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他原有的规则，仅列出新增的规则。</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;quotedBookOpen&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将scope为string.quoted.book.open的token，</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 也就是《，颜色设置成#33ec0e(原谅色)。</span></span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;string.quoted.book.open&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#33ec0e&quot;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略了大段雷同的配置。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要scope和我们的zhuanzhuan语言定义中的scope相同，</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 就可以高亮对应的token。</span></span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>zhuanzhuan-lang</code>插件的调试窗口，打开主题选择列表，选择<code>zhuanzhuan-lang-theme</code>主题，就可以看到上面的三条规则对<code>《商品id》</code>这部分生效了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoR1haaWNpYjFpYkRJMnVSQjcyWnc5QzdUY0dpYW9CbGx6MjBpYldpY2RoanZYd1dTNXprMzVmV2VpY0cwUS82NDA?x-oss-process=image/format,png" alt="img" loading="lazy"></p><p>文字及其对应的scope和颜色如下：</p><ul><li><code>《</code></li><li><ul><li>scope: <code>string.quoted.book.open</code></li><li>颜色：#33ec0e</li></ul></li><li><code>》</code></li><li><ul><li>scope: <code>string.quoted.book.close</code></li><li>颜色：#33ec0e</li></ul></li><li><code>xxxx</code></li><li><ul><li>scope: <code>string.quoted.book.open</code></li><li>颜色：#eb8837</li></ul></li></ul><p>其他的scope可以自行挑选喜欢的色值一一定义，这里就不再重复罗列。</p><h2 id="成果">成果</h2><p>经过上面一系列的努力，然后再添加亿点点细节，最终的效果就是下图。</p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9UODFiQVYwTk5OaWN2ZkxoTjRPaWNzbjhQcVJPUjRmNmxoVWtkQ3FnaWE0Vm9NUUM0RkJnbW1sYUFMbzZiR3NxSUozWXJjT0tpY3JEQ3R5bHRkMXQ2QzJKaHcvNjQw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" / loading="lazy"><h2 id="总结">总结</h2><p>通过阅读文章，我们总共创建了两个VS Code插件。一个是语言支持插件，通过简单的配置，使<code>zhuanzhuan</code>语言支持了中文关键字、书名号字符串以及中括号表示的变量。第二个是主题插件，为<code>zhuanzhuan</code>语言中自定义的<code>scope</code>提供了高亮规则。<code>scope</code>名称，是连接两个插件的枢纽。</p><p>不过<code>zhuanzhuan</code>语言离一门完善的语言还需要海量的工作，我们需要定义更多的scope规则，规则之间往往还存在复杂的嵌套关系。这篇文章只是讲了冰山露出海面的那一角。如果想深入学习这方面的知识，仍需参考VS Code官方的文档，以及学习编译原理相关知识。</p><p>另外附上文章中两个插件最终的代码：</p><p><a href="https://github.com/inkyMountain/zhuanzhuan-lang">https://github.com/inkyMountain/zhuanzhuan-lang</a></p><p><a href="https://github.com/inkyMountain/zhuanzhuan-lang-theme">https://github.com/inkyMountain/zhuanzhuan-lang-theme</a></p><p>参考文档：<a href="https://code.visualstudio.com/api#vscode">https://code.visualstudio.com/api#vscode</a></p><p>文章来源：<a href="https://blog.csdn.net/P6P7qsW6ua47A2Sb/article/details/110151903?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161228068816780262512132%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fall.%252522%25257D&amp;request_id=161228068816780262512132&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-16-110151903.first_rank_v2_pc_rank_v29_10&amp;utm_term=%25E4%25BC%25AA%25E4%25BB%25A3%25E7%25A0%2581">链接</a></p><p>因为我对这方面也不是太懂，市面上也已经有很多的轮子了，本着不造烂轮子误人子弟的原则，整理了这篇文章。</p><p>水平有限，若有错漏，敬请指正。</p>]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 伪代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言初步学习——伪代码(1)</title>
      <link href="/blogbeta/posts/520ef546/"/>
      <url>/blogbeta/posts/520ef546/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>伪代码（Pseudocode）是一种非正式的，类似于英语结构的，用于描述模块结构图的语言，并且英语国家使用的较多。人们在用不同的编程语言实现同一个算法时意识到，他们的实现（注意：这里是实现，不是功能）很不同。尤其是对于那些熟练于不同编程语言的程序员要理解一个（用其他编程语言编写的程序的）功能时可能很难，因为程序语言的形式限制了程序员对程序关键部分的理解。这样伪代码就应运而生了。伪代码提供了更多的设计信息，每一个模块的描述都必须与设计结构图一起出现。<br>使用伪代码的目的是使被描述的算法可以容易地以任何一种编程语言（Pascal，C，Java等）实现。因此，伪代码必须结构清晰、代码简单、可读性好，并且类似自然语言。 介于自然语言与编程语言之间。以编程语言的书写形式指明算法职能。使用伪代码， 不用拘泥于具体实现。相比程序语言（例如Java, C++,C, Dephi 等等）它更类似自然语言。它是半角式化、不标准的语言。可以将整个算法运行过程的结构用接近自然语言的形式（可以使用任何一种你熟悉的文字，关键是把程序的意思表达出来）描述出来。这个在数据结构讲算法等部分体现的较多。</p><p>并且，学习代码类相关专业的同学，在<a href="https://blog.csdn.net/weixin_41275726/article/details/102796822?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161228068816780266227075%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=161228068816780266227075&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-102796822.first_rank_v2_pc_rank_v29_10&amp;utm_term=%25E4%25BC%25AA%25E4%25BB%25A3%25E7%25A0%2581"><strong>论文</strong></a>上也要使用一些相关的伪代码，所以<strong>掌握</strong>伪代码的写法也是很重要的一个环节 。</p><span id="more"></span><h2 id="语法规则">语法规则</h2><p>例如，类Pascal语言的伪代码的语法规则是： 在伪代码中，每一条指令占一行（else if，例外）。指令后不跟任何符号（Pascal和C中语句要以分号结尾）。书写上的“缩进”表示程序中的分支程序结构。这种缩进风格也适用于if-then-else语句。用缩进取代传统Pascal中的begin和end语句来表示程序的块结构可以大大提高代码的清晰性；同一模块的语句有相同的缩进量，次一级模块的语句相对与其父级模块的语句缩进。</p><p>算法的伪代码语言在某些方面可能显得不太正规，但是给我们描述算法提供了很多方便，并且可以使我们忽略算法实现中很多麻烦的细节。通常每个算法开始时都要描述它的输入和输出，而且算法中的每一行都给编上号码，在解释算法的过程中会经常使用算法步骤中的行号来指代算法的步骤。算法的伪代码描述形式上并不是非常严格，其主要特性和通常的规定如下：<br>1) 算法中出现的数组、变量可以是以下类型：整数、实数、字符、位串或指针。通常这些类型可以从算法的上下文来看是清楚的，并不需要额外加以说明。<br>2) 在算法中的某些指令或子任务可以用文字来叙述，例如，“设x是A中的最大项”，这里A是一个数组；或者&quot;将x插入L中&quot;，这里L是一个链表。这样做的目的是为了避免因那些与主要问题无关的细节使算法本身杂乱无章。<br>3) 算术表达式可以使用通常的算术运算符（+，-，<em>，/，以及表示幂的^）。逻辑表达式可以使用关系运算符=,≠,&lt;,&gt;,≤和≥，以及逻辑运算符与(and),或（or），非（not）。<br>4) 赋值语句是如下形式的语句：a&lt;-b 。<br>这里a是变量、数组项，b是算术表达式、逻辑表达式或指针表达式。语句的含义是将b的值赋给a。<br>5) 若a和b都是变量、数组项，那么记号a&lt;-&gt;b 表示a和b的内容进行交换。<br>6) goto语句具有形式<br>goto label（goto标号）<br>它将导致转向具有指定标号的语句。<br>7) 条件语句有以下两种形式：<br>if c then s或者<br>if c then s<br>else s′<br>这里c是逻辑表达式，s和s′是单一的语句或者是被括在do和end之间的语句串。对于上述两种形式，假若c为真，则s被执行一次。假若c为假，则在第一种形式中，if语句的执行就完成了，而在第二种形式中，执行s′。在所有的情况下，控制就进行到了下一个语句，除非在s或s′中的goto语句使控制转向到其它地方。<br>8) 有两种循环指令：while和for。<br>while语句的形式是<br>while c do<br>s<br>end<br>这里c是逻辑表达式，而s是由一个或更多个语句组成的语句串。当c为真时，执行s。在每一次执行s之前，c都被检查一下；假若c为假，控制就进行到紧跟在while语句后面的语句。注意，当控制第一次达到while语句时，假若c为假，则s一次也不执行。<br>for语句的形式是<br>for var init to limit by incr do<br>s<br>end<br>这里var是变量，init、limit和incr都是算术表达式，而s是由一个或多个语句组成的语句串。初始时，var被赋予init的值。假若incr≥0，则只要var≤limit，就执行s并且将incr加到var上。（假若incr&lt;0，则只要var≥limit，就执行s并且将incr加到var上）。incr的符号不能由s来该改变。<br>9) exit语句可以在通常的结束条件满足之前，被用来结束while循环或者for循环的执行。exit导致转向到紧接在包含exit的（最内层）while或者for循环后面的一个语句。<br>10) return用来指出一个算法执行的终点；如果算法在最后一条指令之后结束，它通常是被省略的；它被用得最多的场合是检测到不合需要的条件时。return的后面可以紧接被括在引号的信息。<br>11) 算法中的注释被括在/</em> */之中。诸如read和output之类的各种输入或者输出也在需要时被用到。</p><p><strong>伪代码实例</strong></p><p>伪代码只是像流程图一样用在程序设计的初期，帮助写出程序流程。简单的程序一般都不用写流程、写思路，但是复杂的代码，最好还是把流程写下来，总体上去考虑整个功能如何实现。写完以后不仅可以用来作为以后测试,维护的基础，还可用来与他人交流。但是，如果把全部的东西写下来必定可能会让费很多时间，那么这个时候可以采用伪代码方式。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IF 九点以前 THEN</span><br><span class="line"></span><br><span class="line">do 私人事务；</span><br><span class="line"></span><br><span class="line">ELSE 9点到18点 THEN</span><br><span class="line"></span><br><span class="line">工作；</span><br><span class="line"></span><br><span class="line">ELSE</span><br><span class="line"></span><br><span class="line">下班;</span><br><span class="line"></span><br><span class="line">END IF</span><br></pre></td></tr></table></figure><p>这样不但可以达到文档的效果,同时可以节约时间. 更重要的是,使结构比较清晰,表达方式更加直观.</p><p>下面介绍一种类Pascal语言的伪代码的语法规则。</p><p>在伪代码中，每一条指令占一行(else if 例外，)，指令后不跟任何符号（Pascal和C中语句要以分号结尾）；</p><p>书写上的“缩进”表示程序中的分支程序结构。这种缩进风格也适用于if-then-else语句。用缩进取代传统Pascal中的begin和end语句来表示程序的块结构可以大大提高代码的清晰性；同一模块的语句有相同的缩进量，次一级模块的语句相对与其父级模块的语句缩进；</p><p>在伪代码中，通常用连续的数字或字母来标示同一即模块中的连续语句，有时也可省略标号。</p><p>符号△后的内容表示注释；</p><p>在伪代码中，变量名和保留字不区分大小写，这一点和Pascal相同，与C或C++不同；</p><p>在伪代码中，变量不需声明，但变量局部于特定过程，不能不加显示的说明就使用全局变量；</p><p>赋值语句用符号←表示，x←exp表示将exp的值赋给x，其中x是一个变量，exp是一个与x同类型的变量或表达式（该表达式的结果与x同类型）；多重赋值i←j←e是将表达式e的值赋给变量i和j，这种表示与j←e和i←e等价。</p><p>例如：</p><pre><code>x←yx←20*(y+1)x←y←30</code></pre><p>以上语句用C分别表示为：</p><pre><code>x = y;x = 20*(y+1);x = y = 30;</code></pre><p>选择语句用if-then-else来表示，并且这种if-then-else可以嵌套，与Pascal中的if-then-else没有什么区别。</p><p>例如:</p><pre><code>if (Condition1)then [ Block 1 ]else if (Condition2)then [ Block 2 ]else [ Block 3 ]</code></pre><p>循环语句有三种：while循环、repeat-until循环和for循环，其语法均与Pascal类似，只是用缩进代替begin - end；</p><p>例如：</p><ul><li>x ← 0</li><li>y ← 0</li><li>z ← 0</li><li>while x &lt; N</li><li>do x ← x + 1</li><li>y ← x + y</li><li>for t ← 0 to 10</li><li>do z ← ( z + x * y ) / 100</li><li>repeat</li><li>y ← y + 1</li><li>z ← z - y</li><li>until z &lt; 0</li><li>z ← x * y</li><li>y ← y / 2</li></ul><p>上述语句用C或C++来描述是：</p><pre><code>x = y = z = 0;while( z &lt; N )&#123;x ++;y += x;for( t = 0; t &lt; 10; t++ )&#123;z = ( z + x * y ) / 100;do &#123;y ++;z -= y;&#125; while( z &gt;= 0 );&#125;z = x * y;&#125;y /= 2;</code></pre><p>数组元素的存取有数组名后跟“[下标]”表示。例如A[j]指示数组A的第j个元素。符号“ …”用来指示数组中值的范围。</p><p>例如：</p><p>A[1…j]表示含元素A[1], A[2], … , A[j]的子数组；</p><p>复合数据用对象(Object)来表示，对象由属性(attribute)和域(field)构成。域的存取是由域名后接由方括号括住的对象名表示。</p><p>例如：</p><p>数组可被看作是一个对象，其属性有length，表示其中元素的个数，则length[A]就表示数组A中的元素的个数。在表示数组元素和对象属性时都要用方括号，一般来说从上下文可以看出其含义。</p><p>用于表示一个数组或对象的变量被看作是指向表示数组或对象的数据的一个指针。对于某个对象x的所有域f，赋值y←x就使f[y]=f[x]，更进一步，若有f[x]←3，则不仅有f[x]=3，同时有f[y]=3，换言之，在赋值y←x后，x和y指向同一个对象。</p><p>有时，一个指针不指向任何对象，这时我们赋给他nil。</p><p>函数和过程语法与Pascal类似。</p><p>函数值利用 “return (函数返回值)” 语句来返回，调用方法与Pascal类似；过程用 “call 过程名”语句来调用；</p><p>例如：</p><p>1. x ← t + 10</p><p>2. y ← sin(x)</p><p>3. call CalValue(x,y)</p><p>参数用按值传递方式传给一个过程：被调用过程接受参数的一份副本，若他对某个参数赋值，则这种变化对发出调用的过程是不可见的。当传递一个对象时，只是拷贝指向该对象的指针，而不拷贝其各个域。</p><p>部分文章来源：<a href="https://www.cnblogs.com/huipengkankan/archive/2011/07/28/2120416.html">伪代码规范</a></p>]]></content>
      
      
      <categories>
          
          <category> c语言学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c语言初步学习 </tag>
            
            <tag> 伪代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AD_learning_video</title>
      <link href="/blogbeta/posts/60bf2a09/"/>
      <url>/blogbeta/posts/60bf2a09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>AD教学视频，来源：bilibili</center><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AD_learning_video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AD快捷键</title>
      <link href="/blogbeta/posts/5a758763/"/>
      <url>/blogbeta/posts/5a758763/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>1：shift+s 键 切换单层显示<br>2：q   英寸和毫米 尺寸切换<br>3：D+R进入布线规则设置。其中 Clearance 是设置最小安全线间距，覆铜时候间距的。比较常用<br>4：CTRL+鼠标单击某个线，整个线的NET 网络 呈现高亮状态<br>5：小键盘上的 * （星号键）可以在top、bottom layer 切换，达到快速切换上下层。另外 + - 可以把所有显示的层轮流切换。<br>6：CTRL+SHIFT+ T 、B、L、R 可以快速对齐所选中的元件 上 下 左 右。<br>7：M+I 可以把选中所有的元件，翻转过来。这样可以在上下层切换，方便布线，调整印丝层。 很实用的一个操作。<br>8：如上所述，还可以 查看板子底部，就点击  查看  翻转板子 板子就反过来，但是属性还是 一样。只是从板子底部看了。<br>9：器件联合 选中两个器件 然后右击 选择 联合-从选中的器件生成联合 这样可以操作两个位置在一起的器件<br>当要去掉时候 选中器件 右击 联合-从联合打散器件  那么连接在一起的就能够单独操作了。<br>当选中联合的器件，右击选择联合，有个 选择所有的联合 这样一下子选择所有联合的器件。固定的外框就可以联合起来移动操作。<br>10：多根线同时画的时候，每个先画个短的线，按SHIFT 选中所有一起画的线，选好，松开SHIFT. 鼠标移动到线头 白点处，然后拖动，那么所有线就一起拖动。 转弯一次，松开， 在拖，又可以转弯。<br>11: 快捷键 t c 交叉探针 看到寻找 原理图 和 PCB 的元件位置  选下，然后跑到PCB 就能看到原理图那个元件的位置。<br>12: ed 删线<br>13: 捕获焊盘 查看——网格——切换电气网格（shift + E）</p><p>方格与格点的切换:View-Grids-ToggleVisible Grid Kind</p><p>原点：Edit-Origin-Set<br>边界的定义：Keep Out Layer-Utility Tools-Place Line 按TAB可定义线宽<br>选取元件：PCB-PCB Filter-IS Component<br>逐个放置元件：TOOLS-Component Placement-RepositionSelected Components<br>自动布局：ToolS-Component Placement–Arrange Within Room<br>自动布局器：ToolS-Component Placement–Auto Placer<br>元件排列：选中元件右键Align-  或Alignment Tools–</p><p>元件在层之间的快速切换：拖动元件的过程按L键<br>让焊盘放在格点上：选中元件，右键-Component Actions-Move ComponentOrigin To Grid<br>移动元件的远近：&quot;G&quot;键 选择mil<br>刷新屏幕： END<br>改走线模式：shift+空格键<br>（“45°线性” “45°+圆角” “90°”“ 任意角”“90°+圆弧 ”“圆弧”）<br>遇障碍物：右键-Options-Preferences-…<br>推挤： Shift+R<br>布线快捷菜单：“~ ”键<br>线宽设置：“Shift+W”</p><p>过孔修改规则:Design-Rules-HoleSize;<br>板边5mm圆弧:Place-KeepOut-Arc<br>切换英美单位制度：Ctrl+Q</p><p>保护元器件位置：锁定 双击-Lock打钩<br>保护已锁定物体：Tools-Preference-PCB Editer-General-ProtectLocked Objects 打勾；</p><p>显示布线快捷菜单：键盘左上角快捷键“~ ”</p><p>层间切换：&quot;+&quot;&quot;-&quot;</p><p>字体（条形码）放置：“A”-Place String；<br>对板的定义：Designers-Board Shape-R/D；<br>尺寸标注：Place Dimension-Place Linear Dimension<br>工具栏恢复原始状态:在工具栏处右键CustomizingPCB Editor-Toolbar-Restore；<br>填充：Place Fill；</p><p>复制粘贴：选中-Edit-Rubber Stamp-单击<br>粘贴特殊形状：选中-Edit-Paste Special<br>选择一组Select：“S键”-Touching Liner线/Rectangle矩形<br>或Shift 一个个选<br>移动Move:“M”<br>整体移动：选中-右键-Unions-Create Union fromselected object/break<br>解脱从联合体<br>弱小信号线包地：选中-“s”select net,Tool-Outline-Selected Objects<br>查找相似物体：右键-Find SimilarObject</p><p>测距离：Report-Measure Distance<br>自动布线:Auto Route:Net/NetClass/Connection/Area/Room</p><p>查看布线层：Shift+F或“*”切换层<br>切断线：Edit-Slice Tracks<br>布完线进行规则检查：Tools-Design Rule Check-Run D_R_C_<br>3D视图：数字键“3”或View-Switch to3D,Shift+右键旋转；</p><p>铺铜：Place-Polyon Pour</p><p>去死铜：<strong>双击铜区，Remove Deader Copper 打勾</strong></p><p>原理图和PCB的双向同步更新：<br>检测PCB与原理图的不同处：Project-Show Differences<br>在原理图里更改后更新到PCB:Design-Update PCB Document in<br>在PCB里更改后更新到原理图:Design-UpdateSchematics in<br>标号Designator显示：PCB FilterISDesignator 然后PCB Inspector Hide<br>重新标注：Tool- Re Annotate</p><p>元器件标号自动排列：选中器件-右键-Align-Position Component Text<br>补泪滴：Tool-Teardrops，焊盘与导线连接更牢固<br>生成生产制造文件：File-Fabrication Outputs<br>生成PDF文件：File-Smart PDF<br>翻板：View-Flip Board</p><p>**打开层对话框：**<strong>L</strong></p><p>打开选择：S<br>跳转：J<br>英寸和毫米切换：Q<br>翻转元器件：空格<br>改变线宽，孔径：选中导线或过孔,同时按下Tab键<br>选中目标：shift+单击</p><p>PCB换层并自动添加过孔：小键盘上的“*”<br>系统设置：DXP-&gt;preferences<br>其中General–Use localized resources中文<br>其中Backup ：设置备份时间<br>树形图标：home<br>快捷键：右下角help-shortcuts<br>默认布局：View-Desktop layouts–Default<br>窗口缩回的速度：DXP-&gt;preferences-&gt;system-&gt;view–Hidedelay<br>打开不同面板：右下角System等等<br>切换不同窗口：ctrl+tab<br>放大和缩小：ctrl+鼠标中键滚轴<br>修改右下方的边框(title，日期)格式：DeSign-Template-Set Template File Name…A4</p><p><strong>走线自动延长：</strong> <strong>Drag—ctrl+鼠标拖动</strong></p><p>复制目标：选择目标，按住shift拖动<br>自动添加元件编号：Tools-&gt;Annotate Schematics<br>Preferences–&gt;Schematic–&gt;Graphical Editing Convert Special Strings 转换特殊字符串</p><p>如何全局修改<br>例如：单击电容C1选中，鼠标右键选择Find Similar Objects (Select Matching 选中，二步骤可以跳过</p><p>(1) Part Comment —same Current Footprint —same ,点击OK按钮<br>(2) Select ALL<br>(3) SCH Inspector 窗口 修改 Footprint<br>Tools–&gt;FootPrint Manager</p><p>分层设计</p><p>(1)一种水平设置，N个分图 ，net设置全局(project–&gt;project options–&gt;<a href="http://www.wenkuxiazai.comIdentifier">http://www.wenkuxiazai.comIdentifier</a> Scope…Gloal) 不推荐<br>(2)一种垂直设置</p><p>，一个总图(Sheet Entry),N个分图(PORT) 连接只能Sheet Entry到PORT<br>第二种方法：<br>(1)Place sheet Symbol(方框) 和sheet Entry(放在方框边界内侧)<br>(2)选择sheet Symbol，右键选择&quot;Sheetsymbol actions&quot;–creat sheet from symbol<br>原理图库<br>(1) File–&gt;New–&gt;Library–&gt;sch…<br>(2) 右边下方SCH打开SCH Library</p><p>窗口<br>(3) Place-&gt;RecTangle,注意放在原点<br>(4) Library Components Properties<br>Designator U?<br>Comment max232<br>Symbol Refernece max234<br>(5) 可将一个元件库分为两个Part,例如parta,partb(通过Tools–&gt;new part)<br>特殊用途：选择该元件，按F1打开该元件的pdf文档<br>Library Components Properties–&gt;Parameters for Component --&gt;Add…<br>Name: HelpURL Value: C:\zy\abc.pdf#page=5</p><p>PCB库</p><p>(1) File–&gt;New–&gt;Library–&gt;pcb…<br>(2) 右边下方PCB打开pcb Library 窗口<br><strong>集成库</strong></p><p>(1) File–&gt;New–&gt;Project–&gt;Interger Library<br>(2) 新建sch.lib和pcb.lib, 在sch.lib中选择Tools–&gt;Model Manage…<br>(3) Project–&gt;Compile Integrated Library<br>盲孔（BIINDVIA）：从印制板内仅延展到一个表层的导通孔。<br>埋孔（BURIEDVIA）：未延伸到印制板表面的一种导通孔。</p><p>PCB绘制</p><p>(1) 在PCB中 Design–&gt;ImportChanges From…<br>(2) S+N 选择相同net的线<br>(3) Design–&gt;Board layers &amp; color–&gt;show/hide polygons hide (将覆铜隐藏) （L快捷键）<br>(4) 查看PCB元件，通过打开PCB窗口，选择Components<br>(5) shift+S 单层打开或关闭<br>(6) 对弱小信号可选择包地处理(Tools–&gt;Outline Selected Object)<br>(7) Tools–&gt;Design Rule Check…<br>(8) File–&gt;Fabrication Outputs–&gt;Gerber Files</p><p><strong>覆铜：</strong></p><p>place–&gt;polygon Pour…<br>\1. Pour Over Same Net Polygons Only 相同net铜箔覆盖<br>\2. Pour Over All Same Net Objects 铜箔覆盖相同net部分（将相同net的导线等等融合了)<br>注意 ：如果要保存为PCB4.0 Binary File(*.pcb), 覆铜要选择网格式，(可将网格Track With和GridSize设置一样，就如同Solid格式了)<br>如何隐藏所有Designator(即u1,r1,r2…)<br>(1) PCB filer–&gt;IsDesignator 选择所有Designator<br>(2) PCB Inspector–&gt;Hide<br>如何将Designator(即u1,r1,r2…)自动放置在元件附件<br>(1) PCB filer–&gt;IsComponent<br>(2) Align–&gt;Position Component Text…<br>将PCB翻转 查看反面方便 view–&gt;FilpBoard<br>PCB查看层数 Design–&gt;Layer Stack Manager<br>“类” Design–&gt;class<br>比如新建一个net class ,把Vc3.3 VC5等加入，然后在rule中选择Net class,这样规则适用范围就是自己定义的类了<br>按键2–2D 按键3–3D</p><p>原理图画线：P+W</p><p>PCB图画线： P+T<br>在原理图里同快速查找元器件：CTRL+F<br>在PCB里面快速查的元件：J+C</p><p>选择net： ctr+H或S+N<br>去掉全部选中物体：E+E+A<br>删除两个焊点间的导线：T+U+C</p><p>单层打开或关闭：shift+S</p><p>去掉过滤：shift+C</p><p>在交互布线的过程中，切换布线形状：Shift+空格键</p><p>拖动时连线跟着延长：ctrl+鼠标左键拖动</p><p>PCB选择相同net，并高亮：ctrl+鼠标右键</p><p>hide/show层：ctrl+D</p><p>**原理图和PCB快速切换：**<strong>ctrl+crosspobe</strong></p><p>分图和总图的切换：ctrl+上下箭头<br>测量距离：ctrl+M<br>放弃上一步操作：Backspace键</p><p><strong>一、PCB中常用快捷键</strong></p><ul><li>R+L 输出PCB中所有网络的布线长度</li><li>Ctrl+左键点击对正在布的线完成自动布线连接</li><li>M+G 可更改铜的形状;</li><li>按P+T在布线状态下，按Shift+A可直接进行蛇线走线</li><li>T+R对已布完的线进行蛇线布线</li><li>E++M+C点击空白出可迅速找到PCB上想要的元件</li><li>Backspace 撤销正在布线的上一步操作</li><li>* 切换布线层，可在布线过程中放置过孔</li><li>Ctrl+Shift 切换层并放置过孔</li><li>F8/E+O+S设置圆心点</li><li>M+I 翻转选中的元件</li><li>P+T 布线</li><li>T+E 补泪滴</li><li>P+G 铺铜</li><li>S+Y 单层选择线</li><li>E+B 选择进行复制</li></ul><p><strong>二、以下来源郑振宇老师学生总结：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qRFdYM01HdFBJZWswOFRtaHlqNEF6bkh3VWM3SHg2TkFTM0RCaFNwN3F4aWNSUVZvd0JRYWRpYXcvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qNUxhdlhUS09YOHo3UEFlRnVxQjlZQTdkZExmd1RzR3VCRFFLMWNwWWliR2ljVTZ0bmx2VHA0V2cvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qVkdpYUJuZ2FKMU9VYXZ5TXZNTFhLSUU5aWJjUE5qbklZd2h4N0RtbUl0c3d5VHl3VkQwcGg0VlEvNjQwP3d4X2ZtdD1qcGVn" alt="640?wx_fmt=jpeg" loading="lazy"></p><p><strong>三、BGA 扇出注意事项</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qMWdkdDd2OWdPZmNqVDBSc3NsRmpKa2ljaWE5Y01nQTVKOUludWRCcUtpYmtOR0ZRZnV5RFB2RlRnLzY0MD93eF9mbXQ9cG5n" alt="640?wx_fmt=png" loading="lazy"></p><p><strong>四、常见的单位换算</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9IbGlicTVBN1o2dFBTajlqdTdSajQwbmlibk44Q3NLTk9qNmlhRjFTaWNBQzVuWEY1OGZpYm5nUGNCelhXelgxOWhFaWN6eUd1S0RoaWNvSkJsMWw2YmhYaWF5Y0RRLzY0MD93eF9mbXQ9cG5n" alt="640?wx_fmt=png" loading="lazy"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL21tYml6LnFwaWMuY24vbW1iaXovNnptOEZxekU3UncxSFNRUTNpY2RpYWNDcEVpY2dselNUWUpBcmdqdnRVbGV3OTNJemlhZTZIcklDeldjV05ZVWZVQzhPWFZFT1Z2b2paZFpTWmliT2w3ZGU4QS82NDA_" alt="640?" loading="lazy"></p><p>图文转自https://blog.csdn.net/woshiyuzhoushizhe/article/details/97000298，仅供参考</p>]]></content>
      
      
      
        <tags>
            
            <tag> AD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>艹</title>
      <link href="/blogbeta/posts/4c7020/"/>
      <url>/blogbeta/posts/4c7020/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc"         src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1cV411S7DD" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远古项目</title>
      <link href="/blogbeta/posts/78f61393/"/>
      <url>/blogbeta/posts/78f61393/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>成本很低大约花了不到一百，视频里的是第一代机器，后续还会开发升级版本。</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1bZ4y1j76W" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【堡垒与大逃杀】火柴人大战</title>
      <link href="/blogbeta/posts/59bb436d/"/>
      <url>/blogbeta/posts/59bb436d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1RW411S7As/" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《关于吃个猕猴桃酸到脸部变形这档事》</title>
      <link href="/blogbeta/posts/668164b5/"/>
      <url>/blogbeta/posts/668164b5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1TK411K7XP/" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这就是赛博抖枪术么，i了i了</title>
      <link href="/blogbeta/posts/38ba560b/"/>
      <url>/blogbeta/posts/38ba560b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>不久前入手了赛博朋克2077，but，bug是真的多。。。。。。</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1nr4y1F7Dg/" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><p>还有这个大字。。。。无语</p><img src="https://s3.ax1x.com/2020/12/19/rU1dYR.md.png" alt="rU1dYR.md.png" style="zoom:50%;" / loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣诞节（×） 万圣节（√）</title>
      <link href="/blogbeta/posts/cdeb55ca/"/>
      <url>/blogbeta/posts/cdeb55ca/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>今天在打守望的时候遇到了诡异的事情详情看视频</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1kv41147K3" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mc混剪（视频）</title>
      <link href="/blogbeta/posts/c13eda59/"/>
      <url>/blogbeta/posts/c13eda59/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>许久之前做的视频，练手用的，挺怀念的</center><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奥斯夫托洛斯基（视频）</title>
      <link href="/blogbeta/posts/30c0c306/"/>
      <url>/blogbeta/posts/30c0c306/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>之前闲的无聊，做的一个小视频，仅供娱乐，还望轻喷，(狗头保命)</center><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1j7411C7s6" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>]]></content>
      
      
      <categories>
          
          <category> 视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code编写Keil工程</title>
      <link href="/blogbeta/posts/8eea644e/"/>
      <url>/blogbeta/posts/8eea644e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="前言">前言</h3><p>keil 作为最经典的入门IDE，尽管功能强大，但是界面不太友好，也不支持常用的代码自动补全，代码重构等基本功能，代码量多了以后，程序的编写，调用，查看，修改等都很不方便。之前看到网上很多人都用的code进行的开发，于是我也搞了一个。我将过程记录下来，方便自己和其他人查阅和学习。</p><p>通常换了一个开发工具软件，需要重新搭建开发环境，这是很麻烦的事情，但是使用VS Code + Keil Assistant插件可以让这个过程变得非常简单。十分感谢写这个插件的大神！</p><p>另外，博客里的图片是我随手从网上截取的，只是个参考例子作用，版本可能较老旧，小伙伴们下载的时候选择最新的即可</p><span id="more"></span><hr><h3 id="大致过程">大致过程</h3><ul><li><p>1、首先下载一个CODE的安装包，用搜索引擎查一下，找到官方的安装包</p><img src="https://s3.ax1x.com/2020/12/15/rMqAW6.png" alt="rMqAW6.png" style="zoom: 80%;" / loading="lazy"></li><li><p>VS Code官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li><li><p>2、其次按照说明以及需求安装</p></li><li><p>3、配置环境</p></li><li><p>4、安装插件</p><hr></li></ul><h3 id="中文化">中文化</h3><p>大部分刚入手的的小伙伴可能看不懂英文，所以可以下载一个中文的插件</p><p>1、在插件里面搜索chinexe就可以找到中文化的插件了</p><p><img src="https://s3.ax1x.com/2020/12/15/rMLoUs.jpg" alt="rMLoUs.jpg" border="0" style="zoom: 50%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20190118174440530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211bXUxOTk4,size_16,color_FFFFFF,t_70" alt="2" style="zoom:50%;" / loading="lazy"></p><img src="https://s3.ax1x.com/2020/12/15/rMOWJ1.md.png" alt="rMOWJ1.md.png"  / loading="lazy"><p>2、安装好插件后可以使用快捷键Shift+Ctrl+P，然后输入Configure Language</p><p>3、选中打开之后就会打开 locale.json 文件</p><p>{<br>// 定义 VSCode 的显示语言。</p><p>“locale”:“en”  ；<br>}</p><p>4、将en改成zh-CN重启后就变成中文</p><hr><h3 id="安装keil插件">安装keil插件</h3><p>同样的，在插件那里查找Keil Assistant</p><p><img src="https://img-blog.csdnimg.cn/20201122183739896.png#pic_center" alt="keil插件" loading="lazy"></p><p>C/C++ IntelliSense（PS：这个插件安装好就不用管它了，要问问什么，因为没啥可管的）</p><p><img src="https://s3.ax1x.com/2020/12/15/rMX66f.md.png" alt="rMX66f.md.png" loading="lazy"></p><hr><h3 id="keil-assistant的设置和使用">keil assistant的设置和使用</h3><p>打开Keil Assiatant的扩展设置，填写UV4.exe的路径到对应位置即可。这里用的是Keil C51，如果是Keil MDK，就填写在下面。</p><p><img src="https://s3.ax1x.com/2020/12/15/rMvnIJ.md.png" alt="rMvnIJ.md.png" loading="lazy"></p><p>然后就可以添加Keil工程到VS Code了：</p><p><img src="https://s3.ax1x.com/2020/12/15/rMxPTe.md.png" alt="rMxPTe.md.png" loading="lazy"></p><p>点击这里进行编译，或者按F7编译：</p><p><img src="https://s3.ax1x.com/2020/12/15/rMxum8.png" alt="rMxum8.png" loading="lazy"></p><hr><p>但是注意，VSCode只是一个纯文本<strong>编辑器</strong>(editor)，不是IDE(集成开发环境)，不含<strong>编译器</strong>(compiler)和许多其它功能，所以需要自己先搭建环境。但是对很多刚上手或者初次使用的朋友来说，面对一堆的环境变量操作，搭建环境就成了一个麻烦事，动辄就要十几分钟甚至几十分钟。</p><hr><p>我遇到的问题主要是配置c语言环境时MinGw必需文件下载不下来（f**k the wall）</p><p><img src="https://s3.ax1x.com/2020/12/10/rFW7vj.md.png" alt="rFW7vj.md.png" loading="lazy"></p><p>于是乎，去网上找了另一条途径，这个大佬做成了视频参考如下</p><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/av52434248" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="80%" height="500" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><p>就是这个版本较老了，新的方法还在找。</p><p>分割线***</p><hr><p>新的方法找到了</p><p>MinGW64 链接：<a href="https://pan.baidu.com/s/12WgeDh6MrnOI9SwPBF7IzA">https://pan.baidu.com/s/12WgeDh6MrnOI9SwPBF7IzA</a><br>提取码：bh7u</p><p>网上有一些朋友分享了MinGW64的文件，直接下载下来放到一些地方别再动就可以了。</p><h3 id="使用教程"><strong>使用教程</strong></h3><p>配置一下系统变量即可，具体教程可以去网上寻找一下，在此不再赘述（水平不足）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习历程</title>
      <link href="/blogbeta/posts/ecf03602/"/>
      <url>/blogbeta/posts/ecf03602/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="center-从前辈那里讨教了一些方法-大致就是下面这些-center"><center>从前辈那里讨教了一些方法，大致就是下面这些。</center></h3><span id="more"></span><ul><li><p>1、STM32 Cube MX使用方法</p><p>2、STM32 HAL库使用方法</p><p>3、STM32启动文件理解</p><p>4、时钟系统（时钟树）梳理、systick定时器</p><p>5、GPIO（8种状态）使用</p><p>6、NVIC中断应用</p><p>7、USART串口通信</p><p>8、DMA外设的应用（基于串口）</p><p>9、IIC外设应用</p><p>10、SPI外设应用</p><p>11、ADC 电压采集</p><p>12、TIM定时器</p><p>13、RTC实时时钟</p><p>14、看门狗应用</p><p>15、PWR电源管理</p></li></ul><hr><p>还有就是不要只是看看例程玩一玩，做项目就简单改改代码。要深入了解底层的原理，比如一开始的点灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);<span class="comment">//使能GPIOF时钟</span></span><br></pre></td></tr></table></figure><p>很多人都知道这个是用来初始化io口用的，但是为什么这么写就不清楚了；</p><p>这时候就要翻一翻官方的手册了，主要有两本一本《STM32中文参考手册》（因为英语不好），还有一本《stm32固件库中文说明》（理由同上）。遇到一些小麻烦可以去这俩本书上查一下，说不定就会有很大收获。</p><hr><p>另外还有很多的企业或者公司或者社区又或者团队都会有一些参考资料，觉得有用的就拿过来用就是了。例如正点原子，野火等</p><p>遇到不会的问题尽量少去东奔西跑的去询问，很多人都很烦这种行为的。要学会思考，学会自己解决问题的技能，这点非常重要。也有很多人是直接百度的，有时候确实能得到一些答案，但是更多的时候还是一堆疑问。（黑人问号.jpg）毕竟百毒的作用还是有限的，这里建议去一些社区或者论坛来寻找解决方案。例如意法半导体官方，那里有很多的资料文献和文件，还有一些大神的解决方案（但是不多）。还有就是csdn，那里的带佬很多，解决方案也很全面，非常建议去那里查找你需要的答案。</p><p>最后朋友，希望我们能够一起进步、共同成长。</p><p>HOPE FOREVER</p><p>Your friend DarkFox</p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32底层（3）</title>
      <link href="/blogbeta/posts/6b873f70/"/>
      <url>/blogbeta/posts/6b873f70/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>user</h1><p>/**</p><hr><ul><li>@file    Project/STM32F10x_StdPeriph_Template/main.c</li><li>@author  MCD Application Team</li><li>@version V3.5.0</li><li>@date    08-April-2011</li><li>@brief   Main program body</li></ul><hr><ul><li>@attention<br>*</li><li>THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</li><li>WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</li><li>TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</li><li>DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</li><li>FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</li><li>CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.<br>*</li><li><h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2></li></ul><hr><p>*/</p><p>/* Includes ------------------------------------------------------------------*/<br>#include “stm32f10x.h”<br>#include “stm32_eval.h”<br>#include &lt;stdio.h&gt;</p><p>#ifdef USE_STM32100B_EVAL<br>#include “stm32100b_eval_lcd.h”<br>#elif defined USE_STM3210B_EVAL<br>#include “stm3210b_eval_lcd.h”<br>#elif defined USE_STM3210E_EVAL<br>#include “stm3210e_eval_lcd.h”<br>#elif defined USE_STM3210C_EVAL<br>#include “stm3210c_eval_lcd.h”<br>#elif defined USE_STM32100E_EVAL<br>#include “stm32100e_eval_lcd.h”<br>#endif</p><p>/** @addtogroup STM32F10x_StdPeriph_Template</p><ul><li>@{<br>*/</li></ul><p>/* Private typedef -----------------------------------------------------------<em>/<br>/</em> Private define ------------------------------------------------------------*/<br>#ifdef USE_STM32100B_EVAL<br>#define MESSAGE1   “STM32 MD Value Line &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;  STM32100B-EVAL    &quot;<br>#elif defined (USE_STM3210B_EVAL)<br>#define MESSAGE1   “STM32 Medium Density”<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210B-EVAL    &quot;<br>#elif defined (STM32F10X_XL) &amp;&amp; defined (USE_STM3210E_EVAL)<br>#define MESSAGE1   &quot;  STM32 XL Density  &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210E-EVAL    &quot;<br>#elif defined (USE_STM3210E_EVAL)<br>#define MESSAGE1   &quot; STM32 High Density &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;   STM3210E-EVAL    &quot;<br>#elif defined (USE_STM3210C_EVAL)<br>#define MESSAGE1   &quot; STM32 Connectivity &quot;<br>#define MESSAGE2   &quot; Line Device running”<br>#define MESSAGE3   &quot; on STM3210C-EVAL   &quot;<br>#elif defined (USE_STM32100E_EVAL)<br>#define MESSAGE1   &quot;STM32 HD Value Line &quot;<br>#define MESSAGE2   &quot; Device running on  &quot;<br>#define MESSAGE3   &quot;  STM32100E-EVAL    &quot;<br>#endif</p><p>/* Private macro -------------------------------------------------------------<em>/<br>/</em> Private variables ---------------------------------------------------------*/<br>USART_InitTypeDef USART_InitStructure;</p><p>/* Private function prototypes -----------------------------------------------<em>/<br>#ifdef <strong>GNUC</strong><br>/</em> With GCC/RAISONANCE, small printf (option LD Linker-&gt;Libraries-&gt;Small printf<br>set to ‘Yes’) calls __io_putchar() */<br>#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)<br>#else<br>#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE <em>f)<br>#endif /</em> <strong>GNUC</strong> */</p><p>/* Private functions ---------------------------------------------------------*/</p><p>/**</p><ul><li>@brief  Main program.</li><li>@param  None</li><li>@retval None<br><em>/<br>int main(void)<br>{<br>/</em>!&lt; At this stage the microcontroller clock setting is already configured,<br>this is done through SystemInit() function which is called from startup<br>file (startup_stm32f10x_xx.s) before to branch to application main.<br>To reconfigure the default setting of SystemInit() function, refer to<br>system_stm32f10x.c file<br>*/</li></ul><p>/* Initialize LEDs, Key Button, LCD and COM port(USART) available on<br>STM3210X-EVAL board ******************************************************/<br>STM_EVAL_LEDInit(LED1);<br>STM_EVAL_LEDInit(LED2);<br>STM_EVAL_LEDInit(LED3);<br>STM_EVAL_LEDInit(LED4);</p><p>/* USARTx configured as follow:<br>- BaudRate = 115200 baud<br>- Word Length = 8 Bits<br>- One Stop Bit<br>- No parity<br>- Hardware flow control disabled (RTS and CTS signals)<br>- Receive and transmit enabled<br>*/<br>USART_InitStructure.USART_BaudRate = 115200;<br>USART_InitStructure.USART_WordLength = USART_WordLength_8b;<br>USART_InitStructure.USART_StopBits = USART_StopBits_1;<br>USART_InitStructure.USART_Parity = USART_Parity_No;<br>USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<br>USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</p><p>STM_EVAL_COMInit(COM1, &amp;USART_InitStructure);</p><p>/* Initialize the LCD */<br>#ifdef USE_STM32100B_EVAL<br>STM32100B_LCD_Init();<br>#elif defined (USE_STM3210B_EVAL)<br>STM3210B_LCD_Init();<br>#elif defined (USE_STM3210E_EVAL)<br>STM3210E_LCD_Init();<br>#elif defined (USE_STM3210C_EVAL)<br>STM3210C_LCD_Init();<br>#elif defined (USE_STM32100E_EVAL)<br>STM32100E_LCD_Init();<br>#endif</p><p>/* Display message on STM3210X-EVAL LCD ************************************<em>/<br>/</em> Clear the LCD */<br>LCD_Clear(LCD_COLOR_WHITE);</p><p>/* Set the LCD Back Color <em>/<br>LCD_SetBackColor(LCD_COLOR_BLUE);<br>/</em> Set the LCD Text Color */<br>LCD_SetTextColor(LCD_COLOR_WHITE);<br>LCD_DisplayStringLine(LCD_LINE_0, (uint8_t *)MESSAGE1);<br>LCD_DisplayStringLine(LCD_LINE_1, (uint8_t *)MESSAGE2);<br>LCD_DisplayStringLine(LCD_LINE_2, (uint8_t *)MESSAGE3);</p><p>/* Retarget the C library printf function to the USARTx, can be USART1 or USART2<br>depending on the EVAL board you are using ********************************/<br>printf(&quot;\n\r %s&quot;, MESSAGE1);<br>printf(&quot; %s&quot;, MESSAGE2);<br>printf(&quot; %s\n\r&quot;, MESSAGE3);</p><p>/* Turn on leds available on STM3210X-EVAL **********************************/<br>STM_EVAL_LEDOn(LED1);<br>STM_EVAL_LEDOn(LED2);<br>STM_EVAL_LEDOn(LED3);<br>STM_EVAL_LEDOn(LED4);</p><p>/* Add your application code here<br>*/</p><p>/* Infinite loop */<br>while (1)<br>{<br>}<br>}</p><p>/**</p><ul><li>@brief  Retargets the C library printf function to the USART.</li><li>@param  None</li><li>@retval None<br><em>/<br>PUTCHAR_PROTOTYPE<br>{<br>/</em> Place your implementation of fputc here <em>/<br>/</em> e.g. write a character to the USART */<br>USART_SendData(EVAL_COM1, (uint8_t) ch);</li></ul><p>/* Loop until the end of transmission */<br>while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)<br>{}</p><p>return ch;<br>}</p><p>#ifdef  USE_FULL_ASSERT</p><p>/**</p><ul><li>@brief  Reports the name of the source file and the source line number</li><li><pre><code>    where the assert_param error has occurred.</code></pre></li><li>@param  file: pointer to the source file name</li><li>@param  line: assert_param error line source number</li><li>@retval None<br><em>/<br>void assert_failed(uint8_t</em> file, uint32_t line)<br>{<br>/* User can add his own implementation to report the file name and line number,<br>ex: printf(“Wrong parameters value: file %s on line %d\r\n”, file, line) */</li></ul><p>/* Infinite loop */<br>while (1)<br>{<br>}<br>}<br>#endif</p><p>/**</p><ul><li>@}<br>*/</li></ul><p>/******************* © COPYRIGHT 2011 STMicroelectronics *<strong><strong>END OF FILE</strong></strong>/</p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32c底层(2)</title>
      <link href="/blogbeta/posts/6c0ac526/"/>
      <url>/blogbeta/posts/6c0ac526/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>Fwlib-src</h1><p>/**</p><hr><ul><li>@file    misc.c</li><li>@author  MCD Application Team</li><li>@version V3.5.0</li><li>@date    11-March-2011</li><li>@brief   This file provides all the miscellaneous firmware functions (add-on</li><li><pre><code>     to CMSIS functions).</code></pre></li></ul><hr><ul><li>@attention<br>*</li><li>THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</li><li>WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</li><li>TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</li><li>DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</li><li>FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</li><li>CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.<br>*</li><li><h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2></li></ul><hr><p>*/</p><p>/* Includes ------------------------------------------------------------------*/<br>#include “misc.h”</p><p>/** @addtogroup STM32F10x_StdPeriph_Driver</p><ul><li>@{<br>*/</li></ul><p>/** @defgroup MISC</p><ul><li>@brief MISC driver modules</li><li>@{<br>*/</li></ul><p>/** @defgroup MISC_Private_TypesDefinitions</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Defines</p><ul><li>@{<br>*/</li></ul><p>#define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)<br>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Macros</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Variables</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_FunctionPrototypes</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/** @defgroup MISC_Private_Functions</p><ul><li>@{<br>*/</li></ul><p>/**</p><ul><li>@brief  Configures the priority grouping: pre-emption priority and subpriority.</li><li>@param  NVIC_PriorityGroup: specifies the priority grouping bits length.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority</code></pre></li><li><pre><code>                           4 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority</code></pre></li><li><pre><code>                           3 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority</code></pre></li><li><pre><code>                           2 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority</code></pre></li><li><pre><code>                           1 bits for subpriority</code></pre></li><li><pre><code>@arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority</code></pre></li><li><pre><code>                           0 bits for subpriority</code></pre></li><li>@retval None<br><em>/<br>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));</li></ul><p>/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */<br>SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;<br>}</p><p>/**</p><ul><li>@brief  Initializes the NVIC peripheral according to the specified</li><li><pre><code>    parameters in the NVIC_InitStruct.</code></pre></li><li>@param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains</li><li><pre><code>    the configuration information for the specified NVIC peripheral.</code></pre></li><li>@retval None<br><em>/<br>void NVIC_Init(NVIC_InitTypeDef</em> NVIC_InitStruct)<br>{<br>uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;</li></ul><p>/* Check the parameters */<br>assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct-&gt;NVIC_IRQChannelCmd));<br>assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct-&gt;NVIC_IRQChannelPreemptionPriority));<br>assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct-&gt;NVIC_IRQChannelSubPriority));</p><p>if (NVIC_InitStruct-&gt;NVIC_IRQChannelCmd != DISABLE)<br>{<br>/* Compute the Corresponding IRQ Priority --------------------------------*/<br>tmppriority = (0x700 - ((SCB-&gt;AIRCR) &amp; (uint32_t)0x700))&gt;&gt; 0x08;<br>tmppre = (0x4 - tmppriority);<br>tmpsub = tmpsub &gt;&gt; tmppriority;</p><pre><code>tmppriority = (uint32_t)NVIC_InitStruct-&gt;NVIC_IRQChannelPreemptionPriority &lt;&lt; tmppre;tmppriority |=  NVIC_InitStruct-&gt;NVIC_IRQChannelSubPriority &amp; tmpsub;tmppriority = tmppriority &lt;&lt; 0x04;    NVIC-&gt;IP[NVIC_InitStruct-&gt;NVIC_IRQChannel] = tmppriority;/* Enable the Selected IRQ Channels --------------------------------------*/NVIC-&gt;ISER[NVIC_InitStruct-&gt;NVIC_IRQChannel &gt;&gt; 0x05] =  (uint32_t)0x01 &lt;&lt; (NVIC_InitStruct-&gt;NVIC_IRQChannel &amp; (uint8_t)0x1F);</code></pre><p>}<br>else<br>{<br>/* Disable the Selected IRQ Channels -------------------------------------*/<br>NVIC-&gt;ICER[NVIC_InitStruct-&gt;NVIC_IRQChannel &gt;&gt; 0x05] =<br>(uint32_t)0x01 &lt;&lt; (NVIC_InitStruct-&gt;NVIC_IRQChannel &amp; (uint8_t)0x1F);<br>}<br>}</p><p>/**</p><ul><li>@brief  Sets the vector table location and Offset.</li><li>@param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_VectTab_RAM</code></pre></li><li><pre><code>@arg NVIC_VectTab_FLASH</code></pre></li><li>@param  Offset: Vector Table base offset field. This value must be a multiple</li><li><pre><code>    of 0x200.</code></pre></li><li>@retval None<br><em>/<br>void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));<br>assert_param(IS_NVIC_OFFSET(Offset));</li></ul><p>SCB-&gt;VTOR = NVIC_VectTab | (Offset &amp; (uint32_t)0x1FFFFF80);<br>}</p><p>/**</p><ul><li>@brief  Selects the condition for the system to enter low power mode.</li><li>@param  LowPowerMode: Specifies the new mode for the system to enter low power mode.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg NVIC_LP_SEVONPEND</code></pre></li><li><pre><code>@arg NVIC_LP_SLEEPDEEP</code></pre></li><li><pre><code>@arg NVIC_LP_SLEEPONEXIT</code></pre></li><li>@param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.</li><li>@retval None<br><em>/<br>void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_NVIC_LP(LowPowerMode));<br>assert_param(IS_FUNCTIONAL_STATE(NewState));</li></ul><p>if (NewState != DISABLE)<br>{<br>SCB-&gt;SCR |= LowPowerMode;<br>}<br>else<br>{<br>SCB-&gt;SCR &amp;= (uint32_t)(~(uint32_t)LowPowerMode);<br>}<br>}</p><p>/**</p><ul><li>@brief  Configures the SysTick clock source.</li><li>@param  SysTick_CLKSource: specifies the SysTick clock source.</li><li>This parameter can be one of the following values:</li><li><pre><code>@arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.</code></pre></li><li><pre><code>@arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.</code></pre></li><li>@retval None<br><em>/<br>void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)<br>{<br>/</em> Check the parameters */<br>assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));<br>if (SysTick_CLKSource == SysTick_CLKSource_HCLK)<br>{<br>SysTick-&gt;CTRL |= SysTick_CLKSource_HCLK;<br>}<br>else<br>{<br>SysTick-&gt;CTRL &amp;= SysTick_CLKSource_HCLK_Div8;<br>}<br>}</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/**</p><ul><li>@}<br>*/</li></ul><p>/******************* © COPYRIGHT 2011 STMicroelectronics *<strong><strong>END OF FILE</strong></strong>/</p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32底层（1）</title>
      <link href="/blogbeta/posts/c18ef7fb/"/>
      <url>/blogbeta/posts/c18ef7fb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>以下为我从网络上找到的cm3底层资料</p><h3 id="core">core</h3><p>/************************************************************************<strong>//</strong></p><ul><li>@file     core_cm3.c</li><li>@brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File</li><li>@version  V1.30</li><li>@date     30. October 2009</li><li></li><li>@note</li><li>Copyright © 2009 ARM Limited. All rights reserved.</li><li></li><li>@par</li><li>ARM Limited (ARM) is supplying this software for use with Cortex-M</li><li>processor based microcontrollers.  This file can be freely distributed</li><li>within development tools that are supporting such ARM based processors.</li><li></li><li>@par</li><li>THIS SOFTWARE IS PROVIDED “AS IS”.  NO WARRANTIES, WHETHER EXPRESS, IMPLIED</li><li>OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF</li><li>MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.</li><li>ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR</li><li>CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.</li><li></li></ul><p>******************************************************************************/</p><p>#include &lt;stdint.h&gt;</p><p>/* define compiler specific symbols <em>/<br>#if defined ( __CC_ARM   )<br>#define __ASM            __asm                                      /</em>!&lt; asm keyword for ARM Compiler          <em>/<br>#define __INLINE         __inline                                   /</em>!&lt; inline keyword for ARM Compiler       */</p><p>#elif defined ( <strong>ICCARM</strong> )<br>#define __ASM           __asm                                       /*!&lt; asm keyword for IAR Compiler          <em>/<br>#define __INLINE        inline                                      /</em>!&lt; inline keyword for IAR Compiler. Only avaiable in High optimization mode! */</p><p>#elif defined   (  <strong>GNUC</strong>  )<br>#define __ASM            __asm                                      /*!&lt; asm keyword for GNU Compiler          <em>/<br>#define __INLINE         inline                                     /</em>!&lt; inline keyword for GNU Compiler       */</p><p>#elif defined   (  <strong>TASKING</strong>  )<br>#define __ASM            __asm                                      /*!&lt; asm keyword for TASKING Compiler      <em>/<br>#define __INLINE         inline                                     /</em>!&lt; inline keyword for TASKING Compiler   */</p><p>#endif</p><p>/* ###################  Compiler specific Intrinsics  ########################### */</p><p>#if defined ( __CC_ARM   ) /<em>------------------RealView Compiler -----------------</em>/<br>/* ARM armcc specific functions */</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>__ASM uint32_t __get_PSP(void)<br>{<br>mrs r0, psp<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>__ASM void __set_PSP(uint32_t topOfProcStack)<br>{<br>msr psp, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>__ASM uint32_t __get_MSP(void)<br>{<br>mrs r0, msp<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>__ASM void __set_MSP(uint32_t mainStackPointer)<br>{<br>msr msp, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param   value  value to reverse</li><li>@return         reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>__ASM uint32_t __REV16(uint16_t value)<br>{<br>rev16 r0, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in signed short value with sign extension to integer</li><li></li><li>@param   value  value to reverse</li><li>@return         reversed value</li><li></li><li>Reverse byte order in signed short value with sign extension to integer<br>*/<br>__ASM int32_t __REVSH(int16_t value)<br>{<br>revsh r0, r0<br>bx lr<br>}</li></ul><p>#if (__ARMCC_VERSION &lt; 400000)</p><p>/**</p><ul><li>@brief  Remove the exclusive lock created by ldrex</li><li></li><li>Removes the exclusive lock which is created by ldrex.<br>*/<br>__ASM void __CLREX(void)<br>{<br>clrex<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Base Priority value</li><li></li><li>@return BasePriority</li><li></li><li>Return the content of the base priority register<br>*/<br>__ASM uint32_t  __get_BASEPRI(void)<br>{<br>mrs r0, basepri<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Base Priority value</li><li></li><li>@param  basePri  BasePriority</li><li></li><li>Set the base priority register<br>*/<br>__ASM void __set_BASEPRI(uint32_t basePri)<br>{<br>msr basepri, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Priority Mask value</li><li></li><li>@return PriMask</li><li></li><li>Return state of the priority mask bit from the priority mask register<br>*/<br>__ASM uint32_t __get_PRIMASK(void)<br>{<br>mrs r0, primask<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Priority Mask value</li><li></li><li>@param  priMask  PriMask</li><li></li><li>Set the priority mask bit in the priority mask register<br>*/<br>__ASM void __set_PRIMASK(uint32_t priMask)<br>{<br>msr primask, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Fault Mask value</li><li></li><li>@return FaultMask</li><li></li><li>Return the content of the fault mask register<br>*/<br>__ASM uint32_t  __get_FAULTMASK(void)<br>{<br>mrs r0, faultmask<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Fault Mask value</li><li></li><li>@param  faultMask  faultMask value</li><li></li><li>Set the fault mask register<br>*/<br>__ASM void __set_FAULTMASK(uint32_t faultMask)<br>{<br>msr faultmask, r0<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Control Register value</li><li></li><li>@return Control value</li><li></li><li>Return the content of the control register<br>*/<br>__ASM uint32_t __get_CONTROL(void)<br>{<br>mrs r0, control<br>bx lr<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Control Register value</li><li></li><li>@param  control  Control value</li><li></li><li>Set the control register<br>*/<br>__ASM void __set_CONTROL(uint32_t control)<br>{<br>msr control, r0<br>bx lr<br>}</li></ul><p>#endif /* __ARMCC_VERSION  */</p><p>#elif (defined (<strong>ICCARM</strong>)) /<em>------------------ ICC Compiler -------------------</em>/<br>/* IAR iccarm specific functions */<br>#pragma diag_suppress=Pe940</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>uint32_t __get_PSP(void)<br>{<br>__ASM(“mrs r0, psp”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>void __set_PSP(uint32_t topOfProcStack)<br>{<br>__ASM(“msr psp, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>uint32_t __get_MSP(void)<br>{<br>__ASM(“mrs r0, msp”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>void __set_MSP(uint32_t topOfMainStack)<br>{<br>__ASM(“msr msp, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>uint32_t __REV16(uint16_t value)<br>{<br>__ASM(“rev16 r0, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse bit order of value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse bit order of value<br>*/<br>uint32_t __RBIT(uint32_t value)<br>{<br>__ASM(“rbit r0, r0”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (8 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 8 bit values)<br>*/<br>uint8_t __LDREXB(uint8_t *addr)<br>{<br>__ASM(“ldrexb r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (16 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 16 bit values<br>*/<br>uint16_t __LDREXH(uint16_t *addr)<br>{<br>__ASM(“ldrexh r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  LDR Exclusive (32 bit)</li><li></li><li>@param  *addr  address pointer</li><li>@return        value of (*address)</li><li></li><li>Exclusive LDR command for 32 bit values<br>*/<br>uint32_t __LDREXW(uint32_t *addr)<br>{<br>__ASM(“ldrex r0, [r0]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (8 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 8 bit values<br>*/<br>uint32_t __STREXB(uint8_t value, uint8_t *addr)<br>{<br>__ASM(“strexb r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (16 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 16 bit values<br>*/<br>uint32_t __STREXH(uint16_t value, uint16_t *addr)<br>{<br>__ASM(“strexh r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>/**</p><ul><li>@brief  STR Exclusive (32 bit)</li><li></li><li>@param  value  value to store</li><li>@param  *addr  address pointer</li><li>@return        successful / failed</li><li></li><li>Exclusive STR command for 32 bit values<br>*/<br>uint32_t __STREXW(uint32_t value, uint32_t *addr)<br>{<br>__ASM(“strex r0, r0, [r1]”);<br>__ASM(“bx lr”);<br>}</li></ul><p>#pragma diag_default=Pe940</p><p>#elif (defined (<strong>GNUC</strong>)) /<em>------------------ GNU Compiler ---------------------</em>/<br>/* GNU gcc specific functions */</p><p>/**</p><ul><li>@brief  Return the Process Stack Pointer</li><li></li><li>@return ProcessStackPointer</li><li></li><li>Return the actual process stack pointer<br>*/<br>uint32_t __get_PSP(void) <strong>attribute</strong>( ( naked ) );<br>uint32_t __get_PSP(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, psp\n\t”<br>“MOV r0, %0 \n\t”<br>“BX  lr     \n\t”  : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Process Stack Pointer</li><li></li><li>@param  topOfProcStack  Process Stack Pointer</li><li></li><li>Assign the value ProcessStackPointer to the MSP</li><li>(process stack pointer) Cortex processor register<br>*/<br>void __set_PSP(uint32_t topOfProcStack) <strong>attribute</strong>( ( naked ) );<br>void __set_PSP(uint32_t topOfProcStack)<br>{<br>__ASM volatile (“MSR psp, %0\n\t”<br>“BX  lr     \n\t” : : “r” (topOfProcStack) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Main Stack Pointer</li><li></li><li>@return Main Stack Pointer</li><li></li><li>Return the current value of the MSP (main stack pointer)</li><li>Cortex processor register<br>*/<br>uint32_t __get_MSP(void) <strong>attribute</strong>( ( naked ) );<br>uint32_t __get_MSP(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, msp\n\t”<br>“MOV r0, %0 \n\t”<br>“BX  lr     \n\t”  : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Main Stack Pointer</li><li></li><li>@param  topOfMainStack  Main Stack Pointer</li><li></li><li>Assign the value mainStackPointer to the MSP</li><li>(main stack pointer) Cortex processor register<br>*/<br>void __set_MSP(uint32_t topOfMainStack) <strong>attribute</strong>( ( naked ) );<br>void __set_MSP(uint32_t topOfMainStack)<br>{<br>__ASM volatile (“MSR msp, %0\n\t”<br>“BX  lr     \n\t” : : “r” (topOfMainStack) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Base Priority value</li><li></li><li>@return BasePriority</li><li></li><li>Return the content of the base priority register<br>*/<br>uint32_t __get_BASEPRI(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, basepri_max” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Base Priority value</li><li></li><li>@param  basePri  BasePriority</li><li></li><li>Set the base priority register<br>*/<br>void __set_BASEPRI(uint32_t value)<br>{<br>__ASM volatile (“MSR basepri, %0” : : “r” (value) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Priority Mask value</li><li></li><li>@return PriMask</li><li></li><li>Return state of the priority mask bit from the priority mask register<br>*/<br>uint32_t __get_PRIMASK(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, primask” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Priority Mask value</li><li></li><li>@param  priMask  PriMask</li><li></li><li>Set the priority mask bit in the priority mask register<br>*/<br>void __set_PRIMASK(uint32_t priMask)<br>{<br>__ASM volatile (“MSR primask, %0” : : “r” (priMask) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Fault Mask value</li><li></li><li>@return FaultMask</li><li></li><li>Return the content of the fault mask register<br>*/<br>uint32_t __get_FAULTMASK(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, faultmask” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Fault Mask value</li><li></li><li>@param  faultMask  faultMask value</li><li></li><li>Set the fault mask register<br>*/<br>void __set_FAULTMASK(uint32_t faultMask)<br>{<br>__ASM volatile (“MSR faultmask, %0” : : “r” (faultMask) );<br>}</li></ul><p>/**</p><ul><li>@brief  Return the Control Register value</li><li></li><li>@return Control value</li><li></li><li>Return the content of the control register<br>*/<br>uint32_t __get_CONTROL(void)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“MRS %0, control” : “=r” (result) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Set the Control Register value</li><li></li><li>@param  control  Control value</li><li></li><li>Set the control register<br>*/<br>void __set_CONTROL(uint32_t control)<br>{<br>__ASM volatile (“MSR control, %0” : : “r” (control) );<br>}</li></ul><p>/**</p><ul><li>@brief  Reverse byte order in integer value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in integer value<br>*/<br>uint32_t __REV(uint32_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“rev %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Reverse byte order in unsigned short value</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in unsigned short value<br>*/<br>uint32_t __REV16(uint16_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“rev16 %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li>@brief  Reverse byte order in signed short value with sign extension to integer</li><li></li><li>@param  value  value to reverse</li><li>@return        reversed value</li><li></li><li>Reverse byte order in signed short value with sign extension to integer<br>*/<br>int32_t __REVSH(int16_t value)<br>{<br>uint32_t result=0;</li></ul><p>__ASM volatile (“revsh %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p><p>/**</p><ul><li><p>@brief  Reverse bit order of value</p></li><li></li><li><p>@param  value  value to reverse</p></li><li><p>@return        reversed value</p></li><li></li><li><p>Reverse bit order of value<br>*/<br>uint32_t __RBIT(uint32_t value)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“rbit %0, %1” : “=r” (result) : “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (8 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 8 bit value<br>*/<br>uint8_t __LDREXB(uint8_t *addr)<br>{<br>uint8_t result=0;</p><p>__ASM volatile (“ldrexb %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (16 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 16 bit values<br>*/<br>uint16_t __LDREXH(uint16_t *addr)<br>{<br>uint16_t result=0;</p><p>__ASM volatile (“ldrexh %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  LDR Exclusive (32 bit)</p></li><li></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        value of (*address)</p></li><li></li><li><p>Exclusive LDR command for 32 bit values<br>*/<br>uint32_t __LDREXW(uint32_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“ldrex %0, [%1]” : “=r” (result) : “r” (addr) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (8 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 8 bit values<br>*/<br>uint32_t __STREXB(uint8_t value, uint8_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strexb %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (16 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 16 bit values<br>*/<br>uint32_t __STREXH(uint16_t value, uint16_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strexh %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>/**</p><ul><li><p>@brief  STR Exclusive (32 bit)</p></li><li></li><li><p>@param  value  value to store</p></li><li><p>@param  *addr  address pointer</p></li><li><p>@return        successful / failed</p></li><li></li><li><p>Exclusive STR command for 32 bit values<br>*/<br>uint32_t __STREXW(uint32_t value, uint32_t *addr)<br>{<br>uint32_t result=0;</p><p>__ASM volatile (“strex %0, %2, [%1]” : “=r” (result) : “r” (addr), “r” (value) );<br>return(result);<br>}</p></li></ul><p>#elif (defined (<strong>TASKING</strong>)) /<em>------------------ TASKING Compiler ---------------------</em>/<br>/* TASKING carm specific functions */</p><p>/*</p><ul><li>The CMSIS functions have been implemented as intrinsics in the compiler.</li><li>Please use “carm -?i” to get an up to date list of all instrinsics,</li><li>Including the CMSIS ones.<br>*/</li></ul><p>#endif</p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的照片</title>
      <link href="/blogbeta/posts/68ac9c73/"/>
      <url>/blogbeta/posts/68ac9c73/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>照片体积有点大，缓冲的可能有点慢</center><span id="more"></span><p><a href="https://imgchr.com/i/0xrBnK"><img src="https://s1.ax1x.com/2020/10/19/0xrBnK.jpg" alt="0xrBnK.jpg" loading="lazy"></a><br><a href="https://imgchr.com/i/0xrr7D"><img src="https://s1.ax1x.com/2020/10/19/0xrr7D.jpg" alt="0xrr7D.jpg" loading="lazy"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随拍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过山车</title>
      <link href="/blogbeta/posts/224ff270/"/>
      <url>/blogbeta/posts/224ff270/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1>狐言乱语</h1><p>RTkldTIwMENBNiV1MjAwQzk2JTIwRTUldTIwMEM4NSV1MjAwQz<br>g4JTIwRTUldTIwMEM5MSV1MjAwQ0EyJTIwRUYldTIwMENCQyV<br>1MjAwQzhDJTIwRTQldTIwMENCQiV1MjAwQzhBJTIwRTUldTIwM<br>ENBNCV1MjAwQ0E5JTIwRTkldTIwMEM5MiV1MjAwQzg4JTIwRT<br>QldTIwMENCOCV1MjAwQzhEJTIwRTYldTIwMEM4OCV1MjAwQ0Iz</p><p>RTUldTIwMENCRiV1MjAwQzgzJTIwRTYldTIwMEM4MyV1MjAwQzg1<br>JTIwRTQldTIwMENCOSV1MjAwQzlGJTIwRTUldTIwMENBNiV1MjAw<br>QzgyJTIwRTUldTIwMEM5MCV1MjAwQzhDJTIwRTgldTIwMENCRiV1<br>MjAwQzg3JTIwRTUldTIwMENCMSV1MjAwQ0IxJTIwRTgldTIwMENC<br>RCV1MjAwQ0E2JTIwRTQldTIwMENCOCV1MjAwQzgwJTIwRTgldTIw<br>MEM4OCV1MjAwQ0FDJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwRT<br>UldTIwMEM4RSV1MjAwQzlGJTIwRTYldTIwMEM5QyV1MjAwQ0FDJT<br>IwRTQldTIwMENCQiV1MjAwQ0E1JTIwRTQldTIwMENCOCV1MjAwQ0<br>JBJTIwRTgldTIwMEM4NyV1MjAwQ0FBJTIwRTUldTIwMENCNyV1MjA<br>wQ0IxJTIwRTUldTIw<br>MEM5NSV1MjAwQzhBJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwRTU<br>ldTIwMENCNyV1MjAwQ0IyJTIwRTcldTIwMENCQiV1MjAwQzhGJTIwR<br>TgldTIwMENCNiV1MjAwQzg1JTIwRTgldTIwMENCRCV1MjAwQ0E2JT<br>IwRTQldTIwMENCQSV1MjAwQzg2JTIwRUYldTIwMENCQyV1MjAwQz<br>hDJTIwRTYldTIwMENCMiV1MjAwQ0ExJTIwRTYldTIwMEM4MyV1MjA<br>wQ0IzJTIwRTUldTIwMEM4OCV1MjAwQ0IwJTIwRTUldTIwMEM4MyV<br>1MjAwQzhGJTIwRTUldTIwMEM5RCV1MjAwQzkwJTIwRTgldTIwMENC<br>RiV1MjAwQzg3JTIwRTUldTIwMENCMSV1MjAwQ0IxJTIwRTgldTIwME<br>NCRCV1MjAwQ0E2JTIwRTQldTIwMENCOCV1MjAwQzgwJTIwRTgldT<br>IwMEM4OCV1MjAwQ0FDJTIwRUYldTIwMENCQyV1MjAwQzhDJTIwR<br>TcldTIwMEM5QiV1MjAwQ0I0JTIwRTQldTIwMENCOCV1MjAwQzhBJTI<br>wRTcldTIwMEM5QiV1MjAwQ0I0JTIwRTQldTIwMENCOCV1MjAwQzhC<br>JTIwRTMldTIwMEM4MCV1MjAwQzgy</p><p><u>E9‌92‌88 E5‌88‌BA E6‌BF‌80 E3‌80‌82</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fox saying </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-3</title>
      <link href="/blogbeta/posts/63792a05/"/>
      <url>/blogbeta/posts/63792a05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>今天做了个小题</p><p>题目如下</p><hr><h2 id="题目描述：菜狗找到了文件中的彩蛋很开心-给菜猫发了个表情包00c8s0-gif">题目描述：菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包<br><img src="https://s1.ax1x.com/2020/10/08/00c8s0.gif" alt="00c8s0.gif" loading="lazy"></h2><span id="more"></span><p>我们很容易就能看出，这个动图里面有一帧是带二维码的，于是乎，把这一帧给抽出来。s<br><img src="https://s1.ax1x.com/2020/10/08/00cQRs.png" alt="00cQRs.png" loading="lazy"><br>我们明显看出这个二维码缺了三块 （定位角）。<br>于是乎，祭出了我的大ps。<br>从网络上找了一个定位角</p><hr><p><img src="https://s1.ax1x.com/2020/10/08/00cnIg.th.png" alt="00cnIg.th.png" loading="lazy"><br>简单修一下之后p进去图片</p><hr><p><img src="https://s1.ax1x.com/2020/10/08/00cMGj.png" alt="00cMGj.png" loading="lazy"></p><hr><p>之后找个二维码工具扫描一下就行了，就可以获得flag了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-2</title>
      <link href="/blogbeta/posts/147e1a93/"/>
      <url>/blogbeta/posts/147e1a93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><hr><h3 id="题目如图所示">题目如图所示</h3><img src="https://s1.ax1x.com/2020/10/08/00bXQK.png" alt="00bXQK.png" style="zoom: 67%;" / loading="lazy"><span id="more"></span><hr><h3 id="下载下来附件">下载下来附件</h3><p><img src="https://s1.ax1x.com/2020/10/08/00q1S0.png" alt="00q1S0.png" loading="lazy"></p><hr><h3 id="打开pdf-里面是一张图片">打开pdf，里面是一张图片</h3><p><img src="https://s1.ax1x.com/2020/10/08/00qdYR.png" alt="00qdYR.png" loading="lazy"></p><hr><p><strong>结合题目，图片下面什么都没有（滑稽）</strong><br><strong>就能猜出个大概了，应该是图片下面有一些小文章</strong><br><em><strong>but</strong></em>，<strong>pdf格式直接打开是不能编辑的</strong><br>这时候我们就要想几个<strong>特殊</strong>方案了</p><blockquote><ul><li>方案一</li><li>使用pdf转换器，将pdf文件转换为word文件</li></ul><ul><li>方案2</li><li>使用可以直接编辑pdf的编辑器（这个有很多，大多叫什么高级编辑器，很容易就能找到）</li></ul><ul><li>方案3</li><li>转换为文本格式打开（笑），找到flag并复制</li></ul></blockquote><p>这三种方法都可以找到图片下面的小东西，之后复制flag提交上去就完成了！</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MISC-1</title>
      <link href="/blogbeta/posts/8d774b29/"/>
      <url>/blogbeta/posts/8d774b29/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>misc最简单的一道题目,如图所示</center><hr><img src="https://s1.ax1x.com/2020/10/08/002kHf.png" alt="002kHf.png" style="zoom:67%;" / loading="lazy"><span id="more"></span><hr><p><strong>这道题主要是说明夺旗战的玩法，以及我们在做题时需要上传的答案的格式说明。</strong><br><strong>flag只要复制下来即可</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
