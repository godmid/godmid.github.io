<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冥狐的小站</title>
  
  <subtitle>如无必要，勿增实体</subtitle>
  <link href="https://www.darkfox.top/atom.xml" rel="self"/>
  
  <link href="https://www.darkfox.top/"/>
  <updated>2023-10-11T07:03:38.221Z</updated>
  <id>https://www.darkfox.top/</id>
  
  <author>
    <name>DarkFox</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mos管的驱动与计算</title>
    <link href="https://www.darkfox.top/posts/f1550c39/"/>
    <id>https://www.darkfox.top/posts/f1550c39/</id>
    <published>2023-10-11T06:04:41.000Z</published>
    <updated>2023-10-11T07:03:38.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  简单记录一下常见的驱动方式的异同点，以及部分参数的计算。 </center><span id="more"></span><h1>几种驱动方式</h1><h2 id="1-直接驱动">1.直接驱动</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111408139.png" alt="image-图片来源于21ic电子网" loading="lazy"></p><p>这种驱动方式需要注意：</p><p>①查看电源IC手册的最大驱动峰值电流，因为不同芯片，驱动能力很多时候是不一样的。</p><p>②了解MOS管的寄生电容，如图C1、C2的值，这个寄生电容越小越好。如果C1、C2的值比较大，MOS管导通的需要的能量就比较大，如果电源IC没有比较大的驱动峰值电流，那么管子导通的速度就比较慢，就达不到想要的效果。</p><p>案例：使用MCU直接驱动MOS管IRLR7843(导通电压4.5V),外部供电VCC 24V.</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111418956.png" alt="image-20231011141820922" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111415177.png" alt="image-20231011141523153" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111416309.png" alt="image-20231011141609289" loading="lazy"></p><p>特点非常明显，驱动简单，导通电压低，只需要简单的几个器件就可以驱动较大大功率外设。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111420790.png" alt="image-20231011142020771" loading="lazy"></p><p>缺点也很明显，直驱有风险，选择需谨慎，功能实现可以这样玩，低速PWM运行的时候是没有太大压力的。但是到了较高速度的运行场景，这种方式就显得捉襟见肘了。</p><h2 id="2-推挽驱动">2.推挽驱动</h2><p>单片机以及电机驱动经常用到的电路</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111422131.png" alt="image-20231011142218097" loading="lazy"></p><p>这种驱动电路好处是提升电流提供能力，迅速完成对于栅极输入电容电荷的充电过程。这种拓扑增加了导通所需要的时间，但是减少了关断时间，开关管能快速开通且避免上升沿的高频振荡。</p><p>例如单单片机的输出控制单元：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111423693.png" alt="image-20231011142346661" loading="lazy"></p><h2 id="3-加速关断驱动">3.加速关断驱动</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111424438.png" alt="image-20231011142440401" loading="lazy"></p><p>MOS管一般都是慢开快关。在关断瞬间驱动电路能提供一个尽可能低阻抗的通路供MOSFET栅源极间电容电压快速泄放，保证开关管能快速关断。</p><p>为使栅源极间电容电压的快速泄放，常在驱动电阻上并联一个电阻和一个二极管，如上图所示，其中D1常用的是快恢复二极管。这使关断时间减小，同时减小关断时的损耗。Rg2是防止关断的时电流过大，把电源IC给烧掉。</p><h2 id="4-奇淫技巧">4.奇淫技巧</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111433735.png" alt="image-20231011143356704" loading="lazy"></p><p>用三极管来泄放栅源极间电容电压，Q1的发射极没有电阻，当PNP三极管导通时，栅源极间电容短接，达到最短时间内把电荷放完，最大限度减小关断时的交叉损耗。</p><h2 id="4-隔离驱动">4.隔离驱动</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111436556.png" alt="image-20231011143652536" loading="lazy"></p><p>其中R1目的是抑制PCB板上寄生的电感与C1形成LC振荡，C1的目的是隔开直流，通过交流，同时也能防止磁芯饱和。</p><p>另外变压器也可以作隔离作用，副边烧毁的时候，原边也可以相安无事。</p><p>案例：驱动大功率设备使用</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111437205.png" alt="image-20231011143748187" loading="lazy"></p><p>未完待续…………</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;  简单记录一下常见的驱动方式的异同点，以及部分参数的计算。 &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>UnlockExcel</title>
    <link href="https://www.darkfox.top/posts/ee3605ad/"/>
    <id>https://www.darkfox.top/posts/ee3605ad/</id>
    <published>2023-09-15T03:31:26.000Z</published>
    <updated>2023-10-11T03:26:01.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202309151132214.png" alt="image-20230915113212141" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202309151132063.png" alt="image-20230915113239041" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202309151132291.png" alt="image-20230915113257274" loading="lazy"></p><p>宏代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sub DeletePW()</span><br><span class="line"></span><br><span class="line">ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFiltering:=True</span><br><span class="line"></span><br><span class="line">ActiveSheet.Protect DrawingObjects:=False, Contents:=True, AllowFiltering:=True</span><br><span class="line"></span><br><span class="line">ActiveSheet.Protect DrawingObjects:=True, Contents:=True, AllowFiltering:=True</span><br><span class="line"></span><br><span class="line">ActiveSheet.Protect DrawingObjects:=False, Contents:=True, AllowFiltering:=True</span><br><span class="line"></span><br><span class="line">ActiveSheet.Unprotect</span><br><span class="line"></span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>学习笔记-23815E</title>
    <link href="https://www.darkfox.top/posts/81df70dc/"/>
    <id>https://www.darkfox.top/posts/81df70dc/</id>
    <published>2023-08-15T01:30:58.000Z</published>
    <updated>2023-08-21T01:39:04.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="特殊用处电阻">特殊用处电阻</h3><p><strong>比较特殊的电阻，在这指的是检流电阻，有多种封装，有陶瓷、合金等封装，合金的能过更大的电流。</strong><br><strong>采用开尔文连接方式是为了解耦。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308150934764.png" alt="image-20230815093406631" loading="lazy"></p><center> 检流电阻</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308150956294.png" alt="image-20230815095615280" loading="lazy"></p><center> 开尔文连接方式  </center><h3 id="常用电容">常用电容</h3><p><strong>电容常见的封装也就这几种，其中钽电容和电解电容有极性，不可以接反，至于为啥不可以反接，这个和制作工艺有关。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308150935289.png" alt="image-20230815093536224" loading="lazy"></p><p><strong>以电解电容为例：</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308161637939.png" alt="image-20230816163709865" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308161638611.png" alt="image-20230816163830576" loading="lazy"></p><p><strong>电解电容由如上几个部分组成，通常情况下阳极材料为阳极的铝箔及其氧化层，阴极材料为电解纸里面的电解液，阴极铝箔通常只起到导体的作用，但是阴极的铝箔并没有化成（没有或有很少量氧化膜）所以耐压值比较低，因此电解电容具有极性。若在阴极加入比较大的电压，则会发生化学反应，迅速增加漏电流，过多的电流会迅速转化为热量，进而气体膨胀，泄压阀崩开，器件损坏。</strong></p><h3 id="调压器">调压器</h3><p><strong>我们需要很多不同数值的电压，目前有三大类调压方式（DC-DC）</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308150950599.png" alt="image-20230815095023511" loading="lazy"></p><h4 id="学长给与的部分经验-踩过的坑"><strong>学长给与的部分经验（踩过的坑）</strong></h4><p><strong>我们经常会遇到一些电源芯片输出电流不够用的时候，通常我们会选择并联模块或者IC，但是有些时候一些LDO并联带来的结果往往不如人意。</strong></p><p><strong>原因在于LDO的架构，例如1117的架构，如下图。他的工作原理很简单，就是让三极管工作在可变电阻区，通过电阻分压输入比较器来决定其阻值大小。但是如果并联一个1117的话，就会使电阻的阻值变得不确定,就达不到预期效果。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308150955065.png" alt="image-20230815095505038" loading="lazy"></p><p><strong>BUCK电路公式的推导，由于能量守恒，输入输出两侧的飞秒积是一致的，因而输入部分乘以占空比就是输出部分。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308151004857.png" alt="image-20230815100410800" loading="lazy"></p><h4 id="部分电源思路">部分电源思路</h4><p><strong>中南大学之前的电源供电电路分享,可以看到他们采用了DC_DC+LDO的方案</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308151032539.png" alt="image-20230815103257394" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171714717.png" alt="image-20230817171400625" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171714372.png" alt="image-20230817171447333" loading="lazy"></p><p><strong>手册上可以看到性能还可以，但LDO输出带载能力低一点，只能给一个MCU供电，有其他的外设不建议用这个。</strong></p><h4 id="保险电路">保险电路</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308151033189.png" alt="image-20230815103327088" loading="lazy"></p><p><strong>其实除了这两个之外，还有很多防反接的方案。不考虑压降的话，可以使用一个二极管，或者全桥整流电路。对压降敏感的话可以使用一个MOS管接到输入端，加入分压电阻引出到MOS，如图所示：</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171728630.png" alt="image-20230817172821600" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171728458.png" alt="image-20230817172847436" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171729613.png" alt="image-20230817172915585" loading="lazy"></p><h4 id="去耦电路">去耦电路</h4><p><strong>简单讲就是滤波，不让前面的纹波等杂波影响到后面的电路，这一段在b站有部分讲解，up主是中南大学FYT机器人战队，也是一堆RMer。学长讲这部分为啥一堆一样的电容进行堆积使用，他的说法是电容并联增加容量，性能会更好巴拉巴拉。我之前看过相关的资料，这个解释是有点牵强的。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171751206.png" alt="image-20230817175111095" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308151035454.png" alt="image-20230815103535330" loading="lazy"></p><center>学长的说法实际上搞起来是这样的</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171740960.png" alt="image-20230817174016865" loading="lazy"></p><p><strong>以1M那个位置为例子，看上去是容量变大阻抗也变大了，但是频率特性点完全变了。实际上并不是这样，和学长说的类似我们一般滤波会使用两种方式。一种是大小电容并联，一种是多个一样的电容并联，举个例子：</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171752397.png" alt="image-20230817175244350" loading="lazy"></p><p><strong>大小电容有着各自的频率特性曲线，以及各自的谐振频率，如图f1、f2，频率较小的时候，都显容性，频率较大的时候，都显感性。落在中间的时候一个显感性，一个显示容性，这时候就变成了类似于LC滤波的模型，要注意谐振点，那一点阻抗值比较大。相对于单个，可以看到在现在是两个谐振点的阻抗都比较小，所以间接性的类似于可通过的频率范围变宽了。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171753489.png" alt="image-20230817175305453" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171759740.png" alt="image-20230817175910649" loading="lazy"></p><p><strong>多个同样的电容并联的时候相当于频率特性曲线往下使劲拉，阻抗曲线整体形状不变，但是各个频点的整体阻抗变小，可以简单理解为可以通过的波的范围变宽了，并不是像学长理解的容量值增长那样的模型。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308171800781.png" alt="image-20230817180032741" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">学习笔记，代号23815E，内容是关于硬件方面的部分知识。包括但不限于元器件与典型电路。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>硬件基础知识-PCB板</title>
    <link href="https://www.darkfox.top/posts/cdee3532/"/>
    <id>https://www.darkfox.top/posts/cdee3532/</id>
    <published>2023-08-05T07:54:49.000Z</published>
    <updated>2023-08-17T09:04:06.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><!-- *                        佛祖保佑     永不宕机     永无BUG *                        佛曰:   *                        写字楼里写字间，写字间里程序员；   *                        程序人员写程序，又拿程序换酒钱。   *                        酒醒只在网上坐，酒醉还来网下眠；   *                        酒醉酒醒日复日，网上网下年复年。   *                        但愿老死电脑间，不愿鞠躬老板前；   *                        奔驰宝马贵者趣，公交自行程序员。   *                        别人笑我忒疯癫，我笑自己命太贱；   *                        不见满街漂亮妹，哪个归得程序员？ *                         *                        @Author: DarkFox 494752893@qq.com *                        @Date: 2023-07-28 09:19:44 *                        @LastEditors: DarkFox 494752893@qq.com *                        @LastEditTime: 2023-07-28 10:39:23 *                        @FilePath: \undefinedd:\PROGRAM\B-EE-23728\B-EE-23728.md *                        @Description:                           --><h1>学习笔记 代号：23728</h1><hr><h2 id="学习计划">学习计划</h2><ul><li>[x] 单端反激式电源仿真设计</li><li>[ ] 单端反激式电源SCH设计</li><li>[x] 电力电子升降压拓扑结构仿真</li><li>[x] 硬件知识学习</li></ul><hr><h2 id="单端反激式电源仿真设计">单端反激式电源仿真设计</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554949.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554900.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554935.png" alt="Alt text" loading="lazy"></p><h2 id="拓扑结构">拓扑结构</h2><p>boost<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554049.png" alt="Alt text" loading="lazy"><br>buck<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554976.png" alt="Alt text" loading="lazy"><br>buck-boost<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554093.png" alt="Alt text" loading="lazy"><br>δ变换<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554493.png" alt="Alt text" loading="lazy"><br>SEPIC<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554918.png" alt="Alt text" loading="lazy"></p><h2 id="硬件知识学习">硬件知识学习</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554467.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051554932.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555176.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555417.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555528.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555818.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555868.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555604.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555655.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555042.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555114.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555178.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555511.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051555262.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051556967.png" alt="Alt text" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LLC串联谐振笔记</title>
    <link href="https://www.darkfox.top/posts/7287732b/"/>
    <id>https://www.darkfox.top/posts/7287732b/</id>
    <published>2023-08-05T07:44:26.000Z</published>
    <updated>2023-08-05T07:53:17.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> @Author: DarkFox 494752893@qq.com</span><br><span class="line"><span class="bullet">*</span> @Date: 2023-07-26 08:44:14</span><br><span class="line"><span class="bullet">*</span> @LastEditors: DarkFox 494752893@qq.com</span><br><span class="line"><span class="bullet">*</span> @LastEditTime: 2023-07-26 14:24:40</span><br><span class="line"><span class="bullet">*</span> @FilePath: \undefinedd:\PROGRAM\B-EE-23726\23726.md</span><br><span class="line"><span class="bullet">*</span> @Description: </span><br></pre></td></tr></table></figure><h1>学习笔记，代号：23726</h1><ul><li>[x] EMC与信号完整性<a href="https://www.bilibili.com/video/BV1Ce4y1h7w5">学习</a>（大纲）</li><li>[x] 基本元器件（电阻）的使用方法</li><li>[x] 变压器的<a href="https://www.bilibili.com/video/BV1BA4y1f7Jm">选择与计算</a></li><li>[x] 反激式开关电源理论<a href="https://www.bilibili.com/video/BV1B4411k7bx">学习</a></li></ul><hr><h2 id="去耦电容">去耦电容</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-1.png" alt="Alt text" loading="lazy"><br>转折点的频率计算公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi><msqrt><mrow><mi>E</mi><mi>S</mi><mi>L</mi><mo>×</mo><msub><mi>C</mi><mn>0</mn></msub></mrow></msqrt></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac { 1 } { 2 \pi \sqrt { E S L \times C _ { 0 } } }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2583349999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.851665em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.811665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18833500000000003em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-2.png" alt="Alt text" loading="lazy"><br>在插件时代，0.1uf。1uf，10uf的频率特性差距很大，一般0.1uf在高频状态下阻抗极低，被称为高频电容。但是在贴片时代，ESR与封装有关，相同的封装下ESR与ESL基本相似。所以10uf与0.1uf的频率特性可能相似，10uf的贴片也可以作为高频去耦电容。</p><h2 id="电路板emc">电路板EMC</h2><h3 id="专家">专家</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-3.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-4.png" alt="Alt text" loading="lazy"></p><p>三位EMC专家，Eric为信号完整性书籍的作者。</p><h3 id="为什么要运用emc">为什么要运用EMC</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-5.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-6.png" alt="Alt text" loading="lazy"></p><ul><li>在电路板上对成本与EMC进行控制是设计人员最简单直接的过程控制。</li></ul><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051551032.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-9.png" alt="Alt text" loading="lazy"></p><ul><li>低电压芯片更容易受到干扰，对EMC要求变得更高。</li></ul><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-10.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-11.png" alt="Alt text" loading="lazy"><br>经验公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>T</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>10</mn><mo>×</mo><mi>F</mi><mo stretchy="false">(</mo><mi>c</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">R T = \frac { 1 } { 10 \times F ( c l o c k ) }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-12.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-13.png" alt="Alt text" loading="lazy"></p><ul><li>经验法则计算出来的沿长度的三分之一小于PCB板长度，这个信号就是高速信号。<br>例如图中的例子上升时间为3ns的时候：<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mi>R</mi><mi>T</mi><mo>×</mo><mi>V</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>3</mn><mi>n</mi><mi>s</mi><mo>×</mo><mn>15</mn><mi>c</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>n</mi><mi>s</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>45</mn><mi>c</mi><mi>m</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\left. \begin{array}  { l  }  { = R T \times V } \\ { = 3 n s \times 15 c m / n s } \\ { = 45 c m } \end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">5</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>45</mn><mi>c</mi><mi>m</mi><mo>÷</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>15</mn><mi>c</mi><mi>m</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\left. \begin{array}  { l  }  { = 45 c m \div 3 } \\ { = 15 c m } \end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4000000000000004em;vertical-align:-0.9500000000000004em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">5</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>板子只要大于15cm，这个信号就是高速的。</p><h3 id="发展趋势">发展趋势</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-15.png" alt="Alt text" loading="lazy"></p><h2 id="反激式开关电源">反激式开关电源</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-16.png" alt="Alt text" loading="lazy"></p><ul><li>三种工作模式：</li></ul><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-18.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-25.png" alt="Alt text" loading="lazy"><br>CCM：连续工作模式，能量只会输出一部分，总会有一部分能量被储存，因而输出连续<br>DCM：离散工作模式，能量被储存后一次性输出去，类似于脉冲，输出不连续但是能量高<br>BCM：边界(临界)工作模式，能量进来与出去的一致<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-19.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20.png" alt="Alt text" loading="lazy"></p><h3 id="拿uc3844举例子">拿UC3844举例子</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-21.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-24.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-22.png" alt="Alt text" loading="lazy"><br><strong>EMI滤波部分</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-23.png" alt="Alt text" loading="lazy"><br><strong>RCD吸收电路</strong></p><p>3842B工作频率的计算公式：<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2023-07-26_11-53-23.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-28.png" alt="Alt text" loading="lazy"><br>相对应的可行的最大占空比：<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-26.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-27.png" alt="Alt text" loading="lazy"></p><h2 id="变压器的计算与选择">变压器的计算与选择</h2><ol><li>整理需求</li></ol><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-29.png" alt="Alt text" loading="lazy"></p><ol start="2"><li><p>计算原边电感<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-30.png" alt="Alt text" loading="lazy"></p></li><li><p>计算流过MOS管的电流峰值</p></li><li><p>计算流过MOS管的均方根值<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-31.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202308051552565.png" alt="Alt text" loading="lazy"></p></li><li><p>计算最小变压器面积AP<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-33.png" alt="Alt text" loading="lazy"></p></li><li><p>选取高频变压器铁芯</p></li><li><p>/<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-34.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-35.png" alt="Alt text" loading="lazy"></p></li><li><p>原边匝数<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-36.png" alt="Alt text" loading="lazy"></p></li><li><p>副边匝数<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-37.png" alt="Alt text" loading="lazy"></p></li><li><p>辅助匝数<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-38.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-39.png" alt="Alt text" loading="lazy"><br>Vd为管子导通压降，例如0.7v<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-40.png" alt="Alt text" loading="lazy"><br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-41.png" alt="Alt text" loading="lazy"></p></li></ol><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>长按开关机功能的实现</title>
    <link href="https://www.darkfox.top/posts/d8e5df5d/"/>
    <id>https://www.darkfox.top/posts/d8e5df5d/</id>
    <published>2023-03-01T01:15:05.000Z</published>
    <updated>2023-03-01T02:09:48.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>单片机</h1><p>首先是可以依赖于单片机实现该功能</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301091557880.png" alt="image-20230301091557880" loading="lazy"></p><h1>分立式</h1><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301093825789.png" alt="image-20230301093825789" loading="lazy"></p><h2 id="仿真">仿真</h2><p>使用软件仿真了一下，效果如下，基本实现了功能。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301100353812.png" alt="image-20230301100353812" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301100412248.png" alt="image-20230301100412248" loading="lazy"></p><h1>集成芯片方案</h1><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301100553439.png" alt="image-20230301100553439" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301100848448.png" alt="image-20230301100848448" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>关于pcb线宽选择的一些经验</title>
    <link href="https://www.darkfox.top/posts/ffc9c3e1/"/>
    <id>https://www.darkfox.top/posts/ffc9c3e1/</id>
    <published>2023-02-23T01:50:27.000Z</published>
    <updated>2023-10-17T01:19:46.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>线宽温升实际测试</h1><p>测试数据来源于工科男孙老师：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230223095206255.png" alt="image-20230223095206255" loading="lazy"></p><p>或者利用数方格的方法来计算走线电阻，比较准。铜厚1oz时一个导线方格的电阻约为0.5mΩ（与方格边长无关），这是根据铜的电阻率算出来的。</p><p>R=ρ·L/S，1.75×10^-8 × (1/(1×35×10^-6)) = 0.0005Ω</p><h2 id="结论">结论</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230223095430001.png" alt="image-20230223095430001" loading="lazy"></p><h1>缝合孔——接地/布线/射频屏蔽</h1><p>缝合孔阵列能有效的屏蔽一些射频干扰</p><p>经验公式：假设所用的FR-4板材DK值为4</p><p>DK与DF的相关介绍可以看这篇<a href="https://blog.csdn.net/impossible1224/article/details/122873186">文章</a></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230301090339021.png" alt="image-20230301090339021" loading="lazy"></p><p>若缝合孔矩阵间距为Xmm，则最大可屏蔽的噪声频率为1.5 x e+8 / 8X</p><p>例如80mil的间距的矩阵，带入可得1.5 x e+8 / 0.016 = 9.375Ghz</p><hr><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>自动出锡器</title>
    <link href="https://www.darkfox.top/posts/be0681a9/"/>
    <id>https://www.darkfox.top/posts/be0681a9/</id>
    <published>2023-02-12T11:59:27.000Z</published>
    <updated>2023-10-11T03:33:32.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  闲来无事做了个自动出锡器，介绍下方案和思路。 </center><span id="more"></span><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212200110782.png" alt="image-20230212200110782" style="zoom:150%;" / loading="lazy"><h1>1.外壳壳体</h1><h2 id="3d打印方案">3d打印方案</h2><p>处于可制造性的考虑，首选的测试方案是3d打印的方案。外壳建模的软件用的是FUSION360，简单方便。外壳使用的材料也比较易得到，使用pla塑材进行fda制造。外壳需要考虑到大致三个部分，一是留出机械部分的空间并配合机械来进行刚性固定，二是预留出来电池仓的位置以及充电口的位置，三是留出电路板的位置并且考虑走线的问题。出于人们的操作习惯，外壳要做成接近圆柱形，直径大约和一只钢笔相似，初期判断难度还是比较大的。</p><h1>2.电源管理方案</h1><h2 id="bms系统">BMS系统</h2><p>供电大致分为两部分（一部分其实也可以，保险起见还是两部分），一是电池的充放电的升降压管理，二是电池供电的升压管理，所以需要两个dc-dc芯片。为了省事直接使用集成芯片来进行设计。</p><h2 id="选型">选型</h2><p>因为电机的功率不大，最多也就5w，所以不需要考虑独立mos驱动啥的，可以驱动芯片直驱。因为我之前做过类似的BMS所以直接拿来用了，原理图如下：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212201911662.png" alt="image-20230212201911662" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212202213754.png" alt="image-20230212202213754" loading="lazy"></p><h2 id="电池充放电管理">电池充放电管理</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212203111077.png" alt="image-20230212203111077" loading="lazy"></p><p>电池充放电芯片使用CL4056A，该芯片最高支持1000ma的单节电池，对于这种小设备绰绰有余。并且该芯片自带温度保护以及欠压保护还有电池复苏功能，简单接上两个led可以作为状态指示，并且挺便宜的，所以就用它了。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212202909523.png" alt="image-20230212202909523" loading="lazy"></p><h2 id="升压驱动">升压驱动</h2><p>升压驱动采用ap2008，该芯片最大输出为25v1a，也是完全绰绰有余，这个强大的驱动能力可以为后续的升级打好基础。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212203853837.png" alt="image-20230212203853837" loading="lazy"></p><p>并且从官方的手册里面可以看到效率曲线，我们预备使用的电机的电压是5v，效率也是比较可观的（一块钱的东西不必较真），按照给的建议图接好线就行了。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212204132314.png" alt="image-20230212204132314" loading="lazy"></p><p>另外出于冗余的考虑，12v的性能特征也要看一下，95%的效率还是蛮不错的。</p><h3 id="升压驱动外设">升压驱动外设</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202310111132791.png" alt="image-20231011113235686" loading="lazy"></p><p>为了方便测试，我们加一个可变电阻在R2的位置，简单计算一下输出25v的时候R2阻值最大53.68k。为方便计算R1采用2.2k的阻值（我买的精度1%的）。因为我们暂时需要的输出为5v，所以采用一个10k的变阻器完全足够，便宜还好买。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20230212204717568.png" alt="image-20230212204717568" loading="lazy"></p><h2 id="功率计">功率计</h2><p>懒得从头设计，直接预留出接口，直接加入模块。</p><h1>3.机械结构</h1><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">自己做的一个便携式的自动出锡器</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2022年度总结</title>
    <link href="https://www.darkfox.top/posts/622a5765/"/>
    <id>https://www.darkfox.top/posts/622a5765/</id>
    <published>2023-01-05T12:57:04.000Z</published>
    <updated>2023-10-11T03:28:29.332Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 今年不会是最多灾多难的一年。  </center><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/1642229093705.jpg" alt="1642229093705"  / loading="lazy"><span id="more"></span><h1>写在前面的话</h1><hr><p>2022年也是转眼过去了，2023年如期到来，在这不平凡的一年里，我们见到了父母辈一辈子发生过的大变故都多。包络但是不限于俄乌冲突、病毒变异、他国元首遇害、他国元首长辞、疫情放开、  二十大全面建设现代化等等。 这一年感觉大家过的都挺压抑的，不仅仅是因为不知道什么时候才会结束的该死的病毒瘟疫，还有各种因为它引起的各种问题，我这一年过的也挺压抑的。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/-62f9b169ffa6c825.png" alt="-62f9b169ffa6c825" loading="lazy"></p><hr><p>写这篇文章的时候我们国家已经全面开放迎接疫情了，不出意外的我也阳了，正好赶在2022的尾巴上。好在感染的是个比较不这么毒的毒株，几天就转阴好了。但是得新冠这几天可真是不好熬，嗓子里面有刀子一样，水都喝不下去，天天发烧，天天发烧，浑身痛只能躺床上，哎，还好过去了。妈的，谁再说这是个大号感冒我打死他丫的。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/228fb3d9f5cddb20.jpg" alt="228fb3d9f5cddb20" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20230105_203101.jpg" alt="IMG_20230105_203101" loading="lazy"></p><h1>走起</h1><h2 id="吃-喝-玩-乐">吃 喝 玩 乐</h2><h3 id="先吃">先吃</h3><h4 id="餐厅与小馆子">餐厅与小馆子</h4><p>俗话说人是铁，饭是钢，一顿不吃心发慌。奈何这一年几乎被困在了学校，基本上什么都吃不到，只能吃吃餐厅和周边了小馆子了QAQ</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220505_115747.jpg" alt="IMG_20220505_115747" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220515_183639.jpg" alt="IMG_20220515_183639" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220515_184149.jpg" alt="IMG_20220515_184149" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220728_173734.jpg" alt="IMG_20220728_173734" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220731_175822.jpg" alt="IMG_20220731_175822" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221001_184722.jpg" alt="IMG_20221001_184722" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220731_175824.jpg" alt="IMG_20220731_175824" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221003_122239.jpg" alt="IMG_20221003_122239" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220826_123358.jpg" alt="IMG_20220826_123358" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221001_180712.jpg" alt="IMG_20221001_180712" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221001_184710.jpg" alt="IMG_20221001_184710" loading="lazy"></p><h4 id="香椿">香椿</h4><p>说到吃，曾在2022年的春天，在校内发现了香椿芽这种神奇的植物，于是乎薅了一点。原来在老家的时候院子里面就有一大棵香椿树，所以对这种带有神奇香味的小植物很熟悉。当然，吃法也很熟悉。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/wx_camera_1649331867777.jpg" alt="wx_camera_1649331867777" loading="lazy"></p><h4 id="番茄汁">番茄汁</h4><p>我也曾想过一个小问题，番茄切块撒糖后味道极佳，特别是剩下的汤汁更是一绝。那么可不可以直接拿榨汁机开榨后放糖，味道是不是也一样。<img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/wx_camera_1652263515310.jpg" alt="wx_camera_1652263515310" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/wx_camera_1652263522291.jpg" alt="wx_camera_1652263522291" loading="lazy"></p><p>实时证明味道完全不一样，直接榨汁后加糖的味道和番茄酱是一毛一样的。。。。。。。</p><h4 id="枇杷">枇杷</h4><p>宿舍门口的小院子里种了几棵枇杷树，然后被哥几个包圆了（😀）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220428_121351.jpg" alt="IMG_20220428_121351" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/wx_camera_1651724487196.jpg" alt="wx_camera_1651724487196" loading="lazy">。</p><h4 id="生日">生日</h4><p>不出意外的，2022年的生日也过去了。今年的愿望简简单单，身体健康就够了。<img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221109_223701.jpg" alt="IMG_20221109_223701" loading="lazy"></p><h4 id="蛇莓">蛇莓</h4><p>作为一名北方的孩子，头一次见到这种南方的特殊物种还是有点新奇的，在此记录一下，不过这个玩意不太好吃，头一口还行，后面越吃越苦😒<img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/wx_camera_1651119777862.jpg" alt="wx_camera_1651119777862" loading="lazy"></p><h4 id="奇特的蔬菜">奇特的蔬菜</h4><p>去朋友家玩的时候，阿姨给的，不得不说确实没见过这些个鬼蔬菜。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220127_095425.jpg" alt="IMG_20220127_095425" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220127_095945.jpg" alt="IMG_20220127_095945" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220127_100006.jpg" alt="IMG_20220127_100006" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220127_095421.jpg" alt="IMG_20220127_095421" loading="lazy"></p><h4 id="外卖意外">外卖意外</h4><p>在学校吃外卖的时候吃出来一根刺，这肯定不能原谅他，直接投诉不商量。最后给赔了一百元的卷，美滋滋吃了一星期的外卖。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/TITANS_20221201_122028.jpg" alt="TITANS_20221201_122028" loading="lazy"></p><hr><h3 id="再喝">再喝</h3><p>说实话，学校附近没有什么可以喝的东西，也就喝两口啤酒，喝两口鸡尾酒了，这的酒品实在是一般般。</p><h3 id="img-20221202-185548"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221202_185548.jpg" alt="IMG_20221202_185548" loading="lazy"></h3><h4 id="去景德镇喝酒">去景德镇喝酒</h4><p>受同学邀请，只身前往景德镇，在陶溪川喝了几口，感觉还行，价格也不错，等以后有工作了没事了再去逛逛<img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_213244.jpg" alt="IMG_20220816_213244" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_212052.jpg" alt="IMG_20220816_212052" loading="lazy"></p><h3 id="后玩">后玩</h3><h4 id="先是景德镇">先是景德镇</h4><p>众所周知，景德镇最多的是陶器，实地考察后发现这地方也没其他的玩意，简单展示一下吧。</p><h3 id="img-20220816-202302"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_202302.jpg" alt="IMG_20220816_202302" loading="lazy"></h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_204522.jpg" alt="IMG_20220816_204522" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_205810.jpg" alt="IMG_20220816_205810" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_210009.jpg" alt="IMG_20220816_210009" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_210027.jpg" alt="IMG_20220816_210027" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220816_210214.jpg" alt="IMG_20220816_210214" loading="lazy"></p><h4 id="附近公园">附近公园</h4><h4 id="img-20221013-211458"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221013_211458.jpg" alt="IMG_20221013_211458" loading="lazy"></h4><h4 id="钓鱼">钓鱼</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221030_100945.jpg" alt="IMG_20221030_100945" loading="lazy"></p><h4 id="魔改耳机">魔改耳机</h4><p>我的有线耳机在上一次物联网战争中牺牲了，一同牺牲的还有我的电脑，本着物尽其用的原则，我对其进行了魔改。修改成了无线的版本，继续发光发热。</p><p>如图所示，在上一次物联网战争中不小心接错线了导致电脑分线器烧了，连带着电脑显卡和其他连在上面的设备一起烧了。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220403_151023.jpg" alt="IMG_20220403_151023" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220403_201816.jpg" alt="IMG_20220403_201816" loading="lazy"></p><h4 id="img-20220814-210817"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220814_210817.jpg" alt="IMG_20220814_210817" loading="lazy"></h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220814_170644.jpg" alt="IMG_20220814_170644" loading="lazy"></p><h3 id="乐">乐</h3><p>这虚晃的一年属实又把我整乐了，又是虚晃的一年，又是一年的一事无成，哪怕有药物加持也压制不下去这种强烈的挫败感，从三月份开始准备考研，但是中途还去考了个教资，没过。考了个计算机二级，没过。考了个六级，没过。到十二月份考研，估计也是没过，真不知道我这一年图个啥QAQ。时间越过越模糊，大脑愈发糊涂，意识也慢慢变得清淡了起来，最后没有药物加持可能甚至到不了今天。啧，慢慢调节吧，明天鬼知道会发生什么呢。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/15dbff9bee4eab3.jpg" alt="15dbff9bee4eab3" loading="lazy"></p><p>不过也有能为之一乐的东西，假如说在学校过的依托答辩，这些是我唯二的精神慰藉了。</p><hr><h4 id="奖章">奖章</h4><p>2021年电赛国一，给发的纪念奖章，还有个戒指忘拍了。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221017_142712.jpg" alt="IMG_20221017_142712" loading="lazy"></p><h4 id="img-20220304-181718"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220304_181718.jpg" alt="IMG_20220304_181718" loading="lazy"></h4><h4 id="没事了就拆耳机">没事了就拆耳机</h4><p>这蓝牙耳机批发着两块钱一套，虽然属于电子垃圾级别，但是折腾起来还是很好玩的。不得不佩服这些玩TWS耳机的，能把成本压缩的这么低，tb上百十块钱的玩意，我研究了一下成本，不算上设计费等人工研发费用，纯物料费用也就十几块钱。设计成本就很难统计了，技术上的玩意也就这个值钱了。不过图中的这个耳机就不值钱，因为这个芯片满大街都是，不需要程序开发费用的那种满大街，所以成本极低，这个蓝牙主控芯片搜了下单买一个加邮费也就8块钱，量大批发着可能也就几毛（笑）。</p><h4 id="img-20220428-210251"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220428_210251.jpg" alt="IMG_20220428_210251" loading="lazy"></h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220428_205839.jpg" alt="IMG_20220428_205839" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220428_210207.jpg" alt="IMG_20220428_210207" loading="lazy"></p><h4 id="玩具">玩具</h4><p>这一年也买了不少小玩具，就比如这个小功率高精度电源。集成了两个12位高精度ADC（虽然不是很高了已经，但是平时用绰绰有余），stm的主控，品质也还可以。可以测量产品的电压、电流、功率，精度最高20ua，1mv,1mw，精度还是挺可观的。最大功率只有5v2a，所以使用场景很有限，后续再搞两个其他的电源来作为补充。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220814_172728.jpg" alt="IMG_20220814_172728" loading="lazy"></p><h4 id="摄影">摄影</h4><p>另外，我没事了喜欢出去到处拍照片，我觉得挺好玩的。我主要喜欢拍一些自然景观还有花草。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220603_134755.jpg" alt="IMG_20220603_134755" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220619_193037.jpg" alt="IMG_20220619_193037" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220622_102043.jpg" alt="IMG_20220622_102043" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220622_102054.jpg" alt="IMG_20220622_102054" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220622_120131.jpg" alt="IMG_20220622_120131" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220427_154128.jpg" alt="IMG_20220427_154128" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220516_172036.jpg" alt="IMG_20220516_172036" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220517_183532_mix01.jpg" alt="IMG_20220517_183532_mix01" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220525_103306_mix01.jpg" alt="IMG_20220525_103306_mix01" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220602_134136.jpg" alt="IMG_20220602_134136" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220602_134857.jpg" alt="IMG_20220602_134857" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220603_132519.jpg" alt="IMG_20220603_132519" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221004_155747.jpg" alt="IMG_20221004_155747" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220801_122337.jpg" alt="IMG_20220801_122337" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220328_173103.jpg" alt="IMG_20220328_173103" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221004_155915.jpg" alt="IMG_20221004_155915" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220311_174028.jpg" alt="IMG_20220311_174028" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221014_180226.jpg" alt="IMG_20220603_133157" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221115_170851.jpg" alt="IMG_20221115_170851" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221029_151936.jpg" alt="IMG_20221029_151936" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221029_155248.jpg" alt="IMG_20221029_155248" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221004_155611.jpg" alt="IMG_20221004_155611" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221004_155540.jpg" alt="IMG_20221004_155540" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221004_155528.jpg" alt="IMG_20221004_155528" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221029_160507.jpg" alt="IMG_20221029_160507" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220812_113456.jpg" alt="IMG_20220812_113456" loading="lazy"></p><h4 id="漫画">漫画</h4><p>新抢到的限量版赛博朋克，嘿嘿😊</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221018_154200_mix01.jpg" alt="IMG_20221018_154200_mix01" loading="lazy"></p><h4 id="踹蚂蚁窝">踹蚂蚁窝</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221120_132954.jpg" alt="IMG_20221120_132954" loading="lazy"></p><h4 id="雨后彩虹">雨后彩虹</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220325_175030.jpg" alt="IMG_20220325_175030" loading="lazy"></p><h4 id="草地上的瓜">草地上的瓜</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221113_074711.jpg" alt="IMG_20221113_074711" loading="lazy"></p><h4 id="撸猫猫">撸猫猫</h4><p>每天起床第一件事就是寻觅橘座，然后有吃的就喂一下再撸，没吃的就直接撸。后来橘座不是每天都出宫，也去撸别的猫猫。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221117_171732.jpg" alt="IMG_20221117_171732" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_153324.jpg" alt="IMG_20221227_153324" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_153939.jpg" alt="IMG_20221227_153939" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_154943.jpg" alt="IMG_20221227_154943" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_161009.jpg" alt="IMG_20221227_161009" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_161957.jpg" alt="IMG_20221227_161957" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_150634.jpg" alt="IMG_20221227_150634" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_151306.jpg" alt="IMG_20221227_151306" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20221227_152743.jpg" alt="IMG_20221227_152743" loading="lazy"></p><p>猫猫真的太可爱了😊</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/1665981310258.jpg" alt="1665981310258" loading="lazy"></p><h2 id="结尾">结尾</h2><p>差不多写到这基本上就结束了，鼠鼠我呀明年也要毕业了。不出意外的话也要去找工作了，也要去上班，工作奋斗买房子买车子生孩子那种垃圾生活了。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/6b7e5dc9bea6a3df.jpg" alt="6b7e5dc9bea6a3df" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/1642493764977.jpeg" alt="1642493764977" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/03c56fdbf0c2c8e2a9421d1ca28eb9bd2bff4d0d_raw.jpg" alt="03c56fdbf0c2c8e2a9421d1ca28eb9bd2bff4d0d_raw" loading="lazy"></p><p>理想很丰满，现实很骨感，希望我在这新的一年里面能够有新的收获，位列人杰，光宗耀祖吧。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/a1c064d475f5516.jpg" alt="a1c064d475f5516" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/-13cae6de258a2afc.jpg" alt="-13cae6de258a2afc" loading="lazy"></p><h1>2023兔年快乐！</h1><p>最后祝大家兔年快乐，新的一年新气象，祝大家都能取得自己满意的成果。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/64.jpg" alt="64" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">又到了阳历的新年啦，先写一半，然后农历新年再写一半，嘿嘿。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Novel_ai简单上手教程</title>
    <link href="https://www.darkfox.top/posts/92d8222b/"/>
    <id>https://www.darkfox.top/posts/92d8222b/</id>
    <published>2022-10-14T02:03:28.000Z</published>
    <updated>2022-10-21T14:23:15.397Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>前言</h1><p>novel ai是最近以世界上最大的二次元D站为数据集训练出来的一个ai，所以生成二次元风格图的效果很不错，其他的就一般般了。</p><h2 id="我自己生成的图例">我自己生成的图例</h2><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/22_x4_Av.png" alt="22_x4_Av" style="zoom:33%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/23_x4_Av.png" alt="23_x4_Av" style="zoom: 33%;" / loading="lazy"><h2 id="声明：">声明：</h2><ul><li>以下内容仅代表个人观点</li><li>如存在一些问题请联系笔者</li><li>资源来源于互联网，仅供学习使用</li><li>帖子仅供技术学习交流，实际使用时请注意分寸（笑</li></ul><h1>前置</h1><h2 id="1-前置环境">1.前置环境</h2><p>环境配置比较简单，总共有三样</p><ul><li>最新版本的python环境，目前是3.10.8,可以从官网或者其他渠道下载</li></ul><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20221014101407.png" alt="233" loading="lazy"></p><ul><li>GIT，一个分布式管理软件，方便将软件版本更新到最新，体验最新的功能，当然你要是不想体验最新版本的话也可以不下载，这个无所谓</li></ul><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20221014101610.png" alt="233" loading="lazy"></p><ul><li>显卡的驱动，因为我用的N卡，所以驱动也是装的N卡的驱动，装个最新的CUDA就行了，现在很多游戏本出厂都自带驱动，有驱动的就可以不用装了。我手头没有A卡的硬件环境，所以就没写A卡如何操作，GITHUB上给了两个方案，你可以看<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Install-and-Run-on-AMD-GPUs#running-natively">一下</a></li></ul><h2 id="2-应用程序">2.应用程序</h2><h3 id="获取程序">获取程序</h3><p>首先简单讲一下这个程序的结构，程序大致分为三部分，ckpt模型包与pt包、web ui、ai运行程序。其中web ui与ai运行程序已经被社区的攻城狮们整理好发布在了github上，你可以通过直接下载压缩包，下载到本地，也可以通过GIT的clone命令拉取到本地。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20221014102506.png" alt="GITHUB库名称" loading="lazy"></p><h4 id="直接下载">直接下载</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014102610083.png" alt="image-20221014102610083" loading="lazy"></p><h4 id="通过命令拉取">通过命令拉取</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014102729473.png" alt="image-20221014102729473" loading="lazy"></p><p>复制地址后，找个文件夹，右键找到并唤出git bash使用命令拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;AUTOMATIC1111&#x2F;stable-diffusion-webui.git</span><br></pre></td></tr></table></figure><p>不过这个是全英文的，我自己也Fork了一个带中文介绍的，欢迎来star，<a href="https://github.com/godmid/stable-diffusion-webui.git">链接</a></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014104024712.png" alt="image-20221014104024712" loading="lazy"></p><h3 id="运行软件">运行软件</h3><p>获取文件后运行文件里面整合好的bat文件，一键操作，两个bat选一个运行就行，上面那个参数更详细适合更有经验的人改写运行，下面那个参数比较简约，不需要太多变动可直接运行</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014103138888.png" alt="image-20221014103138888" loading="lazy"></p><h4 id="webui-bat">webui.bat</h4><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014103356742.png" alt="image-20221014103356742" style="zoom:50%;" / loading="lazy"><h4 id="webui-user-bat">webui-user.bat</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014103425987.png" alt="image-20221014103425987" loading="lazy"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> 显而易见 <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着就会自动下载并安装相关的python依赖，耐心等候就好。</p><h3 id="获取ckpt包">获取ckpt包</h3><p>依赖与ui环境搞完后还要去下载一个模型文件包，这个包就是之前泄露的novel ai包，现在你有两种选择</p><ul><li><a href="https://pan.baidu.com/s/1_jPBKHWtmvdsLfIbfp7UdQ">百度云下载最终模型文件</a>提取码:bupq</li><li><a href="magnet:?xt=urn:btih:LPPEILNIMJS3M4FD4XVDCY5PVUWG7DWM&amp;dn=novelaileak&amp;xl=55901742348">内含全部泄露文件的种子磁链</a></li></ul><p>下载完后把文件丢到路径stable-diffusion-webui-master\models\Stable-diffusion里面，两个文件改成一样的名字就行；</p><p>然后再次运行webui的bat文件，没问题的话就会得到以下界面：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014111022068.png" alt="image-20221014111022068" loading="lazy"></p><p>然后复制下来本地url丢到浏览器，也就是http://127.0.0.1:7860丢到浏览器就行了，或者你也可以点击<a href="http://127.0.0.1:7860">这里</a></p><p>然后你就会得到如下界面：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014111212483.png" alt="image-20221014111212483" loading="lazy"></p><h1>现在你可以开始愉快的玩耍了</h1><h2 id="txt2img">txt2img</h2><p>首先是页面：</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014112140912.png" alt="image-20221014112140912" loading="lazy"></p><h3 id="参考">参考</h3><p>正面关键词汇 {best quality}, , {highres}, original, extremely detailed 8K wallpaper, 1girl, {an extremely delicate and beautiful},cat_girl</p><p>负面关键词汇 extra fingers,fewer digits,extra limbs,extra arms,extra legs,malformed limbs,fused fingers,too many fingers,long neck,cross-eyed,mutated hands,cropped,poorly drawn hands,poorly drawn face,mutation,deformed,worst quality,low quality,normal quality,jpeg artifacts,signature,watermark,lowres,bad anatomy,bad hands, text, error, missing fingers,extra digit, fewer digits, cropped, worstquality, low quality, normal quality,jpegartifacts,signature, watermark, username,blurry,bad feet,polar lowres,bad anatomy,bad hands,bad body,bad proportions,gross proportions,text,error,missing fingers,missing arms,missing legs,extra digit</p><p>把词汇输进去点击生成，然后运气好的话就会给你生成个<em>猫娘</em></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/00367-2199126164-cat.png" alt="00367-2199126164-cat" loading="lazy"></p><h3 id="调教方法">调教方法</h3><h4 id="关键词">关键词</h4><p>调教txt2img最重要的是关键词，关键词相当于召唤师的召唤术的咒语，咒语越复杂，召唤出来的法术威力越大。目前有很多人对这个咒语进行了总结，比如<a href="www.aitag.top">高阶咒语生成术</a>。不过要注意关键词不要冲突，不然可能会生成一堆古神级别的掉SAN的遗迹。</p><p>正面关键词越详细越好，负面关键词就叠满buff就可以了，我给的参考就是<strong>叠满buff</strong>的，你可以直接拿去使用。</p><h4 id="迭代次数">迭代次数</h4><p>关于迭代次数的话，不是越高越好，但是低了也不行，因为不同的关键词不同的算法的收敛最优步数不一样。经过实验，作品还能过得去的一般出现在在<strong>25-80</strong>step之间，这个数字仅供参考，你可以调到最高看看是怎样的一个效果，毕竟每个人的要求都不一样。</p><h4 id="长宽比">长宽比</h4><p>没有要求的话建议先512*512跑一下，这个分辨率能看得出大致轮廓的同时速度也很快。确定好喜欢的图像的具体参数后再去调整分辨率也不迟。</p><h4 id="生成数量设置">生成数量设置</h4><p>有两个参数，一个是单次生成数量，一个是生成次数，意思也显而易见不解释了。但是要注意，生成数量十分消耗显存，例如512/512像素下4*2的生成会消耗大约6gb的显存，显卡不好的童鞋就不要过分尝试了</p><h4 id="cfg">CFG</h4><p>一个权重，低了会优先生成速度，高了会优先生成画面，建议12-17，显卡吊的请无视这个建议</p><h4 id="seed-种子">SEED 种子</h4><p>-1即为随机种子，当其他参数确定好后每个种子都可以生成对应的唯一的一张图片，类似于于数学函数里面的x变量</p><h4 id="脚本">脚本</h4><p>script内含社区里面的大神编写的神奇算法，具体参考社区<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Custom-Scripts">wiki</a></p><h4 id="style">Style</h4><p>关键词风格，相当于保存下来你的关键词，使用的时候只需要选好后apply即可</p><h2 id="img2img">img2img</h2><p>带关键词的以图生图</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014115827486.png" alt="image-20221014115827486" loading="lazy"></p><h3 id="重构按钮">重构按钮</h3><p>img2img的参数大致与txt2img相似只是多了下面三个选项</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014120335961.png" alt="image-20221014120335961" loading="lazy"></p><p>这三个选项分别是</p><ul><li>直接生成</li><li>按照宽高比截取部分后生成</li><li>按照宽高比填充部分后生成</li></ul><p>举个栗子</p><p>比如我们拿出一张512*512的图，当你改变原图分辨率后，长宽比肯定会变，会导致多出来或者缺少一部分，比如我们这样</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122309206.png" alt="image-20221014122309206" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122335990.png" alt="image-20221014122335990" style="zoom:50%;" / loading="lazy"><p>直接生成</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122427607.png" alt="image-20221014122427607" style="zoom:50%;" / loading="lazy"><p>Crop，明显脑袋按照宽高比被削去了</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122513054.png" alt="image-20221014122513054" style="zoom:50%;" / loading="lazy"><p>fill，明显保留了人物在图中的比例，并且填充了一块原本没有的</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122615027.png" alt="image-20221014122615027" style="zoom:50%;" / loading="lazy"><h3 id="denoising-strength">Denoising strength</h3><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014122813775.png" alt="image-20221014122813775" loading="lazy"></p><p>一个权重，表示图片被ai改变的程度，1即为覆盖，重新生成一张图片</p><p>举个栗子</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123034754.png" alt="image-20221014123034754" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123041476.png" alt="image-20221014123041476" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123109213.png" alt="image-20221014123109213" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123118253.png" alt="image-20221014123118253" loading="lazy"></p><h2 id="inpaint">Inpaint</h2><p>你可以理解为，小部分小范围的img2img，软件只会在你标记的地方动手脚，可以用于一些带有部分瑕疵的图片的修复，Inpaint参数比较复杂，建议参考官方<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features">wiki</a></p><p>方便理解，举个栗子，放入图片后，拿画笔在需要修改的地方进行涂抹，比如小熊猫的脸</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123523992.png" alt="image-20221014123523992" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014123802048.png" alt="image-20221014123802048" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/00000-3074472918-%7Bbest%20quality%7D,%20%7B%7Bmasterpiece%7D%7D,%20%7Bhighres%7D,%20original,%20extremely%20detailed%208K%20wallpaper,%201girl,%20%7Ban%20extremely%20delicate%20and%20beautif.png" alt="00000-3074472918-{best quality}, , {highres}, original, extremely detailed 8K wallpaper, 1girl, {an extremely delicate and beautif" style="zoom: 80%;" / loading="lazy"><h1>玩后感</h1><p>我自己玩这个软件也有两三天了也生成出了不少的好作品</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20221014125905368.png" alt="image-20221014125905368" style="zoom:50%;" / loading="lazy"><p>简单来讲一下使用的感受，整体来讲还是蛮震撼的（毕竟在绘画方面我就是个小白）。生成效果也是特别棒的（咒语nb的情况下）。这个ai出来后一直有一些言论在讲ai将要替代画师了，画师们要被取代了，再过几年绘画ai将会完全取代人工进行艺术职业了巴拉巴拉，我来简单讲一下我在这方面的看法。</p><p>首先呢，我认为部分画师的担忧是正确的，原来十个人的活，现在一个人就能完成了，肯定有一部分没有核心竞争力的画师将会进入一段低谷，不过估计这也是几年后的事情了。因为目前号称最强的novel ai还存在很多的问题，大的来讲比如版权争议问题，很多画师甚至生成了自家的看板娘，D站也没有给授权。还有这个ai走商业化道路的话还有及其漫长的磨合期要走。第一是这个ai虽然吃了整个D站的数据但是生成的作品仍然有很多很多的瑕疵，你可以清晰的看到你生成的角色眼睛里有个银河或者头发粘连亦或者身体结构不匀称等问题，甲方可不会轻易把钱浪费在那些瑕疵品上面。第二是就算有些作品比较完美了，但是甲方想要微调一下，比如换个首饰，换个手势之类的，目前的ai就比较难搞，还是需要人工进行调整。第三是这个ai不能生成比较复杂的创造性的画作，它只能基于它的库来不断的调取现有的元素，也就是没有所谓的创造力。第四就是，貌似只有人类能理解五彩斑斓的黑（笑）。画师这种职业本身就建立在其商业化模式之上，ai既然不能成功的大规模商业化，那就无从谈起大规模取代画师。</p><p>从另一个方面来讲，图灵老爷子提出来这个概念都多久了，novel ai的核心算法早就不知道存在了多久了，只是这次喂给这个炼丹炉的料子比较多比较好，所以产出的丹药也是比较好的。未来几年还会有第二个D站，这个人类最大的二次元库喂给它么？不会了。除非人类脑科学、神经学等方向有了突破性进展后才会有可能有重大突破。</p><p>所以呢，不必担心这玩意会取代画师，只是个辅助工具罢了。</p><p><strong>人的创造力是生命的赞歌！</strong></p><hr><h1>后记</h1><p>因为要考研，所以我只能抽出来一点点时间来写这个文档，请见谅，后面有时间会慢慢补上剩余的部分。</p><p>忘了说了，关键词加个sex有惊喜哦（笑</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">简单写一下最近挺火的那个绘画ai的简单的使用方法和使用心得</summary>
    
    
    
    <category term="ai" scheme="https://www.darkfox.top/categories/ai/"/>
    
    
    <category term="ai" scheme="https://www.darkfox.top/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>IoT_Power</title>
    <link href="https://www.darkfox.top/posts/975529e1/"/>
    <id>https://www.darkfox.top/posts/975529e1/</id>
    <published>2022-08-10T05:27:18.000Z</published>
    <updated>2022-08-10T05:59:37.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>这几天看到luat出了个新的小玩意——一个小巧的便携式的可调电源加分析仪，喜欢小而美的我自然不能放过这个小玩意。</p><h2 id="设备结构">设备结构</h2><p><img src="https://cdn.openluat-luatcommunity.openluat.com/images/20220801103719142_QQ%E6%88%AA%E5%9B%BE20220801103624.png" alt="设备图" loading="lazy"></p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">短按</th><th style="text-align:center">长按</th><th style="text-align:center">滚动</th></tr></thead><tbody><tr><td style="text-align:center"><strong>①</strong></td><td style="text-align:center">光标左移</td><td style="text-align:center">清除底电流</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>②</strong></td><td style="text-align:center">光标右移</td><td style="text-align:center">进入200μA档</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>③</strong></td><td style="text-align:center">切换调节位置</td><td style="text-align:center">切换A/mA</td><td style="text-align:center">调整数值或切换模式</td></tr><tr><td style="text-align:center"><strong>④</strong></td><td style="text-align:center">打开或关闭电源输出</td><td style="text-align:center">打开充电输出模式</td><td style="text-align:center"></td></tr></tbody></table><p><strong>⑤</strong> ：电源输出负极<br><strong>⑥</strong> ：电源输出正极</p><h2 id="技术指标">技术指标</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">范围</th><th style="text-align:center">分辨率</th><th style="text-align:center">标称精度</th><th style="text-align:center">实际精度</th></tr></thead><tbody><tr><td style="text-align:center">电压设定</td><td style="text-align:center">0V-5V</td><td style="text-align:center">1mV</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;0.5%</td></tr><tr><td style="text-align:center">电压回读</td><td style="text-align:center">0V-5V</td><td style="text-align:center">1mV</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;0.5%</td></tr><tr><td style="text-align:center">电流设定</td><td style="text-align:center">0-2mA</td><td style="text-align:center">1μA</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;0.5%</td></tr><tr><td style="text-align:center">电流设定</td><td style="text-align:center">0-2A</td><td style="text-align:center">1mA</td><td style="text-align:center">1%</td><td style="text-align:center">1%</td></tr></tbody></table><table><thead><tr><th style="text-align:center">电流量程</th><th style="text-align:center">范围</th><th style="text-align:center">分辨率</th><th style="text-align:center">标称精度</th><th style="text-align:center">实际精度</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center">200μA</td><td style="text-align:center">0-200μA</td><td style="text-align:center">0.5μA</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;0.5%</td><td style="text-align:center">手动档位</td></tr><tr><td style="text-align:center">2mA</td><td style="text-align:center">200μA-2mA</td><td style="text-align:center">1μA</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;0.5%</td><td style="text-align:center">自动档位</td></tr><tr><td style="text-align:center">200mA</td><td style="text-align:center">2mA-200mA</td><td style="text-align:center">1mA</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;1%</td><td style="text-align:center">自动档位</td></tr><tr><td style="text-align:center">2A</td><td style="text-align:center">200mA-2A</td><td style="text-align:center">10mA</td><td style="text-align:center">1%</td><td style="text-align:center">&lt;1%</td><td style="text-align:center">自动档位</td></tr></tbody></table><h2 id="技术特性">技术特性</h2><ul><li>使用0.4% 精度基准芯片，0.1%精度精密电阻，12位ADC设计，标称精度1%</li></ul><ol><li>自动测量范围：电流回显档位分别为200μA、2mA、200mA、2A四个档位，根据当前输出电流自动切换（除200μA档需手动进入），12位ADC</li><li>档位切换速度：自动档位切换速度≥40us</li><li>电流测量精度：200μA档位时分辨率0.5μA，2mA档位时分辨率1μA</li><li>采样率：10KHz采样速率，USB高速数据传输</li></ol><p>可以看到最大输出为5V2A（毕竟是与电脑直连，再大了容易出问题），12位的adc在绝大多数diy场合也绝对够用了。我最喜欢的一个功能就是手动可以切换200ua档位，并且分辨率为0.5ua，有这个功能在很多低功耗研发场合中不需要再拖个大大的示波器和分析仪了，并且官方给了上位机也十分方便。</p><h2 id="实机测试">实机测试</h2><p>因为要考研时间也不多，就简单做个测试玩一下，我手头有个3.7v标压的照明用的灯珠铝基板，拿它简单的做个小测试。</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-21-18.png" alt="Snipaste_2022-08-10_13-21-18" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220810_131805.jpg" alt="IMG_20220810_131805" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-21-38.png" alt="Snipaste_2022-08-10_13-21-38" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220810_131820.jpg" alt="IMG_20220810_131820" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-22-03.png" alt="Snipaste_2022-08-10_13-22-03" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220810_131844.jpg" alt="IMG_20220810_131844" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-22-37.png" alt="Snipaste_2022-08-10_13-22-37" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220810_131849.jpg" alt="IMG_20220810_131849" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-23-07.png" alt="Snipaste_2022-08-10_13-23-07" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/IMG_20220810_131852.jpg" alt="IMG_20220810_131852" style="zoom:50%;" / loading="lazy"><p>下面的就不拍照了，手机比较渣，拍出来效果也不好。</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-23-34.png" alt="Snipaste_2022-08-10_13-23-34" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-23-52.png" alt="Snipaste_2022-08-10_13-23-52" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-24-27.png" alt="Snipaste_2022-08-10_13-24-27" style="zoom:50%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-10_13-24-54.png" alt="Snipaste_2022-08-10_13-24-54" style="zoom:50%;" / loading="lazy"><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">新购入了一个小而精巧的工具，简单的测试了一下性能与功能。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基于pscad软件的110kv系统故障仿真</title>
    <link href="https://www.darkfox.top/posts/3ad2927e/"/>
    <id>https://www.darkfox.top/posts/3ad2927e/</id>
    <published>2022-06-23T03:02:19.000Z</published>
    <updated>2022-07-19T09:29:29.651Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>基于PSCAD软件的110kV系统故障仿真</h1><p>本程序的仿真对象为110kV高压配电网，主要用于故障分析。本模型主要对B母线处A相接地故障进行仿真。</p><p>110kV配电网并不配置反应相间短路的过电流保护。因此，在继电保护用的故障电气量分析过程中，更侧重于接地故障时的零序电气量分析。利用本模型进行接地故障仿真时，可认为A相电流即是三倍零序电流。<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220622110045411.png" alt="image-20220622110045411" loading="lazy"></p><p>四个要求：</p><p>1、110kV配电网故障电气量分析示例</p><p>2、110kV系统仿真模型</p><p>3 、参数设置</p><p>4 、故障仿真结果</p><h2 id="开始操作">开始操作</h2><p>首先是获取软件，然后简单熟悉一下操作的步骤。<a href="https://zhuanlan.zhihu.com/p/30626835">教程</a>在此</p><p>接着是按照给的图例稍微搭建一下，由于示意图不能直接用，那么咱就稍微改一下，将电源改成三相，以及加入电流测量器。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623104931575.png" alt="image-20220623104931575" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105009662.png" alt="image-20220623105009662" loading="lazy"></p><p>同样的阻抗也要改成三相的</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105148315.png" alt="image-20220623105148315" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105110326.png" alt="image-20220623105110326" loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105135740.png" alt="image-20220623105135740" loading="lazy"></p><p>然后按照图例简单的搭建一下电路,以及设置一下参数.参数的设置为仿真的时间的设置以及短路时间的设置。另外为了方便观察,还要引入两个示波器。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105528048.png" alt="image-20220623105528048" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105641588.png" alt="image-20220623105641588" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220622111806205.png" alt="image-20220622111806205" loading="lazy"></p><p>接着就可以run了,得到如下A相接地短路图像，因为没有负载，所以只有短路的时候才有信号。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220622111920598.png" alt="image-20220622111920598" loading="lazy"><br>接着改一下短路类型,双击一下短路点就可以调参,改成三相相间短路（想改成其他的也可以自行操作）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220623105800277.png" alt="image-20220623105800277" loading="lazy"></p><p>然后变成如下示意图,接着再run一下得到三相短路数据.</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/image-20220622111738325.png" alt="image-20220622111738325" loading="lazy"><br><img src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/img/20220622111629.png" alt="" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">最近做课设闲的无聊，新实验室也是刚建好没网络，写篇文章打发一下时间</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pcb名片</title>
    <link href="https://www.darkfox.top/posts/c5db6973/"/>
    <id>https://www.darkfox.top/posts/c5db6973/</id>
    <published>2022-05-29T13:37:40.000Z</published>
    <updated>2022-07-23T12:05:12.404Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>许久之前的小玩具了，想了想还是整理出来让大家乐呵乐呵（笑）<br>先放上来<a href="https://github.com/godmid/pcb_idcard.git">仓库开源地址</a></p><h1>原理图</h1><p>原理吧，其实很简单，现在的无线充电器或者手机的nfc等都是利用线圈电磁感应（共振）。所以我们在pcb板子上画个线圈也可以产生电磁感应，获得一定量的能量（点个灯是足够了）。顺便一提，磁场必须是变化磁场才能有这个现象，因而线圈里面通的是交流电。你可以把线圈想象成为一个快速变化极性的电池，因而两个灯是交替变化的，但是实际上这个极性变化速度极快，人的肉眼是分辨不出来的，所以看上去灯是一直亮的。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/157664892-a7bf1b1a-56fc-4a23-9329-32f6f5bd838d.png" alt="Snipaste_2022-03-10_20-42-18" loading="lazy"></p><h1>渲染图</h1><p>板子的话，就随便画了画，毕竟只是画着玩，你可以加入任意的图案和设计，甚至还能镀金（得加钱）。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/157664911-44dd87ca-0cd6-46ce-aeea-2df059064b5c.png" alt="Snipaste_2022-03-10_20-42-09" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/157664916-cbdf59aa-77a2-4a9f-bf15-c6283ed59cbd.png" alt="Snipaste_2022-03-10_20-42-00" loading="lazy"></p><h1>实际效果图</h1><p>手机比较渣，就不发亮灯的图了；</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20220723200504.png" alt="" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">之前闲的无聊，自己就想着设计个名片，正好jlc有活动就画了个pcb名片发个</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32</title>
    <link href="https://www.darkfox.top/posts/b900f0d0/"/>
    <id>https://www.darkfox.top/posts/b900f0d0/</id>
    <published>2022-03-20T05:53:50.000Z</published>
    <updated>2023-03-09T09:30:29.841Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h1>stm32的启动模式</h1><p>STM32三种启动模式对应的存储介质均是芯片内置的，它们分别是：<br><strong>1）用户闪存 = 芯片内置的Flash。</strong><br><strong>2）SRAM = 芯片内置的RAM区，就是内存啦。</strong><br><strong>3）系统存储器 = 芯片内部一块特定的区域，芯片出厂时在这个区域预置了一段Bootloader，就是通常说的ISP程序。这个区域的内容在芯片出厂后没有人能够修改或擦除，即它是一个ROM区。</strong></p><p>在每个STM32的芯片上都有两个管脚BOOT0和BOOT1，这两个管脚在芯片复位时的电平状态决定了芯片复位后从哪个区域开始执行程序，见下表：<img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20200317092226217.png" alt="在这里插入图片描述" loading="lazy"><br><strong>1、Main Flash memory</strong><br>是STM32内置的Flash，一般我们使用JTAG或者SWD模式下载程序时，就是下载到这个里面，重启后也直接从这启动程序。</p><p><strong>2、System memory</strong><br>从系统存储器启动，这种模式启动的程序功能是由厂家设置的。一般来说，我们选用这种启动模式时，是为了从串口下载程序，因为在厂家提供的BootLoader中，提供了串口下载程序的固件，可以通过这个BootLoader将程序下载到系统的Flash中。<strong>但是这个下载方式需要以下步骤：</strong></p><p>Step1:将BOOT0设置为1，BOOT1设置为0，然后按下复位键，这样才能从系统存储器启动BootLoader<br>Step2:最后在BootLoader的帮助下，通过串口下载程序到Flash<br>Step3:程序下载完成后，又有需要将BOOT0设置为GND，手动复位，这样，STM32才可以从Flash中启动</p><p><strong>可以看到，利用串口下载程序还是比较的麻烦，需要跳帽跳来跳去的，非常的不注重用户体验。</strong></p><p><strong>3、Embedded Memory</strong><br>内置SRAM，既然是SRAM，自然也就没有程序存储的能力了，这个模式一般用于程序调试。假如我只修改了代码中一个小小的地方，然后就需要重新擦除整个Flash，比较的费时，可以考虑从这个模式启动代码（也就是STM32的内存中），用于快速的程序调试，等程序调试完成后，再将程序下载到Flash中。</p><p>要注意的是，一般不使用内置SRAM启动(BOOT1=1，BOOT0=1)，因为SRAM掉电后数据就丢失。多数情况下SRAM只是在调试时使用，也可以做其他一些用途。如做故障的局部诊断，写一段小程序加载到SRAM中诊断板上的其他电路，或用此方法读写板上的Flash或EEPROM等。还可以通过这种方法解除内部Flash的读写保护，当然解除读写保护的同时Flash的内容也被自动清除，以防止恶意的软件拷贝。</p><p>一般BOOT0和BOOT1跳线都跳到0(地)</p><p><strong>顺便说一下STM32 启动过程：</strong></p><p>STM32的内部闪存（flash）地址起始于0x08000000,一般情况下，程序文件就从地址开始写入，此外STM32是基于Cortex-M3内核的微控制器，其内部通过一张中断向量表来响应。程序启动后，首先从&quot;中断向量表&quot;取出复位中断向量执行复位中断程序完成启动，而这张&quot;中断向量表&quot;的起始地址是0x8000004,当中断来临，STM32的内部硬件机制会自动将PC指针定位到中断向量表处，并根据中断源取出对应的中断向量执行中断服务程序。</p><p>在图53.1.1,STM32 在复位后，先从0x08000004地址取出复位中断向量的地址，并跳转到复位中断服务程序，如标号①所示，在复位中断执行完后，会跳转到我们的Main函数，如标号②所示，而我们的main一般都是一个死循环，在main函数执行过程中，如果收到中断请求，此时STM32强制将PC指针指回中断向量表处，如标号③所示，然后，根据中断源进入相应的中断服务程序，如标号④所示，在执行完中断服务以后，程序再次返回main函数执行，如标号5⑤所示<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20200317093403541.png" alt="在这里插入图片描述" loading="lazy">正点原子STM32 ISP下载一般步骤和程序执行步骤<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20200320103959316.png" alt="在这里插入图片描述" loading="lazy"></p><p>但是由于下载电路采用一键下载方案，如下图所示，所以我们只需要在刚开始的时候就设置BOOT0/BOOT1都为0即可，后面不需要再修改了<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20200320103941759.png" alt="在这里插入图片描述" loading="lazy"></p><h1>8种IO口模式</h1><p>输入模式</p><p>-输入浮空（GPIO_Mode_IN_FLOATING）  -输入上拉(GPIO_Mode_IPU)</p><p>-输入下拉(GPIO_Mode_IPD)  -模拟输入(GPIO_Mode_AIN)</p><p>输出模式</p><p>-开漏输出(GPIO_Mode_Out_OD)  -开漏复用功能(GPIO_Mode_AF_OD)</p><p>-推挽式输出(GPIO_Mode_Out_PP)  -推挽式复用功能(GPIO_Mode_AF_PP)</p><table><thead><tr><th>4种输入模式</th><th>4种输出模式 （带上拉或者下拉）</th></tr></thead><tbody><tr><td>浮空输入</td><td>推挽输出</td></tr><tr><td>上拉输入</td><td>复用式推挽输出</td></tr><tr><td>下拉输入</td><td>开漏输出</td></tr><tr><td>模拟输入</td><td>复用式开漏输出</td></tr></tbody></table><h2 id="1-浮空输入">1、浮空输入</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122101349507.png" alt="在这里插入图片描述" loading="lazy"><br>浮空输入模式下，I/O端口的电平信号直接进入输入数据寄存器。MCU直接读取I/O口电平，I/O的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入)的情况下，读取该端口的电平是不确定的，一般多用于外部按键输入。</p><h2 id="2-上拉输入">2、上拉输入</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122103213234.png" alt="在这里插入图片描述" loading="lazy"><br>IO内部接上拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为高电平 如果I/O口输入低电平，那么引脚就为低电平，MCU读取到的就是低电平</p><h2 id="3-下拉输入">3、下拉输入</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122104235652.png" alt="在这里插入图片描述" loading="lazy"><br>IO内部接下拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为低电平 如果I/O口输入高电平，那么引脚就为高电平，MCU读取到的就是高电平</p><h2 id="4-模拟输入">4、模拟输入</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122104502194.png" alt="在这里插入图片描述" loading="lazy"></p><p>将引脚设置为stm32内部的adc的模拟信号的输入，需要带adc的io口才能设置。</p><h2 id="5-开漏输出">5、开漏输出</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122110839250.png" alt="在这里插入图片描述" loading="lazy"><br>输出端相当于三极管的集电极，要得到高电平状态需要上拉电阻才行，适合于做电流型的驱动，其吸收电流的能力相对强（一般20mA以内）</p><p>IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平</p><h2 id="6-推挽输出">6、推挽输出</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122112911788.png" alt="在这里插入图片描述" loading="lazy"><br>在推挽输出模式时，N-MOS管和P-MOS管都工作，如果我们控制输出为0，低电平，则P-MOS管关闭，N-MOS管导通，使输出低电平，I/O端口的电平就是低电平，若控制输出为1 高电平，则P-MOS管导通N-MOS管关闭，使输出高电平，I/O端口的电平就是高电平， 外部上拉和下拉的作用是控制在没有输出时IO口电平</p><p>此时施密特触发器是打开的，即输入可用，通过输入数据寄存器GPIOx_IDR可读取I/O的实际状态。I/O口的电平一定是输出的电平推挽输出输出0-接GND， IO输出1 -接VCC，读输入是未知的。</p><p>推挽输出和开漏输出的区别</p><table><thead><tr><th>推挽输出</th><th>开漏输出</th></tr></thead><tbody><tr><td>可以输出强高低电平，连接数字器件</td><td>可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极. 需要外接上拉电阻，才能实现输出高电平 合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)；在使用任何一种开漏模式时，都需要接上拉电阻，否则只能输出低电平</td></tr><tr><td>推挽输出电路： 其中IN端输出高电平时下面的PNP三极管截止，而上面NPN三极管导通，输出电平VS+；当IN端输出低电平时则恰恰相反，PNP三极管导通，输出和地相连，为低电平</td><td>开漏输出电路：IN端输出低电平时，三极管导通，使输出接地，IN端输出高电平时，三极管截止，所以引脚既不输出高电平，也不输出低电平，为高阻态。为正常使用时必须接上拉电阻</td></tr></tbody></table><p>在STM32的应用中，除了必须用开漏模式的场合，我们都习惯使用推挽输出模式。</p><h2 id="7-开漏复用输出">7、开漏复用输出</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122115229776.png" alt="在这里插入图片描述" loading="lazy"><br>输出的高低电平的来源于其它外设，施密特触发器打开，输入可用，通过输入数据寄存器可获取I/O实际状态 除了输出信号的来源改变 其他与开漏输出功能相同<br>可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）</p><h2 id="8-推挽复用输出">8、推挽复用输出</h2><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122115612445.png" alt="在这里插入图片描述" loading="lazy"><br>可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）</p><h2 id="f4系列与f1系列区别">F4系列与F1系列区别:</h2><p>本质上的区别是F4系列采用了Cortex-M4内核 ，而F1系列采用Cortex-M3内核<br>F1系列(M3)IO口基本结构：<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122120344564.png" alt="在这里插入图片描述" loading="lazy"><br>F4系列(M4)IO口基本结构：<br><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20210122120412955.png" alt="在这里插入图片描述" loading="lazy"><br>F4系列设计的更加高级与人性化，他将外部上下拉电阻转移到了输出/输入驱动器外部，使得输出模式下也可以实现内部上拉与下拉，方便了用户的使用，增加了灵活性。</p><h2 id="引脚模式的配置方式如下：">引脚模式的配置方式如下：</h2><p>1、作为普通GPIO输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时不要使能该引脚对应的所有复用功能模块。<br>2、作为普通GPIO输出：根据需要配置该引脚为推挽输出或开漏输出，同时不要使能该引脚对应的所有复用功能模块。<br>3、作为普通模拟输入：配置该引脚为模拟输入模式，同时不要使能该引脚对应的所有复用功能模块。<br>4、作为内置外设的输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时使能该引脚对应的某个复用功能模块。<br>5、作为内置外设的输出：根据需要配置该引脚为复用推挽输出或复用开漏输出，同时使能该引脚对应的所有复用功能模块。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    
    <category term="stm32" scheme="https://www.darkfox.top/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>platformIO入门</title>
    <link href="https://www.darkfox.top/posts/85cfa8dc/"/>
    <id>https://www.darkfox.top/posts/85cfa8dc/</id>
    <published>2022-02-13T02:42:18.000Z</published>
    <updated>2023-05-27T11:45:54.372Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202202131045406.png" alt="" loading="lazy"></p><center> platformio ide 可以更快速的新建一个项目和配置环境，这次就来学习一下如何使用.  </center><span id="more"></span><h1>简介</h1><h2 id="platform">platform</h2><p>直译的话就是 <strong>平台</strong>，具体就是指的芯片平台，再详细一点那就是各个公司具体的系列芯片的开发平台了。目前为止 PIO针对支持的平台都有以下功能支撑：</p><ul><li>支持指定框架的基于脚本的编译构建系统</li><li>针对各公司常规开发板的预配置</li><li>提供多架构的构建工具及相关工具链的支持</li></ul><p>PIO 目前支持的平台分为嵌入式和桌面两大类。</p><h2 id="嵌入式平台">嵌入式平台</h2><ul><li><a href="https://docs.platformio.org/en/latest/platforms/aceinna_imu.html">Aceinna IMU</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/atmelavr.html">Atmel AVR</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/atmelsam.html">Atmel SAM</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/espressif32.html">Espressif 32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/espressif8266.html">Espressif 8266</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/freescalekinetis.html">Freescale Kinetis</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/infineonxmc.html">Infineon XMC</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/intel_arc32.html">Intel ARC32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/intel_mcs51.html">Intel MCS-51 (8051)</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/kendryte210.html">Kendryte K210</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/lattice_ice40.html">Lattice iCE40</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/maxim32.html">Maxim 32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/microchippic32.html">Microchip PIC32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf51.html">Nordic nRF51</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/nordicnrf52.html">Nordic nRF52</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/nxplpc.html">NXP LPC</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/riscv_gap.html">RISC-V GAP</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/samsung_artik.html">Samsung ARTIK</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/sifive.html">SiFive</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/siliconlabsefm32.html">Silicon Labs EFM32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/ststm32.html">ST STM32</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/ststm8.html">ST STM8</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/teensy.html">Teensy</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/timsp430.html">TI MSP430</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/titiva.html">TI TIVA</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/wiznet7500.html">WIZNet W7500</a></li></ul><h2 id="桌面平台">桌面平台</h2><ul><li><a href="https://docs.platformio.org/en/latest/platforms/native.html">Native</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/linux_arm.html">Linux ARM</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/linux_i686.html">Linux i686</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/linux_x86_64.html">Linux x86_64</a></li><li><a href="https://docs.platformio.org/en/latest/platforms/windows_x86.html">Windows x86</a></li></ul><h1>Home 标签页</h1><p>进入Platformio 的主页显示的就是 Home 标签页，标签页内从上到下可以依次看到以下内容：</p><ul><li>Show at startup 的复选框，勾上后，每次启动 vs code 就会启动这个主页；</li><li>Quick Access 下有四个操作按钮，分别是：<ul><li>New Project：用于新建工程；</li><li>Import Arduino Project：用于导入电脑中已经存在的 Arduino 工程；</li><li>Open Project：用于打开已经存在的 Platformio 工程；</li><li>Project Examples：用于打开本机已经安装的单片机平台的例程工程；</li></ul></li><li>Recent News：显示最新 Platformio 信息；</li></ul><h3 id="project-标签页">project 标签页</h3><p>显示最近打开的工程</p><h3 id="inspect-标签页">Inspect 标签页</h3><p>用于检测项目，可以看到代码占用了多少RAM和Flash等信息，具体看<a href="https://docs.platformio.org/en/latest/home/index.html">文档介绍</a>.<br><img src="https://img-blog.csdnimg.cn/0d99caa854e249ebb6e0ade65758cdd8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCY57yY6YeM55qE6K6w5b-G,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p><h3 id="libraries-标签页">Libraries 标签页</h3><p><img src="https://img-blog.csdnimg.cn/cbd61bfecc8f49a38113e3798b55379b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bCY57yY6YeM55qE6K6w5b-G,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">ibraries 标签页是管理库的接口，这里只简单说明一下，主要包含四个标签页：</p><ul><li><p>Registry 标签页 ：这个页面是有一个搜索框，搜索框内没有内容的时候，会在搜索框下面显示所有可用的库，搜索框中输入关键词就会过滤显示相关的库。<br>点击想要安装的库，就会进入这个库的详细页面，这个页面里有安装按钮、例程、使用方法等操作接口。</p></li><li><p>Installed 标签页：这里主要展示本机已经安装的第三方库。</p></li><li><p>Built-in 标签页：这里显示已安装平台内置的库。</p></li><li><p>Updates 标签页：展示需要更新的库。</p><p>新建项目的过程一搜一堆，就不描述了。</p><p><strong>当你新建项目工程以后将会自动产生以下文件夹：</strong></p></li><li><p><strong>.pio</strong>，存放工程编译产生的文件</p></li><li><p><strong>.vscode</strong>, 存放针对工程定制化的 vscode 配置文件</p></li><li><p><strong>include</strong>，存放统一管理的 h 头文件</p></li><li><p><strong>lib</strong>，存放自己编写的库文件</p></li><li><p><strong>src</strong>，存放工程项目的 C/C++ 源文件</p></li><li><p><strong>test</strong>，存放工程项目的测试文件，一般用不到</p></li><li><p><strong>.gitignore</strong>，git 仓库的忽略文件，方便 git 进行工程项目的版本控制</p></li><li><p><strong>travis.yml</strong>，持续集成的配置文件，一般用不到</p></li><li><p><strong>platformio.ini</strong>，项目的核心配置文件，这个会经常用到，所以得了解其中可用的配置项</p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picyun.oss-cn-shanghai.aliyuncs.com/img/202202131045406.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt; platformio ide 可以更快速的新建一个项目和配置环境，这次就来学习一下如何使用.  &lt;/center&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SORT</title>
    <link href="https://www.darkfox.top/posts/67b11f96/"/>
    <id>https://www.darkfox.top/posts/67b11f96/</id>
    <published>2022-01-26T13:51:53.000Z</published>
    <updated>2022-03-20T06:13:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><iframe   height=900 width=600 src="https://caspervonb.xyz/toneofsorting/" "   frameborder=0   allowfullscreen> </iframe><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">排序算法可视化</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://www.darkfox.top/posts/a23e5172/"/>
    <id>https://www.darkfox.top/posts/a23e5172/</id>
    <published>2022-01-01T12:31:36.000Z</published>
    <updated>2022-07-19T11:25:57.465Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>首先祝大家虎年快乐！</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20220719173332.png" alt="" loading="lazy"></p><span id="more"></span><center>建议配合BGM食用</center><div align=life> <iframe frameborder="0" marginwidth="0" marginheight="0" width=300 height=86 src="https://music.163.com/outchain/player?type=2&id=506139194&auto=1&height=66"></iframe></div><p><s>真是愉快的一年呢！</s><br><strong>真是多灾多难的一年</strong>！</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021334281.png" alt="2022" loading="lazy"></p><h3 id="2021是精神和身体的双重折磨">2021是精神和身体的双重折磨</h3><p>首先，在2021年初，得知了UP主<strong>墨茶</strong>的悲痛经历和逝世的不幸消息，值此之际，缅怀我们的这位朋友。希望他在那有数不清的草莓可以吃，希望听闻他的事迹的朋友可以更加的珍惜你的生活，珍惜你身边的朋友！</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021335392.png" alt="" loading="lazy"></p><p>2021最为突出的特色是什么呢？没错，是™的<strong>疫情</strong>。这杀千刀的疫情摧毁了我们的日常生活，也使我的精气神变得很脆弱。每天都是某某因为疫情不得不关门失业，某某某地方爆发了巴拉巴拉，家里又没有吃的了巴拉巴拉……希望这该死的疫情在2022也不要再出现了。现在一想到在家里上网课的那段操蛋经历我就浑身难受。</p><p>至于身体上的折磨，说来话长。我还记得即将开学，即将分别的前夕，我和家里的同学朋友吃了一顿美滋滋的火锅。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021349615.png" alt="" loading="lazy"></p><p>很诱人是吧，但是最后的离别时刻，为了检验友情，和朋友一人喝了一杯火锅汤，以表示哥们的友情<s>坚</s>（keng）<s>固</s>（die）无比。<br>像我这种关心室友的热心人士，肯定也会带点小特产回去。于是乎，我就买了一百多块钱的武汉九九辣鸭，足足三斤多。但是到了学校才发现我的室友呀，要过两天才报道……于是乎，本着节约粮食的原则，防止我的鸭子在这潮湿、温热的南方发酵，我做出了一个违背<s>原则</s>的决定——我给他吃了。<br>然后报道后，副作用就开始慢慢发酵了。</p><hr><ul><li><p>第一天，些许不适感，尚可上课</p></li><li><p>第二天，些许不适感，上课坐着很难受，肚子有灼烧感</p></li><li><p>第三天，上你🐎的课，去医院！</p></li></ul><hr><p>然后就是钱包流血暴击三连击，挂号-检查-付医药费</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021401265.png" alt="" loading="lazy"></p><p>再接着就是血肉暴击三连击，挂号-住院-做手术。人生的第一次的手术竟然是因为尼玛的辣鸭……<br>然后就是长达两个月的恢复期……终于半血复活后返校。结果有几门课已经结课了（QWQ），只能拖着半血的身体开始冲刺（真的是半血，有时候一觉睡醒床上有一滩血）。好在那几门结课的课程补上了。从此以后，身上多了一个消除不了的伤疤，以及伴随终身的伤痛（再也不作死了）。</p><p>后来在吃鱼的时候还卡了一根刺，又做了一次小手术，就不提了（为何我这么倒霉）。其实吧，经历过这一次挫折我也学习到了很多。比如更加的珍惜足下的生活，也更能理解那些行动不方便的人士，这些也许不亲身经历一下很难理解。然后我发现了一个很操蛋的精神治疗方法，当你遇到不幸或者生活里有过不去的坎时，就去肛肠科或者儿科去坐一天。然后你会发现生活里也没有过不去的坎，大不了从头再来。</p><p>还有就是，多给这个世界一份温暖，这个世界也会多留给你一份温暖。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021454584.png" alt="" loading="lazy"></p><h3 id="安全">安全</h3><p>2021，强调最多的事情就是<strong>安全</strong>，<strong>安全</strong>，还是<strong>安全</strong>！不管是疫情还是其他的，各位做实验的时候一定要<strong>注意安全</strong>。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051558265.png" alt="" loading="lazy"></p><p>今年材料大楼就有几位同学不幸出了事故，诸君，一定要<strong>注意安全</strong>!</p><h3 id="2021电子设计大赛">2021电子设计大赛</h3><p>今年最有纪念意义的估计也就这个比赛了。现在看到当初为了比赛画的板子还是想笑，没想到到了大学,中二病还是存在于心中。被<s>附魔</s>的PCB板子。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021507568.png" alt="" loading="lazy"></p><p>以及准备比赛花很多money搞来的器件。</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021509150.png" style="zoom:67%;" / loading="lazy"><p>好在虽然有很多的挫折和困难，但是我们都克服了，最后也取得了一个满意的结果，我们队伍拿了个国家一等奖。细节就不谈了，三天三夜也谈不完，还是回去留在酒桌上吹牛用吧。但是有个小插曲挺有意思的还是和你们分享一下，在集训调车的时候，为了让车走直线，方便调整PID参数。我们想了很多办法，最后是这么解决这个鬼问题的（笑）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20220719173524.png" alt="" loading="lazy"></p><p>最后圆满结束，和队友吃了最后一顿赛饭。非常感谢我这两位沙雕队友的技术支持和<s>无限的拌嘴</s>（bushi）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021523892.png" alt="" loading="lazy"></p><h3 id="小玩具">小玩具</h3><p>在这一年里也捣鼓了很多小玩具，不说了，上图</p><h4 id="激光雕刻机">激光雕刻机</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021517650.png" alt="" loading="lazy"></p><center>激光雕刻机</center><p>这个小东西是我的激光雕刻机2代，一代原型机很寒掺，并且被实验室弄丢了。好在当DIY原型机时在b站留存了视频。</p><iframe id="b" class="b video_pc" src="//player.bilibili.com/player.html?aid=98402834&bvid=BV1DE411F78X&cid=167982886&page=1" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><iframe id="b" class="b video_pc" src="//player.bilibili.com/player.html?aid=370054886&bvid=BV1bZ4y1j76W&cid=170040000&page=1" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>另外中间闲的我聊我还造了一个小沙雕，不过这都是2020年的事情了,时间过得真快，转眼两年了。<iframe src="//player.bilibili.com/player.html?aid=99366316&bvid=BV1j7411C7s6&cid=169615775&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="600" > </iframe><h4 id="雕刻机">雕刻机</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021518592.png" alt="" loading="lazy"></p><center>步进电机控制器</center><p>这个东西就没啥稀奇的了，市面上有很多，也没啥技术含量。就是一个简单的把引脚引出来然后连接a4988驱动（其他的也可），带动42步进电机用的一个小的转换的板子。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021519216.png" alt="" loading="lazy"></p><center>三轴雕刻机框架</center><p>年初的时候因为没有设计过机械装置，所以买了个这个小垃圾。这个小垃圾结构也蛮好的，只是用料不太讲究。首先铝板要换成其他的钣金件，因为硬度（我也不知道专业说法叫啥）不够，容易变形，致使精度变低。其次同步轴和限位要更换成更新的，原来这个已经不能用了。然后最主要的部分，步进电机要更换，这三个步进电机扭矩太小，没什么用，带不了太大的负载。最后，要加个主轴才能变成雕刻机，现在的状态只是个激光雕刻机（笑）。奈何没钱继续了，2022希望能够搞定他。</p><h4 id="3d打印机">3D打印机</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021520315.png" alt="" loading="lazy"></p><center>3D打印机</center><center>这一年，我有了自己的3D打印机</center><p>这一年，确实有了自己的3D打印机，虽然进程只有10、10、10。但是也确确实实有了自己的一个3D打印机。一个好的极客怎么能没有自己的3D打印机呢。这个打印机参照的小树官方的资料，使用了单臂的结构，佩带有热床和pei板（照片忘拍了）。控制板使用了开源的MKS（虽然感觉是抄的别人的方案），固件刷的小树的汉化好的固件，一切都算是顺利。这个鬼东西主要是调平的时候很麻烦，只能一点一点手动调（因为没加钱）。最后做出来感觉精度还可以，打印个小东西还是蛮好的，也挺方便的。</p><h4 id="身份卡">身份卡</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021521923.png" alt="" loading="lazy"></p><center>特质身份卡</center><p>做这个鬼东西的时候，鬼知道我想的是啥。首先呢，这确确实实是一张cpu卡，只是把外圈的线圈剪去了。然后泡在有机溶剂里面方便取出来里面的芯片。但是奈何后来没有芯片的资料，最后也就不了了之了。2022年我打算重新再搞一次，争取这次一次成功！</p><h4 id="暗影之眼">暗影之眼</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021522894.png" alt="" loading="lazy"></p><center>BlackEyes</center><p>这个黑科技最初是在彩虹六号上看到的，之后在b站发现了竟然有人做这个鬼东西。我试着做了一个，但是没买到合适的塑料罩，最后不了了之了。现在放在哪了也忘了QWQ，2022年再复刻一个更好的！</p><h4 id="牛顿环">牛顿环</h4><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021526652.png" style="zoom:67%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021526717.png" style="zoom:67%;" / loading="lazy"><center>没错，就是牛顿环，使用光学仪器观察到了（笑）</center><h4 id="捡垃圾">捡垃圾</h4><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201021527590.png" style="zoom:67%;" / loading="lazy"><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/20220719173752.png" alt="" loading="lazy"></p><p>今年确确实实捡了不少垃圾，但是奈何翻车次数太多了。所以好多垃圾最后真的成了垃圾。像这个年代久远缺少资料的小垃圾cd机，实在是修不好了（没有资料，很难修好）。不得不成了垃圾，哎。</p><h3 id="日常">日常</h3><center>我的日常，大多数时候是这个状态</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051540921.png" alt="" loading="lazy"></p><p>没错，坐在椅子上，打开手机、电脑，然后愣住。。。。。。</p><p>还是聊一下日常生活的小插曲吧，还是这些有意思。</p><h4 id="校宠">校宠</h4><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051549529.png" alt="" loading="lazy"></p><center>大橘和大黄的小窝</center><p>每天从图书馆路过看到这两个小可爱真的可以消散一天的负面debuff。关键是，<strong>他们让我撸</strong>！！！！</p><h4 id="美食">美食</h4><center>俗话说，唯有生活与美食不可辜负！</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051553038.png" alt="" loading="lazy"></p><center>猪又炖粉条，yyds</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051558245.png" alt="" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051557434.png" alt="" loading="lazy"></p><center>火锅，永远的经典，不知道吃啥，来顿火锅吧</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051602642.png" alt="" loading="lazy"></p><center>又成长了一岁</center><h4 id="美景">美景</h4><center>首先是无意中抓拍到的一幕（😀）</center><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051605151.png" style="zoom:67%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051605782.png" style="zoom:67%;" / loading="lazy"><center>5.1期间拍到的花</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051606670.png" alt="" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051607744.png" alt="" loading="lazy"></p><center>返校后拍的老城区</center><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/1641100995579.jpg.jpg" alt="" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/1641101020261.jpg.jpg" alt="" loading="lazy"></p><h4 id="防诈骗">防诈骗</h4><p>说到这个就有意思了，起因是一哥们给我发了个二维码链接。点进去明显是个钓鱼的鬼佬网站，并且查询了几轮后发现是个空壳。里面真的是p都没有。。。。</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051611740.png" style="zoom:67%;" / loading="lazy"><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051612136.png" style="zoom:50%;" / loading="lazy"><p>再点进去的话，就是传统的套路了，并且是全自动的话术套路，全都是机器人哦。</p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051613898.png" style="zoom:67%;" / loading="lazy"><p>到最后也没啥，提醒了一下那个哥们后，顺手举报一波后就结束了。</p><p>先写到这，有时间再续。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202201051616819.png" alt="" loading="lazy"></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">又到了一年一度的总结时间了！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021全国电赛（F题）图像识别__数字识别</title>
    <link href="https://www.darkfox.top/posts/694f8495/"/>
    <id>https://www.darkfox.top/posts/694f8495/</id>
    <published>2021-11-08T03:30:55.000Z</published>
    <updated>2022-07-19T09:25:52.148Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><span id="more"></span><h3 id="基于openmv的图像识别"><strong>基于openmv的图像识别</strong></h3><h4 id="openmv简介"><strong>openmv简介</strong></h4><p>OpenMV是一个开源，低成本，功能强大的机器视觉模块，以STM32F427CPU为核心，集成了OV7725摄像头芯片，在小巧的硬件模块上，用C语言高效地实现了核心机器视觉算法，提供Python编程接口 。同时 OpenMV也是一个可编程的摄像头，通过Python语言可实现你想要的逻辑。而且摄像头本身也内置了一些图像处理的算法，使用起来也更加的方便，仅需要写一些简单的Python代码，即可轻松的完成各种机器视觉相关的任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在本次赛事中我们听到的最多的怨言就是（openmv4运行内存只有1MB，而openmv4plus运行内存有32MB！）</span><br><span class="line">，因为很多神经网络模型需要更大的内存才能运行。但是这个其实是可以实现的，后面我会简单说明一下。</span><br></pre></td></tr></table></figure><h5 id="一-打开openmv-ide软件"><strong>一、打开OpenMV IDE软件</strong></h5><p><img src="https://img-blog.csdnimg.cn/c84f2fc2a13b4c408867322efa96691a.png" alt="img" loading="lazy"></p><p>选择Cancel（不升级即可）！</p><h5 id="二-openmv4的数字模板匹配识别"><strong>二、openmv4的数字模板匹配识别</strong></h5><p>openmv4的数字识别的基础是需要配置使用NCC模板匹配。通过NCC模板的匹配可把</p><p>需要识别的数字模板图片保存到SD卡中，然后可进行下一步的识别。</p><p><strong>1、我们通过打开模板匹配的历程来直接打开代码使用</strong></p><p>点击文件——示例——openmv——feature detection——template_matching.py</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121343657.png" alt="" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121335156.png" alt="" loading="lazy"></p><p><strong>2、如果运行出现这个窗口那就说明你没有保存模板图片。</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/4043f3c29e4847d59d86ae582e3874d0.png" alt="img" loading="lazy"></p><p><strong>这时我们就需要创建一个模板图片。</strong></p><p><strong>3、首先要打开一个helloworld历程文件</strong></p><p>点击file——examples——01-basics——<a href="http://helloworld.py">helloworld.py</a></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121344295.png" alt="" loading="lazy"></p><p><strong>4、在helloworld历程文件中进行匹配0~9这样的数字</strong></p><p>对这些数字进行一一截取（打开摄像头，图像中出现数字之和关闭摄像头，在图像中截取数字，右键选择将图像选择保存到PC），用它们来作为我们的模板图片（此时图片格式后缀为bmp格式）。</p><p>在右边的Frame Buffer框中进行截取</p><p><strong>注意</strong>：不要点Zoom，因为Zoom展示的是放大后的效果，在识别时可能会导致失帧。</p><p><strong>例如：本人截取的一张图片（目前后缀还是bmp）</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/c29ea05f024d4e5c9f01b8d110eb3bb7.png" alt="img" loading="lazy"></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/2e6e9ea350664008a0908f27e633e6ca.bmp" alt="img" loading="lazy"></p><p><strong>注意：模板图片的格式一定要是pgm的格式</strong></p><p>星瞳科技给了一个网址：<strong><a href="https://convertio.co/zh/bmp-pgm/">https://convertio.co/zh/bmp-pgm/</a></strong>，其他的网站也是大同小异</p><p>这个网站用不了的话可以去百度啥的地方随便搜一个</p><p>点击选择文件（刚刚截图的模板图片）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121346073.png" alt="" loading="lazy"></p><p>打开所选的图片，点击转换（注意是不是转换到PGM格式，如果不是请换到PGm格式）</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121337807.png" alt="" loading="lazy"></p><p>转换完成之后点击下载即可，此时图片后缀为PGM格式。</p><p><strong>5、将转换的数字图片（PGM）进行保存，一定要保存到OpenMV4的SD卡中，名称自定义</strong></p><p><strong>6、把template.pgm改为你命名的模板图片（PGM）的名称</strong></p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121338466.png" alt="" loading="lazy"></p><p>例如：我命名的为11</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/ef46e5ea5b614c3ab6b4b2b6de485f03.png" alt="img" loading="lazy"></p><p><strong>7、改完即可运行</strong></p><p><a href="https://book.openmv.cc/image/template-match.html">官方数字识别源代码</a>，此代码为源代码，可在此基础上进行改动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Template Matching Example - Normalized Cross Correlation (NCC)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to use the NCC feature of your OpenMV Cam to match</span></span><br><span class="line"><span class="comment"># image patches to parts of an image... expect for extremely controlled enviorments</span></span><br><span class="line"><span class="comment"># NCC is not all to useful.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: NCC supports needs to be reworked! As of right now this feature needs</span></span><br><span class="line"><span class="comment"># a lot of work to be made into somethin useful. This script will reamin to show</span></span><br><span class="line"><span class="comment"># that the functionality exists, but, in its current state is inadequate.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, sensor, image</span><br><span class="line"><span class="keyword">from</span> image <span class="keyword">import</span> SEARCH_EX, SEARCH_DS</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset sensor</span></span><br><span class="line">sensor.reset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set sensor settings</span></span><br><span class="line">sensor.set_contrast(<span class="number">1</span>)</span><br><span class="line">sensor.set_gainceiling(<span class="number">16</span>)</span><br><span class="line"><span class="comment"># Max resolution for template matching with SEARCH_EX is QQVGA</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line"><span class="comment"># You can set windowing to reduce the search image.</span></span><br><span class="line"><span class="comment">#sensor.set_windowing(((640-80)//2, (480-60)//2, 80, 60))</span></span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load template.</span></span><br><span class="line"><span class="comment"># Template should be a small (eg. 32x32 pixels) grayscale image.</span></span><br><span class="line">template = image.Image(<span class="string">&quot;/template.pgm&quot;</span>)</span><br><span class="line"></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run template matching</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># find_template(template, threshold, [roi, step, search])</span></span><br><span class="line">    <span class="comment"># ROI: The region of interest tuple (x, y, w, h).</span></span><br><span class="line">    <span class="comment"># Step: The loop step used (y+=step, x+=step) use a bigger step to make it faster.</span></span><br><span class="line">    <span class="comment"># Search is either image.SEARCH_EX for exhaustive search or image.SEARCH_DS for diamond search</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Note1: ROI has to be smaller than the image and bigger than the template.</span></span><br><span class="line">    <span class="comment"># Note2: In diamond search, step and ROI are both ignored.</span></span><br><span class="line">    r = img.find_template(template, <span class="number">0.70</span>, step=<span class="number">4</span>, search=SEARCH_EX) <span class="comment">#, roi=(10, 0, 60, 60))</span></span><br><span class="line">    <span class="keyword">if</span> r:</span><br><span class="line">        img.draw_rectangle(r)</span><br><span class="line"></span><br><span class="line">    print(clock.fps())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="openmv的lenet数字识别">openmv的Lenet数字识别</h3><h4 id="1-简单的de个bug">1、简单的de个bug</h4><p>我估计很多人看到了这个nn识别的方案，但是我估计很多人倒在的这个地方</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121438620.png" alt="" loading="lazy"></p><p>因为官方把这个model给删除了（笑），另外还要注意一点，这个nn模型只支持3.6.5及以前的固件版本，如果你的固件是最新的版本的话，请刷回来老的固件版本才能使用。固件的话，自己去github找去。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121439528.png" alt="" loading="lazy"></p><p>这个模型，我队友通过万能的淘宝给找回来了（笑）。点击下载<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/lenet.network">模型文件</a>，注意：该文件分享有效期为该文章发表日期起十日</p><h4 id="2-简单的跑个例程">2、简单的跑个例程</h4><p>刷好固件，存进去模型之后就可以运行了,例程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LetNet数字识别例程</span></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, os, nn</span><br><span class="line"></span><br><span class="line">sensor.reset()                         <span class="comment"># 复位并初始化传感器。</span></span><br><span class="line"></span><br><span class="line">sensor.set_contrast(<span class="number">3</span>)</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line"><span class="comment">#设置图像色彩格式，有RGB565色彩图和GRAYSCALE灰度图两种</span></span><br><span class="line"></span><br><span class="line">sensor.set_framesize(sensor.QVGA)      <span class="comment"># 将图像大小设置为QVGA (320x240)</span></span><br><span class="line"></span><br><span class="line">sensor.set_windowing((<span class="number">128</span>, <span class="number">128</span>))       <span class="comment"># 设置128 x128窗口。</span></span><br><span class="line">sensor.skip_frames(time=<span class="number">100</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)</span><br><span class="line">sensor.set_auto_exposure(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载lenet神经网络模型</span></span><br><span class="line">net = nn.load(<span class="string">&#x27;/lenet.network&#x27;</span>)</span><br><span class="line">labels = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">clock = time.clock()                <span class="comment"># 创建一个时钟对象来跟踪FPS帧率。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># 更新FPS帧率时钟。</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># 拍一张照片并返回图像。</span></span><br><span class="line">    out = net.forward(img.copy().binary([(<span class="number">150</span>, <span class="number">255</span>)], invert=<span class="literal">True</span>))</span><br><span class="line">    max_idx = out.index(<span class="built_in">max</span>(out))</span><br><span class="line">    score = <span class="built_in">int</span>(out[max_idx]*<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">70</span>):</span><br><span class="line">        score_str = <span class="string">&quot;??:??%&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        score_str = <span class="string">&quot;%s:%d%% &quot;</span>%(labels[max_idx], score)</span><br><span class="line">    img.draw_string(<span class="number">0</span>, <span class="number">0</span>, score_str)</span><br><span class="line"></span><br><span class="line">    print(clock.fps())             </span><br><span class="line">    <span class="comment"># 注意: 当连接电脑后，OpenMV会变成一半的速度。当不连接电脑，帧率会增加。</span></span><br><span class="line">    <span class="comment">#打印当前的帧率。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的效果图我忘记存了，改天重现一下，但是这个方案的结果是：<strong>识别效果很垃圾！<strong>3，6，9不分1，7不分，2，4不分，再加上帧率只有tm的</strong>5帧</strong>，不适合放在车上边移动边识别（哪怕你停下来识别效果也很拉）</p><h4 id="3-简单的训个模型">3、简单的训个模型</h4><p>这个是使用的官方的nnlenet模型，其实我们蛮可以自己训练一个，官方也在下面说过，可以自己训练模型。</p><p><img src="https://picyun.oss-cn-shanghai.aliyuncs.com/img/202111121449178.png" alt="" loading="lazy"></p><p>所以我自己训练了一个简单的模型，<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/train.png">点击打开模型示意图</a>,因为博主也不是相关技术人员，怕带偏你们，所以就不介绍怎么炼丹了。</p><p>因为没学过相关内容，就简单找了找教程，自己搞个足够大的数据集，然后丢进炼丹炉，然后练好后取出。<a href="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/test/train.tflite">模型文件</a>(注意：该文件十日后失效)</p><p>官方例程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenMV Image Classification Example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time, os, tf</span><br><span class="line"></span><br><span class="line">sensor.reset()                         <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)    <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)      <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.set_windowing((<span class="number">240</span>, <span class="number">240</span>))       <span class="comment"># Set 240x240 window.</span></span><br><span class="line">sensor.skip_frames(time=<span class="number">2000</span>)          <span class="comment"># Let the camera adjust.</span></span><br><span class="line"></span><br><span class="line">net = <span class="string">&quot;trained.tflite&quot;</span><span class="comment">#模型名称</span></span><br><span class="line">labels = [line.rstrip(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;labels.txt&quot;</span>)]<span class="comment">#标签，训练集自带的那个就行</span></span><br><span class="line"></span><br><span class="line">clock = time.clock()</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line"></span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># default settings just do one detection... change them to search the image...</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> tf.classify(net, img, min_scale=<span class="number">1.0</span>, scale_mul=<span class="number">0.8</span>, x_overlap=<span class="number">0.5</span>, y_overlap=<span class="number">0.5</span>):</span><br><span class="line">        print(<span class="string">&quot;**********\nPredictions at [x=%d,y=%d,w=%d,h=%d]&quot;</span> % obj.rect())<span class="comment">#打印坐标</span></span><br><span class="line">        img.draw_rectangle(obj.rect())</span><br><span class="line">        <span class="comment"># This combines the labels and confidence values into a list of tuples</span></span><br><span class="line">        predictions_list = <span class="built_in">list</span>(<span class="built_in">zip</span>(labels, obj.output()))<span class="comment">#定义数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(predictions_list)):</span><br><span class="line">            print(<span class="string">&quot;%s = %f&quot;</span> % (predictions_list[i][<span class="number">0</span>], predictions_list[i][<span class="number">1</span>]))<span class="comment">#对应的数字和概率</span></span><br><span class="line"></span><br><span class="line">    print(clock.fps(), <span class="string">&quot;fps&quot;</span>)<span class="comment">#打印个帧率不过分吧</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好巧不巧，这个效果图我也忘记保存了，改天补上。这个模型的识别效果就比nn好多了，但是仍然有一些不足，3，6，9仍然会有混滫错误。没办法，内存就那一丁点，跑不了太大的model。</p><h3 id="基于k210的数字识别">基于k210的数字识别</h3><p>因为电赛还没评定完成，暂时空着</p><h4 id="后记">后记</h4><p>真是意想不到竟然拿了个国一，但是老师出于要宣传还是什么的原因，还是不让碰作品，我手头也没有K210所以呢，芬分享啥的再咕几天吧。</p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">之前打电赛需要用到嵌入式视觉识别几个数字，在此记录一下我的思路和方案。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>int8_t等数据类型的区别</title>
    <link href="https://www.darkfox.top/posts/52c127a1/"/>
    <id>https://www.darkfox.top/posts/52c127a1/</id>
    <published>2021-11-02T13:08:59.000Z</published>
    <updated>2022-03-20T06:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>工作中经常碰到int8_t、int16_t、int32_t、int64_t、uint8_t、size_t、ssize_t等数据类型，所以有必要对此进行梳理。</p><p><strong>int_t同类</strong></p><p>int_t 为一个结构的标注，可以理解为type/typedef的缩写，表示它是通过typedef定义的，而不是一种新的数据类型。因为跨平台，不同的平台会有不同的字长，所以利用预编译和typedef可以最有效的维护代码。</p><ul><li>int8_t   : typedef signed char;</li><li>uint8_t  : typedef unsigned char;</li><li>int16_t  : typedef signed short ;</li><li>uint16_t : typedef unsigned short ;</li><li>int32_t  : typedef signed int;</li><li>uint32_t : typedef unsigned int;</li><li>int64_t  : typedef signed long long;</li><li>uint64_t : typedef unsigned long long;</li></ul><table><thead><tr><th style="text-align:left">Specifier</th><th style="text-align:left">Common Equivalent</th><th style="text-align:left">Signing</th><th style="text-align:left">Bits</th><th style="text-align:left">Bytes</th><th style="text-align:left">Minimum Value</th><th style="text-align:left">Maximum Value</th></tr></thead><tbody><tr><td style="text-align:left"><code>int8_t</code></td><td style="text-align:left"><code>signed char</code></td><td style="text-align:left">Signed</td><td style="text-align:left">8</td><td style="text-align:left">1</td><td style="text-align:left">-128</td><td style="text-align:left">127</td></tr><tr><td style="text-align:left"><code>uint8_t</code></td><td style="text-align:left"><code>unsigned char</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">8</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">255</td></tr><tr><td style="text-align:left"><code>int16_t</code></td><td style="text-align:left"><code>short</code></td><td style="text-align:left">Signed</td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">-32,768</td><td style="text-align:left">32,767</td></tr><tr><td style="text-align:left"><code>uint16_t</code></td><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">0</td><td style="text-align:left">65,535</td></tr><tr><td style="text-align:left"><code>int32_t</code></td><td style="text-align:left"><code>int</code></td><td style="text-align:left">Signed</td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">-2,147,483,648</td><td style="text-align:left">2,147,483,647</td></tr><tr><td style="text-align:left"><code>uint32_t</code></td><td style="text-align:left"><code>unsigned int</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">0</td><td style="text-align:left">4,294,967,295</td></tr><tr><td style="text-align:left"><code>int64_t</code></td><td style="text-align:left"><code>long long</code></td><td style="text-align:left">Signed</td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">-9,223,372,036,854,775,808</td><td style="text-align:left">9,223,372,036,854,775,807</td></tr><tr><td style="text-align:left"><code>uint64_t</code></td><td style="text-align:left"><code>unsigned long long</code></td><td style="text-align:left">Unsigned</td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">0</td><td style="text-align:left">18,446,744,073,709,551,615</td></tr></tbody></table><p><strong>size_t与ssize_t</strong></p><p>size_t主要用于计数，如sizeof函数返回值类型即为size_t。在不同位的机器中所占的位数也不同，size_t是无符号数，ssize_t是有符号数。</p><ul><li>在32位机器中定义为：typedef  unsigned int size_t; （4个字节）</li><li>在64位机器中定义为：typedef  unsigned long size_t;（8个字节）</li></ul><p>由于size_t是无符号数，因此，<strong>当变量有可能为负数时，必须使用ssize_t</strong>。因为当有符号整型和无符号整型进行运算时，有符号整型会先自动转化成无符号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> b = <span class="number">-1</span>;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//b=-1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//a=65535</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，int 无论在32位还是64位机器中，都是4个字节, 且带符号，可见size_t与int 的区别之处。</p><p>下面是stdint.h中的详细定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 7.18.1.1  Exact-width integer types */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>   <span class="keyword">uint8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">uint32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7.18.1.2  Minimum-width integer types */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int_least8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>   <span class="keyword">uint_least8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int_least16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint_least16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int_least32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>   <span class="keyword">uint_least32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int_least64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint_least64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  7.18.1.3  Fastest minimum-width integer types</span></span><br><span class="line"><span class="comment"> *  Not actually guaranteed to be fastest for all purposes</span></span><br><span class="line"><span class="comment"> *  Here we use the exact-width types for 8 and 16-bit ints.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> <span class="keyword">int_fast8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="keyword">uint_fast8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span>  <span class="keyword">int_fast16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint_fast16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  <span class="keyword">int_fast32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span>  <span class="keyword">int</span>  <span class="keyword">uint_fast32_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">int_fast64_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uint_fast64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 7.18.1.5  Greatest-width integer types */</span></span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  <span class="keyword">intmax_t</span>;</span><br><span class="line">__MINGW_EXTENSION <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>   <span class="keyword">uintmax_t</span>;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;</summary>
    
    
    
    <category term="C语言" scheme="https://www.darkfox.top/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言数据类型" scheme="https://www.darkfox.top/tags/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>c/c++ long int与long long的区别</title>
    <link href="https://www.darkfox.top/posts/66a918cc/"/>
    <id>https://www.darkfox.top/posts/66a918cc/</id>
    <published>2021-11-02T11:49:28.000Z</published>
    <updated>2022-03-20T06:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://fastly.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://fastly.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><h1>long int</h1><p>long int即long，给人的感觉好像是长整型，但实际上，它和int一样，只有32位。cppreference给出的定义是——</p><blockquote><p><strong>int</strong> - basic integer type. The keyword int may be omitted if any of the modifiers listed below are used. If no length modifiers are present, it’s guaranteed to have a width of at least 16 bits. However, on 32/64 bit systems it is almost exclusively guaranteed to have width of at least 32 bits.<br><strong>long</strong> - target type will have width of at least 32 bits.</p></blockquote><p>在实际的使用中，long与int几乎没有区别，比如——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10000000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;l = %d\n&quot;</span>,l);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2018122510141490.png" alt="在这里插入图片描述" loading="lazy"><br>　　既然long int与int相同，那么为什么还有long int这种尴尬的类型呢？<br>　　原因是早期的C编译器定义了long int占用4个字节，int占用2个字节，long int是名副其实的<strong>长整型</strong>。在ANSI C的标准中，对长整型的定义也是<strong>long int应该至少和int一样长</strong>，而不是long int 一定要比int占用存储字节长。新版的C/C++标准兼容了早期的这一设定。</p><span id="more"></span><h1>long long</h1><p>long long则不同，long long是C++的64位整型的基本类型，“现任”长整型，从C99开始引入这个概念，在后续的标准中完善概念和定义，C++11官方正式标准如下——</p><blockquote><p><strong>long long</strong> - target type will have width of at least 64 bits.(since C++11)</p></blockquote><p>long long占用8个字节，数据表示范围也从int的[ − 2 31 , 2 31 − 1 ] [-2^{31},2^{31}-1][−231,231−1]，升级到[ − 2 63 , 2 63 − 1 ] [-2^{63},2^{63}-1][−263,263−1]。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> l = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ll = <span class="number">100000000000000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of int:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;size of long long:%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;l = %d\n&quot;</span>,l);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;ll = %lld\n&quot;</span>,ll);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181225103911667.png" alt="在这里插入图片描述" loading="lazy"><br>　　long long是C++的正式标准，这也就意味着，该类型不会因为编译器或者开发平台的不同而有所差异，放之四海而皆准，而且与一些系统函数、类库都有很好的交互（如常见的printf、scanf、cin和cout等）。与之相反，出身MS的__int64就有点不受待见了，在不同的编译器上可能水土不服。</p><h1>__int64</h1><p>在早期的代码中，可能会遇到<code>__int64</code>这种类型，这应该算是“历史遗留”问题。早期的C/C++标准中并没有规定64位长整型的规范，因此不同的编译器对这一模糊概念有不同的定义，我们熟知的VC6.0采用了<code>__int64</code>这种类型来表示64位长整型——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">__int64 i64 = -<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">63</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;__int64:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(__int64)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;i64 = &quot;</span>&lt;&lt;i64&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181225104812530.png" alt="在这里插入图片描述" loading="lazy"><br>　　与long long具有相同的效果，但是，__int64并不是正式规范，比如，如果你使用的是MinGW的编译器的话，打开__int64的定义会发现——<br><img src="https://img-blog.csdnimg.cn/20181225105553149.png" alt="img" loading="lazy"><br>　　VS 2017虽然把__int64作为了一种内置类型，但是也做了类似的处理，使得__int64与long long没有肉眼可见的差别。但如果你使用的开发环境比较早期，那么可能就要专门研究一下__int64了。比如说，古老的VC6.0并没有long long这种类型，而__int64的输入输出，又需要printf和%I64d的配合，而不是%lld或者直接用cout。</p><h1>总结</h1><p>C/C++与Java等语言不同，具有较高的自由度，由于某些历史原因，某些概念在不同的平台上有不同的解释，虽然现在新版本的C++标准和编译器都在做兼容性工作，你可以在__int64与long long之间无缝切换，但至少，我们要清楚两者的不同。</p><table><thead><tr><th>类型</th><th>存储字节</th><th>表示范围</th></tr></thead><tbody><tr><td>int</td><td>4</td><td>-2147483648~2147483647</td></tr><tr><td>short int</td><td>2</td><td>-32768～+32767</td></tr><tr><td>long</td><td>4</td><td>-2147483648~2147483647（二十亿，约1 0 10 10^{10}1010）</td></tr><tr><td>long long</td><td>8</td><td>9223372036854775808～+9223372036854775807(九百亿亿，约1 0 19 10^{19}1019)</td></tr><tr><td>__int64</td><td>8</td><td>9223372036854775808～+9223372036854775807</td></tr></tbody></table><h1>参考链接</h1><p>1.<a href="https://blog.csdn.net/qq_31736627/article/details/52912691">https://blog.csdn.net/qq_31736627/article/details/52912691</a><br>2.<a href="https://en.cppreference.com/w/cpp/language/types">https://en.cppreference.com/w/cpp/language/types</a><br>3.<a href="https://www.cnblogs.com/ChenDinghao/p/6480937.html">https://www.cnblogs.com/ChenDinghao/p/6480937.html</a><br>4.<a href="https://blog.csdn.net/sk18192449347/article/details/55000087">https://blog.csdn.net/sk18192449347/article/details/55000087</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <summary type="html">&lt;center&gt;   &lt;/center&gt;
&lt;h1&gt;long int&lt;/h1&gt;
&lt;p&gt;long int即long，给人的感觉好像是长整型，但实际上，它和int一样，只有32位。cppreference给出的定义是——&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;int&lt;/strong&gt; - basic integer type. The keyword int may be omitted if any of the modifiers listed below are used. If no length modifiers are present, it’s guaranteed to have a width of at least 16 bits. However, on 32/64 bit systems it is almost exclusively guaranteed to have width of at least 32 bits.&lt;br&gt;
&lt;strong&gt;long&lt;/strong&gt; - target type will have width of at least 32 bits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在实际的使用中，long与int几乎没有区别，比如——&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;size of long:%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;size of int:%d\n&amp;quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;l = %d\n&amp;quot;&lt;/span&gt;,l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;i = %d\n&amp;quot;&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1234567891011&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2018122510141490.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
　　既然long int与int相同，那么为什么还有long int这种尴尬的类型呢？&lt;br&gt;
　　原因是早期的C编译器定义了long int占用4个字节，int占用2个字节，long int是名副其实的&lt;strong&gt;长整型&lt;/strong&gt;。在ANSI C的标准中，对长整型的定义也是&lt;strong&gt;long int应该至少和int一样长&lt;/strong&gt;，而不是long int 一定要比int占用存储字节长。新版的C/C++标准兼容了早期的这一设定。&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="https://www.darkfox.top/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言数据类型" scheme="https://www.darkfox.top/tags/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
