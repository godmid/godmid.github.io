<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冥狐的小站</title>
  
  <subtitle>如无必要，勿增实体</subtitle>
  <link href="https://www.darkfox.top/atom.xml" rel="self"/>
  
  <link href="https://www.darkfox.top/"/>
  <updated>2021-05-10T07:57:30.637Z</updated>
  <id>https://www.darkfox.top/</id>
  
  <author>
    <name>DarkFox</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用泰勒级数展开</title>
    <link href="https://www.darkfox.top/posts/dbe2b6d3/"/>
    <id>https://www.darkfox.top/posts/dbe2b6d3/</id>
    <published>2021-05-09T13:59:07.000Z</published>
    <updated>2021-05-10T07:57:30.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><div class="row">    <embed src="https://pic-1304932877.cos.ap-shanghai.myqcloud.com/10%E4%B8%AA%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B3%B0%E5%8B%92%E7%BA%A7%E6%95%B0%E5%B1%95%E5%BC%80%E5%85%AC%E5%BC%8Fcommontaylorseries.pdf" width="100%" height="550" type="application/pdf"></div><span id="more"></span> ]]></content>
    
    
    <summary type="html">常用的泰勒级数展开（学习用）</summary>
    
    
    
    <category term="数学" scheme="https://www.darkfox.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数学" scheme="https://www.darkfox.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>柯西积分公式</title>
    <link href="https://www.darkfox.top/posts/29abfbc/"/>
    <id>https://www.darkfox.top/posts/29abfbc/</id>
    <published>2021-05-09T03:16:01.000Z</published>
    <updated>2021-05-09T03:18:01.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><iframe id="b" class="b video_pc"         src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1uA411j7jA?from=search&seid=8534947394227717108" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe><span id="more"></span>]]></content>
    
    
    <summary type="html">这个老师讲的很太透彻了，还有小技巧也很实用</summary>
    
    
    
    <category term="数学" scheme="https://www.darkfox.top/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数学" scheme="https://www.darkfox.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="复变函数" scheme="https://www.darkfox.top/tags/%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ad常用元器件等</title>
    <link href="https://www.darkfox.top/posts/ed712c4d/"/>
    <id>https://www.darkfox.top/posts/ed712c4d/</id>
    <published>2021-05-06T03:25:26.000Z</published>
    <updated>2021-05-07T13:51:56.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  我从网络上找到了一些常用的元器件的名称，在此分享给大家 </center><span id="more"></span><p>原理图常用库文件：<br>Miscellaneous Devices.ddb<br>Dallas Microprocessor .ddb<br>Intel Databooks.ddb<br>Protel DOS Schematic Libraries.ddb<br>PCB 元件常用库：<br>Advpcb.ddb<br>General IC.ddb<br>Miscellaneous.ddb<br>部分 分立元件库元件名称及中英对照<br>AND 与门<br>ANTENNA 天线<br>BATTERY 直流电源<br>BELL 铃,钟<br>BVC 同轴电缆接插件<br>BRIDEG 1 整流桥 (二极管 )<br>BRIDEG 2 整流桥 (集成块 )<br>BUFFER 缓冲器<br>BUZZER 蜂鸣器<br>CAP 电容<br>CAPACITOR 电容<br>CAPACITOR POL 有极性电容<br>CAPVAR 可调电容<br>CIRCUIT BREAKER 熔断丝<br>COAX 同轴电缆<br>CON 插口<br>CRYSTAL 晶体整荡器<br>DB 并行插口<br>DIODE 二极管<br>DIODE SCHOTTKY 稳压二极管<br>DIODE VARACTOR 变容二极管<br>DPY_3-SEG 3 段 LED<br>DPY_7-SEG 7 段 LED<br>DPY_7-SEG_DP 7 段 LED(带小数点 )<br>ELECTRO 电解电容<br>FUSE 熔断器<br>INDUCTOR 电感<br>INDUCTOR IRON 带铁芯电感<br>INDUCTOR3 可调电感<br>JFET N N 沟道场效应管<br>JFET P P 沟道场效应管<br>LAMP 灯泡<br>LAMP NEDN 起辉器<br>LED 发光二极管<br>METER 仪表<br>MICROPHONE 麦克风<br>MOSFET MOS 管<br>MOTOR AC 交流电机<br>MOTOR SERVO 伺服电机<br>NAND 与非门<br>NOR 或非门<br>NOT 非门<br>NPN NPN 三极管<br>NPN-PHOTO 感光三极管<br>OPAMP 运放<br>OR 或门<br>PHOTO 感光二极管<br>PNP 三极管<br>NPN DAR NPN 三极管<br>PNP DAR PNP 三极管<br>POT 滑线变阻器<br>PELAY-DPDT 双刀双掷继电器<br>RES1.2 电阻<br>RES3.4 可变电阻<br>RESISTOR BRIDGE ? 桥式电阻<br>RESPACK ? 电阻<br>SCR 晶闸管<br>PLUG ? 插头<br>PLUG AC FEMALE 三相交流插头<br>SOCKET ? 插座<br>SOURCE CURRENT 电流源<br>SOURCE VOLTAGE 电压源<br>SPEAKER 扬声器<br>SW ? 开关<br>SW-DPDY ? 双刀双掷开关<br>SW-SPST ? 单刀单掷开关<br>SW-PB 按钮<br>THERMISTOR 电热调节器<br>TRANS1 变压器<br>TRANS2 可调变压器<br>TRIAC ? 三端双向可控硅<br>TRIODE ? 三极真空管<br>VARISTOR 变阻器<br>ZENER ? 齐纳二极管<br>DPY_7-SEG_DP 数码管<br>SW-PB 开关<br>74系列：<br>74LS00 TTL 2 输入端四与非门<br>74LS01 TTL 集电极开路 2输入端四与非门<br>74LS02 TTL 2 输入端四或非门<br>74LS03 TTL 集电极开路 2输入端四与非门<br>74LS122 TTL 可再触发单稳态多谐振荡器<br>74LS123 TTL 双可再触发单稳态多谐振荡器<br>74LS125 TTL 三态输出高有效四总线缓冲门<br>74LS126 TTL 三态输出低有效四总线缓冲门<br>74LS13 TTL 4 输入端双与非施密特触发器<br>74LS132 TTL 2 输入端四与非施密特触发器<br>74LS133 TTL 13 输入端与非门<br>74LS136 TTL 四异或门<br>74LS138 TTL 3-8 线译码器 / 复工器<br>74LS139 TTL 双 2-4线译码器 /复工器<br>74LS14 TTL 六反相施密特触发器<br>74LS145 TTL BCD — 十进制译码 / 驱动器<br>74LS15 TTL 开路输出 3输入端三与门<br>74LS150 TTL 16 选 1数据选择 /多路开关<br>74LS151 TTL 8 选1数据选择器<br>74LS153 TTL 双 4选1数据选择器<br>74LS154 TTL 4 线—16线译码器<br>74LS155 TTL 图腾柱输出译码器 /分配器<br>74LS156 TTL 开路输出译码器 / 分配器<br>74LS157 TTL 同相输出四 2选1数据选择器<br>74LS158 TTL 反相输出四 2选1数据选择器<br>74LS16 TTL 开路输出六反相缓冲 / 驱动器<br>74LS160 TTL 可预置 BCD 异步清除计数器<br>74LS161 TTL 可予制四位二进制异步清除计数器<br>74LS162 TTL 可预置 BCD 同步清除计数器<br>74LS163 TTL 可予制四位二进制同步清除计数器<br>74LS164 TTL 八位串行入 / 并行输出移位寄存器<br>74LS165 TTL 八位并行入 / 串行输出移位寄存器<br>74LS166 TTL 八位并入 / 串出移位寄存器<br>74LS169 TTL 二进制四位加 / 减同步计数器<br>74LS17 TTL 开路输出六同相缓冲 / 驱动器<br>74LS170 TTL 开路输出 4×4寄存器堆<br>74LS173 TTL 三态输出四位 D 型寄存器<br>74LS174 TTL 带公共时钟和复位六 D 触发器<br>74LS175 TTL 带公共时钟和复位四 D 触发器<br>74LS180 TTL 9 位奇数 / 偶数发生器 / 校验器<br>74LS181 TTL 算术逻辑单元 / 函数发生器<br>74LS185 TTL 二进制 —BCD 代码转换器<br>74LS190 TTL BCD 同步加 / 减计数器<br>74LS191 TTL 二进制同步可逆计数器<br>74LS192 TTL 可预置 BCD 双时钟可逆计数器<br>74LS193 TTL 可预置四位二进制双时钟可逆计数器<br>74LS194 TTL 四位双向通用移位寄存器<br>74LS195 TTL 四位并行通道移位寄存器<br>74LS196 TTL 十进制 /二-十进制可预置计数锁存器<br>74LS197 TTL 二进制可预置锁存器 /计数器<br>74LS20 TTL 4 输入端双与非门<br>74LS21 TTL 4 输入端双与门<br>74LS22 TTL 开路输出 4输入端双与非门<br>74LS221 TTL 双 /单稳态多谐振荡器<br>74LS240 TTL 八反相三态缓冲器 /线驱动器<br>74LS241 TTL 八同相三态缓冲器 /线驱动器<br>74LS243 TTL 四同相三态总线收发器<br>74LS244 TTL 八同相三态缓冲器 /线驱动器<br>74LS245 TTL 八同相三态总线收发器<br>74LS247 TTL BCD — 7段15V 输出译码 / 驱动器<br>74LS248 TTL BCD — 7段译码 /升压输出驱动器<br>74LS249 TTL BCD — 7段译码 /开路输出驱动器<br>74LS251 TTL 三态输出 8选1数据选择器 / 复工器<br>74LS253 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS256 TTL 双四位可寻址锁存器<br>74LS257 TTL 三态原码四 2选1数据选择器 / 复工器<br>74LS258 TTL 三态反码四 2选1数据选择器 / 复工器<br>74LS259 TTL 八位可寻址锁存器 /3-8 线译码器<br>74LS26 TTL 2 输入端高压接口四与非门<br>74LS260 TTL 5 输入端双或非门<br>74LS266 TTL 2 输入端四异或非门<br>74LS27 TTL 3 输入端三或非门<br>74LS273 TTL 带公共时钟复位八 D 触发器<br>74LS279 TTL 四图腾柱输出 S-R 锁存器<br>74LS28 TTL 2 输入端四或非门缓冲器<br>74LS283 TTL 4 位二进制全加器<br>74LS290 TTL 二 /五分频十进制计数器<br>74LS293 TTL 二 /八分频四位二进制计数器<br>74LS295 TTL 四位双向通用移位寄存器<br>74LS298 TTL 四 2输入多路带存贮开关<br>74LS299 TTL 三态输出八位通用移位寄存器<br>74LS30 TTL 8 输入端与非门<br>74LS32 TTL 2 输入端四或门<br>74LS322 TTL 带符号扩展端八位移位寄存器<br>74LS323 TTL 三态输出八位双向移位 /存贮寄存器<br>74LS33 TTL 开路输出 2输入端四或非缓冲器<br>74LS347 TTL BCD — 7段译码器 / 驱动器<br>74LS352 TTL 双 4选1数据选择器 /复工器<br>74LS353 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS366 TTL 门使能输入三态输出六反相线驱动器<br>74LS367 TTL 4/2 线使能输入三态六同相线驱动器<br>74LS368 TTL 4/2 线使能输入三态六反相线驱动器<br>74LS37 TTL 开路输出 2输入端四与非缓冲器<br>74LS373 TTL 三态同相八 D 锁存器<br>74LS374 TTL 三态反相八 D 锁存器<br>74LS375 TTL 4 位双稳态锁存器<br>74LS377 TTL 单边输出公共使能八 D 锁存器<br>74LS378 TTL 单边输出公共使能六 D 锁存器<br>74LS379 TTL 双边输出公共使能四 D 锁存器<br>74LS38 TTL 开路输出 2输入端四与非缓冲器<br>74LS380 TTL 多功能八进制寄存器<br>74LS39 TTL 开路输出 2输入端四与非缓冲器<br>74LS390 TTL 双十进制计数器<br>74LS393 TTL 双四位二进制计数器<br>74LS40 TTL 4 输入端双与非缓冲器<br>74LS42 TTL BCD —十进制代码转换器<br>74LS352 TTL 双 4选1数据选择器 /复工器<br>74LS353 TTL 三态输出双 4选1数据选择器 / 复工器<br>74LS365 TTL 门使能输入三态输出六同相线驱动器<br>74LS366 TTL 门使能输入三态输出六反相线驱动器<br>74LS367 TTL 4/2 线使能输入三态六同相线驱动器<br>74LS368 TTL 4/2 线使能输入三态六反相线驱动器<br>74LS37 TTL 开路输出 2输入端四与非缓冲器<br>74LS373 TTL 三态同相八 D 锁存器<br>74LS374 TTL 三态反相八 D 锁存器<br>74LS375 TTL 4 位双稳态锁存器<br>74LS377 TTL 单边输出公共使能八 D 锁存器<br>74LS378 TTL 单边输出公共使能六 D 锁存器<br>74LS379 TTL 双边输出公共使能四 D 锁存器<br>74LS38 TTL 开路输出 2输入端四与非缓冲器<br>74LS380 TTL 多功能八进制寄存器<br>74LS39 TTL 开路输出 2输入端四与非缓冲器<br>74LS390 TTL 双十进制计数器<br>74LS393 TTL 双四位二进制计数器<br>74LS40 TTL 4 输入端双与非缓冲器<br>74LS42 TTL BCD —十进制代码转换器<br>74LS447 TTL BCD — 7段译码器 / 驱动器<br>74LS45 TTL BCD —十进制代码转换 /驱动器<br>74LS450 TTL 16:1 多路转接复用器多工器<br>74LS451 TTL 双 8:1 多路转接复用器多工器<br>74LS453 TTL 四 4:1 多路转接复用器多工器<br>74LS46 TTL BCD —7段低有效译码 / 驱动器<br>74LS460 TTL 十位比较器<br>74LS461 TTL 八进制计数器<br>74LS465 TTL 三态同相 2与使能端八总线缓冲器<br>74LS466 TTL 三态反相 2与使能八总线缓冲器<br>74LS467 TTL 三态同相 2使能端八总线缓冲器<br>74LS468 TTL 三态反相 2使能端八总线缓冲器<br>74LS469 TTL 八位双向计数器<br>74LS47 TTL BCD —7段高有效译码 / 驱动器<br>74LS48 TTL BCD —7段译码器 / 内部上拉输出驱动<br>74LS490 TTL 双十进制计数器<br>74LS491 TTL 十位计数器<br>74LS498 TTL 八进制移位寄存器<br>74LS50 TTL 2-3/2-2 输入端双与或非门<br>74LS502 TTL 八位逐次逼近寄存器<br>74LS503 TTL 八位逐次逼近寄存器<br>74LS51 TTL 2-3/2-2 输入端双与或非门<br>74LS533 TTL 三态反相八 D 锁存器<br>74LS534 TTL 三态反相八 D 锁存器<br>74LS54 TTL 四路输入与或非门<br>74LS540 TTL 八位三态反相输出总线缓冲器<br>74LS55 TTL 4 输入端二路输入与或非门<br>74LS563 TTL 八位三态反相输出触发器<br>74LS564 TTL 八位三态反相输出 D 触发器<br>74LS573 TTL 八位三态输出触发器<br>74LS574 TTL 八位三态输出 D 触发器<br>74LS645 TTL 三态输出八同相总线传送接收器<br>74LS670 TTL 三态输出 4×4寄存器堆<br>74LS73 TTL 带清除负触发双 J-K 触发器<br>74LS74 TTL 带置位复位正触发双 D 触发器<br>74LS76 TTL 带预置清除双 J-K 触发器<br>74LS83 TTL 四位二进制快速进位全加器<br>74LS85 TTL 四位数字比较器<br>74LS86 TTL 2 输入端四异或门<br>74LS90 TTL 可二 / 五分频十进制计数器<br>74LS93 TTL 可二 / 八分频二进制计数器<br>74LS95 TTL 四位并行输入 输出移位寄存器<br>74LS97 TTL 6 位同步二进制乘法器<br>CD 系列： ：<br>CD4000 双3输入端或非门 +单非门 TI<br>CD4001 四2输入端或非门 HIT/NSC/TI/GOL<br>CD4002 双4输入端或非门 NSC<br>CD4006 18 位串入 / 串出移位寄存器              | NSC        |<br>CD4007 双互补对加反相器                        | NSC        |<br>CD4008 4 位超前进位全加器                      | NSC        |<br>CD4009 六反相缓冲 /变换器                      | NSC        |<br>CD4010 六同相缓冲 /变换器                      | NSC        |<br>CD4011 四2输入端与非门  CD4012 双4输入端与非门 | HIT/TI NSC |<br>CD4013 双主 -从 D 型触发器 FSC/NSC/TOS<br>CD4014 8 位串入 /并入 -串出移位寄存器 NSC<br>CD4015 双4位串入 / 并出移位寄存器 TI<br>CD4016 四传输门 FSC/TI<br>CD4017 十进制计数 /分配器 FSC/TI/MOT<br>CD4018 可预制 1/N 计数器 NSC/MOT<br>CD4019 四与或选择器 PHI<br>CD4020 14 级串行二进制计数 /分频器 FSC<br>CD4021 08 位串入 / 并入 -串出移位寄存器  CD4022 八进制计数 /分配器 NSC/MOT | PHI/NSC    |<br>CD4023 三3输入端与非门                                       | NSC/MOT/TI |<br>CD4024 7 级二进制串行计数 / 分频器 NSC/MOT/TI<br>CD4025 三3输入端或非门                                       | NSC/MOT/TI |<br>CD4026 十进制计数 /7 段译码器 NSC/MOT/TI<br>CD4027 双 J-K 触发器 NSC/MOT/TI<br>CD4028 BCD 码十进制译码器                                    | NSC/MOT/TI |<br>CD4029 可预置可逆计数器                                      | NSC/MOT/TI |<br>CD4030 四异或门 NSC/MOT/TI/GOL<br>CD4031 64 位串入 / 串出移位存储器  CD4032 三串行加法器 NSC/TI | NSC/MOT/TI |<br>CD4033 十进制计数 /7 段译码器 NSC/TI<br>CD4034 8 位通用总线寄存器                                    | NSC/MOT/TI |<br>CD4035 4 位并入 /串入 -并出 / 串出移位寄存 NSC/MOT/TI<br>CD4038 三串行加法器 NSC/TI<br>CD4040 12 级二进制串行计数 /分频器 NSC/MOT/TI<br>CD4041 四同相 / 反相缓冲器 NSC/MOT/TI<br>CD4042 四锁存 D 型触发器 NSC/MOT/TI<br>CD4043 4 三态 R-S 锁存触发器 (“1” 触发 ) NSC/MOT/TI<br>CD4044 四三态 R-S 锁存触发器 (“0” 触发 ) NSC/MOT/TI<br>CD4046 锁相环 NSC/MOT/TI/PHI<br>CD4047 无稳态 / 单稳态多谐振荡器  CD4048 4 输入端可扩展多功能门 | NSC/MOT/TI NSC/HIT/TI |<br>CD4049 六反相缓冲 /变换器 NSC/HIT/TI CD4050 六同相缓冲 /变换器 NSC/MOT/TI<br>CD4051 八选一模拟开关                                             NSC/MOT/TI<br>CD4052 双4选1模拟开关 NSC/MOT/TI<br>CD4053 三组二路模拟开关                                       NSC/MOT/TI<br>CD4054 液晶显示驱动器                                           NSC/HIT/TI<br>CD4055 BCD-7 段译码 / 液晶驱动器 NSC/HIT/TI<br>CD4056 液晶显示驱动器                                        | NSC/HIT/TI |<br>CD4059 “N”分频计数器 NSC/TI CD4060 14 级二进制串行计数 /分频器 NSC/TI/MOT |<br>CD4063 四位数字比较器                                        | NSC/HIT/TI |<br>CD4066 四传输门 NSC/TI/MOT<br>CD4067 16 选1模拟开关 NSC/TI<br>CD4068 八输入端与非门 /与门 NSC/HIT/TI<br>CD4069 六反相器 NSC/HIT/TI<br>CD4070 四异或门 NSC/HIT/TI<br>CD4071 四2输入端或门 NSC/TI<br>CD4072 双4输入端或门 NSC/TI<br>CD4073 三3输入端与门 NSC/TI<br>CD4075 三3输入端或门 NSC/TI<br>CD4076 四 D 寄存器<br>CD4077 四2输入端异或非门 HIT<br>CD4078 8 输入端或非门 / 或门<br>CD4081 四2输入端与门 NSC/HIT/TI<br>CD4082 双4输入端与门 NSC/HIT/TI<br>CD4085 双2路2输入端与或非门<br>CD4086 四2输入端可扩展与或非门<br>CD4089 二进制比例乘法器<br>CD4093 四2输入端施密特触发器  CD4094 8 位移位存储总线寄存器  CD4095 3 输入端 J-K 触发器 CD4096 3 输入端 J-K 触发器 CD4097 双路八选一模拟开关 | NSC/MOT/ST NSC/TI/PHI |<br>CD4098 双单稳态触发器                                        | NSC/MOT/TI<br>CD4099 8 位可寻址锁存器 NSC/MOT/ST<br>CD40100 32 位左 / 右移位寄存器<br>CD40101 9 位奇偶较验器<br>CD40102 8 位可预置同步 BCD 减法计数器<br>CD40103 8 位可预置同步二进制减法计数器<br>CD40104 4 位双向移位寄存器<br>CD40105 先入先出 FI-FD 寄存器<br>CD40106 六施密特触发器 NSC\TI<br>CD40107 双2输入端与非缓冲 / 驱动器 HAR\TI<br>CD40108 4 字×4位多通道寄存器<br>CD40109 四低 -高电平位移器 CD4529 双四路 / 单八路模拟开关<br>CD4530 双5输入端优势逻辑门<br>CD4531 12 位奇偶校验器<br>CD4532 8 位优先编码器<br>CD4536 可编程定时器<br>CD4538 精密双单稳<br>CD4539 双四路数据选择器<br>CD4541 可编程序振荡<br>CD4543 BCD 七段锁存译码 ,驱动器<br>CD4544 BCD 七段锁存译码 ,驱动器<br>CD4547 BCD 七段译码 /大电流驱动器<br>CD4549 函数近似寄存器<br>CD4551 四2通道模拟开关<br>CD4553 三位 BCD 计数器<br>CD4555 双二进制四选一译码器 /分离器<br>CD4556 双二进制四选一译码器 /分离器<br>CD4558 BCD 八段译码器<br>CD4560 &quot;N&quot;BCD 加法器<br>CD4561 “9” 求补器<br>CD4573 四可编程运算放大器<br>CD4574 四可编程电压比较器<br>CD4575 双可编程运放 /比较器<br>CD4583 双施密特触发器<br>CD4584 六施密特触发器<br>CD4585 4 位数值比较器<br>CD4599 8 位可寻址锁存器<br>CD40110 十进制加 / 减,计数 ,锁存 ,译码驱动 ST<br>CD40147 10-4 线编码器 NSC\MOT<br>CD40160 可预置 BCD 加计数器 NSC\MOT<br>CD40161 可预置 4位二进制加计数器 NSC\MOT<br>CD40162 BCD 加法计数器 NSC\MOT<br>CD40163 4 位二进制同步计数器 NSC\MOT<br>CD40174 六锁存 D 型触发器 NSC\TI\MOT<br>CD40175 四 D 型触发器 NSC\TI\MOT<br>CD40181 4 位算术逻辑单元 /函数发生器<br>CD40182 超前位发生器<br>CD40192 可预置 BCD 加/减计数器 (双时钟 ) NSC\TI<br>CD40193 可预置 4位二进制加 / 减计数器 NSC\TI<br>CD40194 4 位并入 / 串入 -并出 /串出移位寄存 NSC\MOT<br>CD40195 4 位并入 / 串入 -并出 /串出移位寄存 NSC\MOT<br>CD40208 4 ×4多端口寄存器<br>型号 器件名称 厂牌 备注<br>CD4501 4 输入端双与门及 2输入端或非门<br>CD4502 可选通三态输出六反相 /缓冲器<br>CD4503 六同相三态缓冲器<br>CD4504 六电压转换器<br>CD4506 双二组 2输入可扩展或非门<br>CD4508 双4位锁存 D 型触发器<br>CD4510 可预置 BCD 码加 / 减计数器<br>CD4511 BCD 锁存 ,7段译码 ,驱动器<br>CD4512 八路数据选择器<br>CD4513 BCD 锁存 ,7段译码 ,驱动器 (消隐 )<br>CD4514 4 位锁存 ,4线-16线译码器<br>CD4515 4 位锁存 ,4线-16线译码器<br>CD4516 可预置 4位二进制加 /减计数器<br>CD4517 双64位静态移位寄存器<br>CD4518 双 BCD 同步加计数器<br>CD4519 四位与或选择器<br>CD4520 双4位二进制同步加计数器<br>CD4521 24 级分频器<br>CD4522 可预置 BCD 同步 1/N 计数器<br>CD4526 可预置 4位二进制同步 1/N 计数器<br>CD4527 BCD 比例乘法器<br>CD4528 双单稳态触发器</p>]]></content>
    
    
    <summary type="html">本文仅作为学习用途</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一个简单的总结</title>
    <link href="https://www.darkfox.top/posts/10b2113f/"/>
    <id>https://www.darkfox.top/posts/10b2113f/</id>
    <published>2021-05-05T07:41:22.000Z</published>
    <updated>2021-05-05T07:42:15.131Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span>]]></content>
    
    
    <summary type="html">一个简单的小总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>造一台3d打印机</title>
    <link href="https://www.darkfox.top/posts/73179b3b/"/>
    <id>https://www.darkfox.top/posts/73179b3b/</id>
    <published>2021-05-04T14:26:34.000Z</published>
    <updated>2021-05-04T14:32:43.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p><img src="https://i.loli.net/2021/05/04/uHOrZKTNejoln39.jpg" alt="" loading="lazy"></p>]]></content>
    
    
    <summary type="html">3d打印机可能会遇到的问题，先放在这了</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>你被骗了</title>
    <link href="https://www.darkfox.top/posts/be7a8f00/"/>
    <id>https://www.darkfox.top/posts/be7a8f00/</id>
    <published>2021-05-02T12:48:00.000Z</published>
    <updated>2021-05-02T13:00:41.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://i.loli.net/2021/05/02/IwlFh6zyjBGPYr8.png" alt="" loading="lazy"></p><span id="more"></span><iframe id="b" class="b video_pc" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=https://www.bilibili.com/video/BV1GJ411x7h7/?spm_id_from=333.788.recommend_more_video.-1" frameborder="0"framespacing="0"allowfullscreen="true"style="position: middle;width="100%" height="600" controls="controls" autoplay="autoplay"quality="high"></video>></iframe>]]></content>
    
    
    <summary type="html">你被骗了（(*^_^*)）</summary>
    
    
    
    <category term="fun" scheme="https://www.darkfox.top/categories/fun/"/>
    
    
    <category term="fun" scheme="https://www.darkfox.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>妈的笑死</title>
    <link href="https://www.darkfox.top/posts/8aa8da4d/"/>
    <id>https://www.darkfox.top/posts/8aa8da4d/</id>
    <published>2021-04-30T03:36:18.000Z</published>
    <updated>2021-04-30T03:37:13.295Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://i.loli.net/2021/04/30/3ZnibkYwHs7hLBD.jpg" alt="V2`UI6U4C0Q~4H0L08%8GI4" loading="lazy"></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/30/3ZnibkYwHs7hLBD.jpg&quot; alt=&quot;V2`UI6U4C0Q~4H0L08%8GI4&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>微机原理填空</title>
    <link href="https://www.darkfox.top/posts/2908f2ad/"/>
    <id>https://www.darkfox.top/posts/2908f2ad/</id>
    <published>2021-04-28T13:12:00.000Z</published>
    <updated>2021-04-28T13:13:59.087Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>《微型计算机原理》试题库及答案</p><p>一、 填空<br>1.数制转换</p><p>​    A）125D=（ 11111101 ）B =（ 375 ）O=（ 0FD  ）H=（0001 0010 0101 ）BCD</p><p>B）10110110B=（ 182 ）D =（ 266 ）O=（ 0B6  ）H=（0001 1000 0010 ）BCD</p><p>2.下述机器数形式可表示的数值范围是(请用十进制形式写出):单字节无符号整数0~255；单字节有符号整数-128~+127。</p><p>注：微型计算机的有符号整数机器码采用补码表示，单字节有符号整数的范围为-128~+127。</p><p>3.完成下列各式补码式的运算，并根据计算结果设置标志位SF、ZF、CF、OF。指出运算结果有效否。</p><p>A）00101101+10011100=</p><p>B）11011101+10110011=</p><p>4.十六进制数2B．4Ｈ转换为二进制数是__00101011.0100，转换为十进制数是__43.25____。</p><p>5.在浮点加法运算中，在尾数求和之前，一般需要（对阶）操作，求和之后还需要进行（规格化）和舍入等步骤。</p><p>6.三态门有三种输出状态：高电平、低电平、（高阻）状态。</p><p>7.字符“A”的ASCII码为41H，因而字符“E”的ASCII码为（45H），前面加上偶校验位后代码为（C5）H。</p><p>8.数在计算机中的二进制表示形式称为（机器数）。</p><p>9.在计算机中，无符号书最常用于表示（地址）。</p><p>10.正数的反码与原码（相等）。</p><p>11.在计算机中浮点数的表示形式有（阶码）和（尾码）两部分组成。</p><p>12.微处理器中对每个字所包含的二进制位数叫（字长）。</p><p>13.MISP是微处理的主要指标之一，它表示微处理器在1秒钟内可执行多少（百万条指令）</p><p>14.PC机主存储器状基本存储单元的长度是（字节）.</p><p>15.一台计算机所用的二进制代码的位数称为___字长_________，8位二进制数称为__ <strong>字节</strong>____。</p><p>16.微型计算机由（微处理器）、（存储器）和（I/O接口电路）组成。</p><p>17.8086CPU寄存器中负责与I/O端口交换数据的寄存器为（AX,AL）</p><p>18.总线有数据总线、地址总线、控制总线组成，数据总线是从微处理器向内存储器、I/O接口传送数据的通路；反之，它也是从内存储器、I/O接口向微处理器传送数据的通路，因而它可以在两个方向上往返传送数据，称为（双向总线）。</p><p>19.一个微机系统所具有的物理地址空间是由(地址线的条数)决定的，8086系统的物理地址空间为（1M）字节。</p><p>20.运算器包括算术逻辑部件（ALU），用来对数据进行算术、逻辑运算，运算结果的一些特征由（标志寄存器）存储。</p><p>21.控制寄存器包括指令寄存器、指令译码器以及定时与控制电路。根据（指令译码）的结果，以一定的时序发出相应的控制信号，用来控制指令的执行。</p><p>22.根据功能不同，8086的标志为可分为（控制）标志和（状态）标志位。</p><p>23.8086/8088CPU内部有（14）个（16位）的寄存器。</p><p>24.在8086/8088的16位寄存器中，有（4）各寄存器可拆分为8位寄存器使用。他们是（AX,BX,CX,DX）,他们又被称为（通用寄存器）。</p><p>25.8086/8088构成的微机中，每个主存单元对应两种地址（物理地址）和（逻辑地址）。</p><p>26.物理地址是指实际的（20）为主存储单元地址，每个存储单元对应唯一的物理地址，其范围是（00000H-FFFFFH）。</p><p>27.8088的ALE引脚的作用是（锁存复用线上的地址）。</p><p>28.在8088读存储器周期中，采样Ready线的目的是（确定是否在T3周期后插入Tw周期）。</p><p>29.8088在访问4个当前段时，代码段、数据段及堆栈段的偏移量分别由（IP）、（由寻址方式决定的16位偏移量）和（SP）提供。</p><p>30.堆栈按照___先进后出___原则工作，使用____堆栈指针___指明栈顶位置。</p><p>31.在IBM－PC/XT中，外设是通过（8259）器件对CPU产生中断请求。这些中断的中断类型码为（08H—OFH）。</p><p>32.8086最多能处理（256）种中断。</p><p>33.8086/8088的中断响应了两个总线周期，从（INTA）引脚输出两个负脉冲，第一个总线周期完成，（通知I/O接口，CPU已响应外部中断请求，使被响应的I/O接口把自己的中断类型号送到数据总线的低8位D0-D7上），第二个总线周期完成（通过CPU的地址/数据引脚AD0-AD7将信号传输给CPU）</p><p>34.8088中的指令INT n用（n）指定中断类型。</p><p>35.一片8255A端口A有（3）种工作方式，端口B有（2）种工作方式。</p><p>36.宏汇编语言程序被汇编时，指令语句产生代码指令，伪指令语句不产生代码指令，宏指令 语句可能产生也可能不产生代码指令。</p><p>37.调用程序、子程序传送参数的方法通常有寄存器、内存和堆栈三种方法。</p><p>38.伪指令EQU、DB、DW、MACRO的标号名字域必须有名字或标号的伪指令为EQU、MACRO。</p><p>39.虽在本模块无定义，却可以被单独引用的名字或标号，必须用EXTRN伪指令给以说明。</p><p>40.PENTIUM的工作模式有实模式、保护模式、虚拟8086模式。</p><p>42.乘法指令MUL的指令格式只有一个源操作数，若源操作数的类型属性为字节，则目的操作数在AX中，若源操作数的类型属性为字，则目的操作数在DX:AX中。</p><p>注：将题中的目的操作数改为乘积更确切一些。</p><p>43.请给出标志寄存器中标志位OF、IF、SF、ZF、PF、CF的说明: OF 溢出、IF 中断、SF 符号、ZF 零、PF 奇偶、CF 进位。</p><p>44.堆栈是按照先进后出原则组织的一片连续的存储区域。</p><p>45.变址寻址的有效地址是变址寄存器的内容与地址位移量代数和。</p><p>46.指令XLAT通常用于查表操作，在使用该指令前，应把表首的偏移首地址送入BX，待转换的代码在表中的序号送AL。</p><p>47.若要求不产生汇编错误，则字符串’ABC’只能出现在伪指令DB中。</p><p>48.实模式下，对于指令 MOV AX，DS：[BX]</p><p>执行前DS=1000H，BX=11H，</p><p>则操作数DS：[BX]的有效地址为0011H。</p><p>注：有效地址指段内的偏移量。</p><p>49.为下述情况各举一例。</p><p>⑴寄存器与存储单元内容相加送寄存器ADD AL, [BX]。</p><p>⑵寄存器互送MOV AX, BX。</p><p>⑶将标志寄存器进栈PUSHF。</p><p>⑷立即数与寄存器内容相加送寄存器ADD AX, 1234H。</p><p>⑸将48H、5AH存入字节数据区ARRAYB ARRAYB DB 48H , 5AH。</p><p>一、单项选择题</p><p>\1. CPU包括（ C ）两部分。</p><p>A、ALU和累加器  B、ALU和控制器  C、运算器和控制器   D、ALU和主存储器</p><p>\2. 财务会计方面的计算机应用属于(B )。</p><p>A、科学计算  B、数据处理   C、辅助设计   D、实时控制</p><p>\3. 采用十六进制书写二进制数，位数可以减少到原来的( C  )。</p><p>A、1／2  B、1／3  C、1／4  D、1／5</p><p>\4. 用二一十进制数表示一位十进制数的二进制位是( D )。</p><p>A、1位  B、2位  C、3位  D、4位</p><p>\5. 如果指令中的地址码就是操作数的有效地址，那么这种寻址方式称为(B )。</p><p>A、立即寻址  B、直接寻址  C、间接寻址  D、寄存器寻址</p><p>\6. Cache的主要特点之—是( B)。</p><p>A、存储量大  B、存取速度快  C、价格便宜  D、价格便宜但容量小</p><p>\7. 在主机与外围设备进行数据交换时，为解决两者之间的同步与协调、数据格式转换等问</p><p>题，必须要引入( C )。</p><p>A、数据缓冲寄存器   B、I／O总线   C、I/O接口    D、串并移位器</p><p>\8. 在采用DMA方式的I/O系统中，其基本思想是在以下部件或设备之间建立直接的数据</p><p>通路，这指的是( B )。</p><p>A、CPU与外围设备  B、主存与外围设备  C、外设与外设   D、CPU与主存</p><p>\9. 集成电路计算机属于第（D）代计算机。</p><p>A ．“一”     B ．“二”    C ．“三”     D ．“四”</p><p>\10. 堆栈是一种（B）存贮器。</p><p>A ．顺序   B ．先进后出    C ．只读   D ．先进先出</p><p>\11. 在多级存储体系中，“ cache —主存”结构的作用是解决（D）的问题。</p><p>A ．主存容量不足  B ．主存与辅存速度不匹配 C ．辅存与 CPU 速度不匹配  D ．主存与 CPU 速度不匹配</p><p>\12. 如指令中的地址码就是操作数，那么这种寻址方式称为（A）。</p><p>A ．立即寻址  B ．直接寻址    C ．间接寻址  D ．寄存器寻址</p><p>\13. 数控机床方面的计算机应用属于（B）。</p><p>A ．科学计算   B ．辅助设计   C ．数据处理   D ．实时控制</p><p>\14. 某数在计算机中用 8421BCD 码表示为 0011 1001 1000 ，其真值为（A）。</p><p>A ． 398    B ． 398H    C ． 1630Q    D ． 1110011000B</p><p>\15. 字符的编码，目前在微机中最普遍采用的是(  C )。</p><p>A.BCD码   B.16进制   C.ASCⅡ码   D.格雷码</p><p>\16. 在存储体系中，辅存的作用是（D）</p><p>A.弥补主存的存取速度不足  B.缩短主存的读写周期</p><p>C.减少CPU访问内存的次数  D.弥补主存容量不足的缺陷</p><p>\17. 以下叙述正确的是（C）</p><p>A.ASCII编码可以表示汉字的编码    B.汉字输入编码都是根据字音进行的编码</p><p>C.汉字输入码可以根据汉字字形编码    D.汉字字形码都是将汉字分解成若干“点”组成的点阵</p><p>\18. [x]补=11011100B，则x的真值为（A）</p><p>A.-36D    B.92D    C.-28D    D.5CH</p><p>\19. 计算机软件是指（D）</p><p>A.操作系统    B.汇编程序   C.用户程序    D.所有程序及文档的统称</p><p>\20. 目前微型机系统上广泛使用的机械式鼠标是一种（ A ）</p><p>A.输入设备  B.输出设备   C.输入输出设备   D.显示设备组成之一</p><p>\21. 二进制数1001101B的十进制数表示为（ C ）</p><p>A.4DH      B.95D      C.77D      D.9AD</p><p>\22. 十进制小数转换成十六进制数可采用（ B ）</p><p>A.除基（10）取余法                  B.除基（16）取余法</p><p>C.乘基（10）取整法                  D.乘基（16）取整法</p><p>\23. 家用电脑是指（ D ）</p><p>A.家用电器    B.家庭电影院    C.家庭音响设备     D.家用计算机</p><p>\24. 在8421码表示的二—十进制数中，代码1001表示( C )</p><p>A.3       B.6      C.9       D.1</p><p>\25. 目前普遍使用的微型计算机采用的电路是( D )</p><p>A.电子管      B.晶体管     C.集成电路    D.超大规模集电成路</p><p>\26. 8位定点原码整数10100011B的真值为( B )</p><p>A.+0100011   B. -0100011   C.+1011101   D. -1011101</p><p>\27. 现代计算机通常是将处理程序存放在连续的内存单元中，CPU在执行这个处理程序时，使用一个寄存器来指示程序的执行顺序，这个寄存器为（ D ）。</p><p>A．指令寄存器         B．指令译码器</p><p>C．指令缓冲寄存器       D．指令指针寄存器</p><p>\28. 某计算机字长为16位，其内存容量为1024K字节，按字编址，它的寻址空间为（ D ）。</p><p>A. 512KB      B. 512K     C. 1024KB     D. 1024K</p><p>29.若指令的运算结果不为0且低8位中“1”的个数为偶数，则标志寄存器中ZF和PF的状态为（ B）。</p><p>A. 0，0      B．0，1     C．1，0       D．1，1</p><p>30.指令“MOV AX，[BX+20H]”源操作数的寻址方式为（ C ）。</p><p>A．寄存器寻址 B．寄存器间接寻址  C．寄存器相对寻址 D．以上均不对</p><p>\31. 根据下面定义的数据段：</p><p>DSEG SEGMENT</p><p>​    DAT1 DB <code>1234</code></p><p>​    DAT2 DW 5678H</p><p>​    DAT3 DD  12345678H</p><p>​    ADDR EQU  DAT3-DAT1</p><p>DSEG ENDS</p><p>执行指令MOV AX, ADDR后，AX寄存器中的内容是（ C ）。</p><p>A. 5678H   B. 0008H   C. 0006H    D. 0004H</p><p>32.在8086系统的中断向量表中，若从0000H：005CH单元开始由低地址到高地址依次存放10H、20H、30H和40H四个字节，则相应的中断类型码和中断服务程序的入口地址分别为（A）。</p><p>A．17H，4030H：2010H      B．17H，2010H：4030H</p><p>C．16H，4030H：2010H      D．16H，2010H：4030H</p><p>33.在DMA控制器8237控制下进行“写传送”时，8237需先后向I/O接口和存储器发出的控制信号是（ B  ）。</p><p>A． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img" loading="lazy">     B． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image004.png" alt="img" loading="lazy"></p><p>C． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img" loading="lazy">      D． <img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img" loading="lazy">,<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image009.png" alt="img" loading="lazy"></p><p>34.下面是关于可编程中断控制器8259A的叙述，其中错误的是（ B ）。</p><p>A. 8259A具有优先级管理的功能</p><p>B. 8259A具有辨认中断源的功能</p><p>C. 8259A具有向CPU提供中断向量的功能</p><p>D. 一片8259A可管理8级中断</p><p>\35. CPU和主存之间增设高速缓存（Cache）的主要目的是（ B  ）。</p><p>A. 扩大主存容量       B. 解决CPU和主存之间的速度匹配问题</p><p>C. 提高存储器的可靠性   D. 以上均不对</p><p>\36. 中断向量可提供（ D  ）</p><p>A. 被选中设备的地址     B. 传送数据的起始地址</p><p>C. 主程序的断点地址     D. 中断服务程序的入口地址</p><p>\37. 3片8259A级联，最多可管理（ C   ）级中断。</p><p>A. 24     B. 23    C. 22     D. 21</p><p>\38. 按照USB 1.0 规范，一台主机最多可连接（ D ）个外设装置（含USB集线器—USB Hub）。</p><p>A. 120     B.122    C. 123    D. 127</p><p>三.判断题(你认为正确的，请在题末的括号内打“√”，错的打“×”。</p><p>1、8086的Ready信号是由外部硬件产生的。……………………………（√）<br>2、8088的M/<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png" alt="img" loading="lazy">引脚的低电平表明选通的是I/O接口。……………… （√）<br>3、8086 的数据可以存放在几个不连续的段中。……………………… （√）<br>4、8086 中，取指令和执行指令可以重叠操作。………………………… （√）<br>5、8255 只有三个普通I/O端口，所以它不可作为一个外部中断源去向8086申请中断（×）<br>6、多个外设可以通过一条中断请求线，向CPU发中断请求。……………… （√）<br>7、8253 的每个计数器只能按二进制计数。………………………………（×）<br>8、8253的计数器是对机器的CLK脉冲计数。……………………………（×）<br>9、8086的可屏蔽外部中断源的中断类型号是用软件设置的。…………（×）<br>10、8086的中断入口地址只能放到内存的最低端，即0——3FFH区域。………（√）<br>11、<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image013.png" alt="img" loading="lazy">／<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img" loading="lazy">及HOLD、HLDA信号是与系统中其它总线主设备有关的信号。  （√）</p><p>12.8088的<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img" loading="lazy">信号可用作中断矢量的读选通信号。………（√）<br>13、8088 的可屏蔽中断的优先权高于非屏蔽中断。…………（×）<br>14、8255A中端口A使用的是INTR，<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image016.png" alt="img" loading="lazy">及<img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image017.png" alt="img" loading="lazy">等线是端口C的线。………（√）<br>15、串行异步接口的双向工作方式指的是在串行接口上可同时发送和接收串行数据。…（√）<br>16、EPROM 虽然是只读存储器，但在编程时可向内部写入数据。（√）<br>17、中断服务程序可放在用户可用的内存的任何区域。……（√）<br>18、字长越长，计算机处理数据的速度越快；        （  √ ）</p><p>19.汇编语言是面向机器的语言。                   （ √ ）</p><p>20.任何一个十进制小数都可以用二进制精确表示。 （  ×   ）</p><p>21.计算机的内存与外存都可以直接与CPU交换数据。（  ×  ）</p><p>22.复位影响片内RAM存放的内容。                  （ ×  ）</p><p>23.定时器/计数器溢出中断可以由硬件产生，也可以由软件产生。（  √   ）</p><p>四、简答题<br>1．8086的总线接口部件有哪些功能?由哪几部分组成?请逐一说明。8086的执行部件有什么功能?由哪几部分组成?</p><p>答：8086的总线接口部件的功能是负责完成CPU与存储器或I/O设备之间的数据传送。</p><p>8086的总线接口部件由：4个16位段地址寄存器（DS、DS、SS、ES），16位指令指针IP，6字节指令队列缓冲器，20位地址加法器和总线控制器几部分组成。</p><p>8086的执行部件的功能就是负责执行指令，它由16位的算术逻辑单元（ALU）、16位的标志寄存器F、数据暂存寄存器、通用寄存器组、EU控制电路组成。</p><p>2．8086 的中断系统分为哪几种类型的中断？其优先顺序如何？<br>答：8086 的中断系统分为外部中断（可屏蔽中断和不可屏蔽中断）和内部中断。</p><p>其优先顺序是：除单步中断以外，所有的内部中断优先权都比外部中断优先权高，在外部中断中，不可屏蔽中断比可屏蔽中断优先权高。</p><p>3 ．什么叫中断向量?它放在哪里？对应于lCH的中断向量存放在哪里?如果1CH的中断处理子程序从5110H：2030H开始，则中断向量应怎样存放?</p><p>答：中断向量是用来提供中断入口地址的一个地址指针；对应于lCH的中断向量存放在1CH×4=70H开始的4个单元</p><p>如果1CH的中断处理子程序从5110H：2030H开始，则中断向量应如下存放：</p><p>​         0070H：30H</p><p>​         0071H：20H</p><p>​         0072H：10H</p><p>​         0073H：51H</p><p>4.计算机分那几类？各有什么特点？</p><p>答：传统上分为三类：大型主机、小型机、微型机。大型主机一般为高性能的并行处理系统， 存储容量大，事物处理能力强，可为众多用户提供服务。小型机具有一定的数据处理能力，提供一定用户规模的信息服务，作为部门的信息服务中心。微型机一般指在办公室或家庭的桌面或可移动的计算系统，体积小、价格低、具有工业化标准体系结构，兼容性好。</p><p>5.简述微处理器、微计算机及微计算机系统三个术语的内涵。</p><p>答：微处理器是微计算机系统的核心硬件部件，对系统的性能起决定性的影响。微计算机包括微处理器、存储器、I/O接口电路及系统总线。微计算机系统是在微计算机的基础上配上相应的外部设备和各种软件，形成一个完整的、独立的信息处理系统。</p><p>6.80X86微处理器有几代？各代的名称是什么？</p><p>答：从体系结构上可分为3代： ¬ 8080/8085：8位机。 ­ 8086/8088/80286：16位机。</p><p>® 80386/80486：32位机。</p><p>7.8086是多少位的微处理器？为什么？</p><p>答：8086是16位的微处理器，其内部数据通路为16位，对外的数据总线也是16位。</p><p>8.EU与BIU各自的功能是什么？如何协同工作？</p><p>答：EU是执行部件，主要的功能是执行指令。BIU是总线接口部件，与片外存储器及I/O接口电路传输数据。EU经过BIU进行片外操作数的访问，BIU为EU提供将要执行的指令。EU与BIU可分别独立工作，当EU不需BIU提供服务时，BIU可进行填充指令队列的操作。</p><p>9.8086/8088与其前一代微处理器8085相比，内部操作有什么改进？</p><p>答：8085为8位机，在执行指令过程中,取指令与执行执令都是串行的。8086/8088由于内部有EU和BIU两个功能部件，可重叠操作，提高了处理器的性能。</p><p>10.8086/8088微处理器内部有那些寄存器，它们的主要作用是什么？</p><p>答：执行部件有8个16位寄存器，AX、BX、CX、DX、SP、BP、DI、SI。AX、BX、CX、DX一般作为通用数据寄存器。SP为堆栈指针存器，BP、DI、SI在间接寻址时作为地址寄存器或变址寄存器。总线接口部件设有段寄存器CS、DS、SS、ES和指令指针寄存器IP。段寄存器存放段地址，与偏移地址共同形成存储器的物理地址。IP的内容为下一条将要执行指令的偏移地址，与CS共同形成下一条指令的物理地址。</p><p>11.8086对存储器的管理为什么采用分段的办法？</p><p>答：8086是一个16位的结构，采用分段管理办法可形成超过16位的存储器物理地址，扩大对存储器的寻址范围 (1MB，20位地址)。若不用分段方法，16位地址只能寻址64KB空间。</p><p>12．在8086中，逻辑地址、偏移地址、物理地址分别指的是什么？具体说明。</p><p>答：逻辑地址是在程序中对存储器地址的一种表示方法，由段地址和段内偏移地址两部分组成，如1234H：0088H。偏移地址是指段内某个存储单元相对该段首地址的差值，是一个16位的二进制代码。物理地址是8086芯片引线送出的20位地址码，用来指出一个特定的存储单元。</p><p>13．给定一个存放数据的内存单元的偏移地址是20C0H，（DS）=0C00EH，求出该内存单元的物理地址。</p><p>答：物理地址：320F8H。</p><p>14．8086/8088为什么采用地址/数据引线复用技术？</p><p>答：考虑到芯片成本，8086/8088采用40条引线的封装结构。40条引线引出8086/8088的所有信号是不够用的，采用地址/数据线复用引线方法可以解决这一矛盾，从逻辑角度，地址与数据信号不会同时出现，二者可以分时复用同一组引线。</p><p>15.8086与8088的主要区别是什么？</p><p>答：8086有16条数据信号引线，8088只有8条；8086片内指令预取缓冲器深度为6字节，8088只有4字节。</p><p>16.怎样确定8086的最大或最小工作模式？最大、最小模式产生控制信号的方法有何不同</p><p>答：引线MN/MX#的逻辑状态决定8086的工作模式，MN/MX#引线接高电平，8086被设定为最小模式，MN/MX#引线接低电平，8086被设定为最大模式。</p><p>最小模式下的控制信号由相关引线直接提供；最大模式下控制信号由8288专用芯片译码后提供，8288的输入为8086的S2#~S0#三条状态信号引线提供。</p><p>17.8086被复位以后，有关寄存器的状态是什么？微处理器从何处开始执行程序？</p><p>答：标志寄存器、IP、DS、SS、ES和指令队列置0，CS置全1。处理器从FFFFOH存储单元取指令并开始执行。</p><p>18.8086基本总线周期是如何组成的？各状态中完成什么基本操作？</p><p>答：基本总线周期由4个时钟(CLK)周期组成，按时间顺序定义为T1、T2、T3、T4。在T1期间8086发出访问目的地的地址信号和地址锁存选通信号ALE；T2期间发出读写命令信号RD#、WR#及其它相关信号；T3期间完成数据的访问；T4结束该总线周期。</p><p>19.结合8086最小模式下总线操作时序图，说明ALE、M/IO#、DT/R#、RD#、READY信号的功能。</p><p>答：ALE为外部地址锁存器的选通脉冲，在T1期间输出；M/IO#确定总线操作的对象是存储器还是I/O接口电路，在T1输出；DT/R#为数据总线缓冲器的方向控制信号，在T1输出；RD#为读命令信号；在T2输出；READY信号为存储器或I/O接口“准备好”信号，在T3期间给出，否则8086要在T3与T4间插入Tw等待状态。</p><p>20.8086中断分哪两类？8086可处理多少种中断？</p><p>答：8086中断可分为硬件中断和软件中断两类。8086可处理256种类型的中断。</p><p>21.8086可屏蔽中断请求输入线是什么？“可屏蔽”的涵义是什么？</p><p>答：可屏蔽中断请求输入线为INTR；“可屏蔽”是指该中断请求可经软件清除标志寄存器中IF位而被禁止。</p><p>22.8086的中断向量表如何组成？作用是什么？</p><p>答：把内存0段中0~3FFH区域作为中断向量表的专用存储区。该区域存放256种中断的处理程序的入口地址，每个入口地址占用4个存储单元，分别存放入口的段地址与偏移地址。</p><p>23．8086如何响应一个可屏蔽中断请求？简述响应过程。</p><p>答：当8086收到INTR的高电平信号时，在当前指令执行完且IF=1的条件下，8086在两个总线周期中分别发出INTA#有效信号；在第二个INTA#期间，8086收到中断源发来的一字节中断类型码；8086完成保护现场的操作，CS、IP内容进入堆栈，请除IF、TF；8086将类型码乘4后得到中断向量表的入口地址，从此地址开始读取4字节的中断处理程序的入口地址，8086从此地址开始执行程序，完成了INTR中断请求的响应过程。</p><p>24.什么是总线请求？8086在最小工作模式下，有关总线请求的信号引脚是什么？</p><p>答：系统中若存在多个可控制总线的主模块时，其中之一若要使用总线进行数据传输时，需向系统请求总线的控制权，这就是一个总线请求的过程。8086在最小工作模式下有关总线请求的信号引脚是HOLD与HLDA。</p><p>25.简述在最小工作模式下，8086如何响应一个总线请求？</p><p>答：外部总线主控模块经HOLD引线向8086发出总线请求信号；8086在每个时钟周期的上升沿采样HOLD引线；若发现HOLD=1则在当前总线周期结束时(T4结束)发出总线请求的响应信号HLDA；8086使地址、数据及控制总线进入高阻状态，让出总线控制权，完成响应过程。</p><p>26．在基于8086的微计算机系统中，存储器是如何组织的？是如何与处理器总线连接的？</p><p>BHE信号起什么作用？</p><p>答：8086为16位处理器，可访问1M字节的存储器空间；1M字节的存储器分为两个512K字节的存储体，命名为偶字节体和奇字节体；偶体的数据线连接D7~D0，“片选”信号接地址线A0；奇体的数据线连接D15~D8，“片选”信号接BHE信号；BHE信号有效时允许访问奇体中的高字节存储单元，实现8086的低字节访问、高字节访问及字访问。</p><p>27．“80386是一个32位微处理器”，这句话的涵义主要指的是什么？</p><p>答：指80386的数据总线为32位，片内寄存器和主要功能部件均为32位，片内数据通路为32位。</p><p>28．80X86系列微处理器采取与先前的微处理器兼容的技术路线，有什么好处？有什么不足？</p><p>答：好处是先前开发的软件可以在新处理器组成的系统中运行，保护了软件投资。缺点是处理器的结构发展受到兼容的约束，为了保持兼容性增加了硅资源的开销，增加了结构的复杂性。</p><p>29．80386内部结构由哪几部分组成？简述各部分的作用。</p><p>答：80386内部结构由执行部件(EU)、存储器管理部件(MMU)和总线接口部件(BIU)三部分组成。EU包括指令预取部件、指令译码部件、控制部件、运算部件及保护检测部件，主要功能是执行指令。存储器管理部件包括分段部件、分页部件，实现对存储器的分段分页式的管理，将逻辑地址转换成物理地址。总线接口部件作用是进行片外访问：对存储器及I/O接口的访问、预取指令；另外的作用是进行总线及中断请求的控制</p><p>30．80386有几种存储器管理模式？都是什么？</p><p>答：80386有三种存储器管理模式，分别是实地址方式、保护方式和虚拟8086方式</p><p>31．在不同的存储器管理模式下，80386的段寄存器的作用是什么？</p><p>答：在实地址方式下，段寄存器与8086相同，存放段基地址。在保护方式下，每个段寄存器还有一个对应的64位段描述符寄存器，段寄存器作为选择器存放选择符。在虚拟8086方式下，段寄存器的作用与8086相同。</p><p>32.80386对中断如何分类？</p><p>答：80386把中断分为外部中断和内部中断两大类，外部中断经NMI和INTR引线输入请求信号。内部中断也叫内部异常中断，分为陷阱中断、内部故障异常中断、异常终止中断。</p><p>33.80386在保护方式下中断描述符表与8086的中断向量表有什么不同？</p><p>答：8086工作在实地址方式，向量表是在存储器的0段中最低1024字节内存中。80386在保护方式下要通过中断描述符表中的描述符访问虚拟空间的中断向量，中断描述符表的位置不是固定的，要由IDTR寄存器实现在虚拟空间的定位。</p><p>简述80386在保护方式下的中断处理过程。</p><p>答：80386响应中断后，接收由中断源提供的类型码并将其乘8，与IDTR寄存器中基地址相加，指出中断描述符的位置，读出中断描述符，依其中的段选择符及条件决定从两个描述符表LDT或GDT中的一个得到段描述符，形成中断服务程序入口所在存储器单元的线性地址。</p><p>34.8086CPU的字节寻址范围有多大？为什么？存储器为什么分段？20位物理地址的形成过程是怎样的？</p><p>答：8086CPU寻址范围1MB。因为8086CPU地址线为20条，2^20=1024KB，即1MB。8086系统中，指令仅给出16位地址，与寻址地址有关的寄存器也只有16位长，因此寻址范围只有64KB，为了寻址1MB，所以分成四个逻辑段。当CPU访问内存时，寄存器的内容（段基址）自动左移4位（二进制），与段内16位地址偏移量相加，形成20位的物理地址。</p><p>35.使用中断有什么好处？</p><p>答：  (1)解决快速CPU与慢速外设之间的矛盾，使CPU可以与外设同时工作，甚至可以与几个外设同时工作。</p><p>(2)计算机实现对控制对象的实时处理。</p><p>(3)计算机可以对故障自行处理。</p><p>36.什么是伪指令？</p><p>答：伪指令语句在形式上与指令语句很相似，但它不产生任何目标代码，只对汇编程序在汇编过程中提供必要的控制信息。</p><p>37.简述行列式键盘矩阵的读入方法。</p><p>答:将行线接输出口，列线接输入口，采用行扫描法，先将某一行输出为低电平，其它行输出为高电平，用输入口来查询列线上的电平，逐次读入列值，如果行线上的值为0时，列线上的值也为0，则表明有键按下。否则，接着读入下一列，直到找到该行有按下的键为止。如该行没有找到有键按下，就按此方法逐行找下去，直到扫描完全部的行和列。</p><p>38.简述用反转法实现键的识别的基本方法。</p><p>答: 将题目中的键改为闭合键。</p><p>用反转法识别闭合键，需要用可编程的并行接口。行线和列线分别接在PA和PB 2个并行口上，首先让行线上的PA口工作在输出方式，列线上的PB口工作在输入方式，通过编程使PA口都输出低电平，然后读取PB口的列线值，如果某一列线上的值为0，则判定该列有某一键按下。为了确定是哪一行要对PA和PB进行反转，即对PA口重新进行初始化工作在输入方式，列线上的PB口工作在输出方式，并将刚读取的列线值从列线所接的PB口输出，再读取行线所接的PA口，取得行线上的输入值，在闭合键所在的行线上的值必定为0。这样，当一个键被按下时，必定可读得一对唯一的行值和列值。根据这一对行值和列值就可判断是哪一行哪一列的键被按下。</p><p>39.LED数码管显示器共阴极和共阳极的接法主要区别是什么？</p><p>答:LED数码管显示器共阴极的接法是发光二极管的阴极接地，当数码管的笔划发光二极管的阳极为高电平时，该笔划被点亮。共阳极的接法是发光二极管的阳极接高电平，当数码管的笔划发光二极管的阴极为低电平时，该笔划被点亮。总之，主要区别在于LED数码管的接法和驱动笔划的数据电平的不同。</p><p>40.试绘图说明LED数码管显示器的动态显示原理。</p><p>答: 使用书上的图7.8</p><p>在图中LED数码管是共阴极的，总共可带动8位这样的LED数码管。动态驱动显示接口与静态驱动显示接口的一个明显特点是：动态驱动法将多位LED同名段的选择线都并联在一起，即8位中的所有同名段a接在一起，所有b段都接在一起……，这样只要一个8位的锁存器来控制段码a,b,c,d,e,f,g就够了。另外用一个锁存器来控制点亮的位。因此需要2个8位的I/O端口。</p><p>由于所有位的位选择码是用一个I/O端口控制，所有段的段选择码也是用一个I/O端口控制，因此在每个瞬间，8位LED只可能显示相同的字符。要想每位显示不同的字符，必须要采用扫描的显示方式。即在每一瞬间只能使某一位显示相应的字符，在此瞬间，由位选择控制的I/O端口在要显示的位上送入选通电平（共阴极接法送入低电平，共阳极接法送入高电平），以保证让该位显示字符；再由段选择控制的I/O端口输出相应字符的段选择码。如此循环下去，使每一位都显示该位应显示的字符，并保持延时一段时间，然后再选中下一位，利用发光显示器的余辉及人眼的视觉暂留特点，给人一种显示器同时被点亮的效果。段选择码，位选择码在每送入一次后一般需要延时1~5ms时间。</p><p>五、按要求编写指令或程序段(本大题共3小题，每小题4分，共12分)<br>1.用两种方法将存储器1000H的内容（1EH）扩大到原来的8倍。</p><p>答：第一种方法：MOV BX，1000H</p><p>​        MOV AL，[BX]</p><p>​        MOV CL，08H</p><p>MUL CL</p><p>MOV [BX]，AL</p><p>第二种方法：MOV BX，1000H</p><p>​        MOV AL，[BX]</p><p>​         MOV CL，03H</p><p>ROL AL，CL</p><p>MOV [BX]，AL</p><p>2.写出用一条指令就可使AL寄存器清零的指令；还写出用一条指令就可使AL寄存器为全1的指令（尽可能多地正确地写）。</p><p>答：用一条指令就可使AL寄存器清零的指令；用一条指令就可使AL寄存器为全1的指令</p><p>（1）MOV AX，0000H          （1） MOV AL，0FFH</p><p>（2）AND AX，0000H          （2） OR AL，0FFH</p><p>（3）XOR AX，AX</p><p>3.将存储器1000H到10FFH的连续单元中都放着一字节无符号数，将其中的最大无符号数放到偏移地址为1000H的单元中。</p><p>答： MOV BX，1000H</p><p>MOV CL，0FFH</p><p>MOV AL，[BX]</p><p>ABC：INC BX</p><p>CMP AL，[BX]</p><p>JNC BCD</p><p>MOV AL，[BX]</p><p>BCD：DEC CL</p><p>JNZ ABC</p><p>MOV BX，1000H</p><p>MOV [BX]，AL</p><p>JMP $</p><p>4.设计一个分支程序</p><p><img src="C:/Users/49475/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img" loading="lazy">1   X&gt;0</p><p>Y =   0  X=0</p><p>-1   X&lt;0</p><p>程序为：</p><p>MOV AL ，X</p><p>CMP AL，0</p><p>JGE  BIG</p><p>MOV Y，-1</p><p>JMP EXIT</p><p>BIG：JE EQUL</p><p>MOV Y，1</p><p>JMP EXIT</p><p>EQUL：MOV Y，0</p><p>JMP $</p><p>5.编写程序段, 比较两个5字节的字符串OLDS和NEWS, 如果OLDS字符串与NEWS不同, 则执行NEW_LESS, 否则顺序执行程序。</p><p>LEA SI, OLDS</p><p>LEA DI, NEWS</p><p>MOV CX, 5</p><p>CLD</p><p>REPZ  CMPSB</p><p>JNZ NEW_LESS</p><p>6.变量N1和N2均为2字节的非压缩BCD数码，请写出计算N1与N2之差的指令序列。</p><p>MOV AX, 0</p><p>MOV AL, N1+1</p><p>SUB AL, N2+1</p><p>AAS</p><p>MOV DL, AL</p><p>MOV AL, N1</p><p>SBB AL, N2</p><p>AAS</p><p>MOV DH, AL</p><p>7.试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来。</p><p>abc:  mov   ah,1</p><p>​    int   21h</p><p>​    sub   al,20h</p><p>​    mov   dl,al</p><p>​    mov   ah,2</p><p>​    int   21h</p><p>​    jmp   abc</p><p>sto: ret</p><p>8.把AX寄存器清零。</p><p>①MOV AX,0</p><p>②XOR AX,AX</p><p>③AND AX,0</p><p>④SUB AX,AX</p><p>9.把AL中的数<em>x</em>乘10</p><p>因为10=8+2=23+21，所以可用移位实现乘10操作。程序如下：</p><p>MOV CL,3</p><p>SAL  AL,1   ; 2<em>x</em></p><p>MOV AH,AL</p><p>SAL  AL,1   ; 4<em>x</em></p><p>SAL  AL,1   ; 8<em>x</em></p><p>ADD AL,AH  ; 8<em>x</em>+2<em>x</em> = 10<em>x</em></p><p>10.按下述要求写出指令序列:</p><p>(1) DATAX和DATAY中的两个字数据相加, 和存放在DATAY和DATAY+2中。</p><p>(2) DATAX和DATAY中的两个双字数据相加, 和存放在DATAY开始的字单元中。</p><p>(3) DATAX和DATAY两个字数据相乘（用MUL）。</p><p>(4) DATAX和DATAY两个双字数据相乘（用MUL）。</p><p>(5) DATAX除以23（用DIV）。</p><p>(6) DATAX双字除以字DATAY（用DIV）。</p><p>DATAX和DATAY中的两个字数据相加, 和存放在DATAY和DATAY+2中。</p><p>(1) MOV AX, DATAX</p><p>ADD AX, DATAY</p><p>MOV BX, DATAX+2</p><p>ADD BX, DATAY+2</p><p>MOV DATAY, AX</p><p>MOV DATAY+2, BX</p><p>DATAX和DATAY中的两个双字数据相加, 和存放在DATAY开始的字单元中。</p><p>(2) MOV AX, DATAX</p><p>ADD DATAY, AX</p><p>MOV AX, DATAX+2</p><p>ADC DATAY+2, AX</p><p>DATAX和DATAY两个字数据相乘（用MUL）。</p><p>(3) MOV AX, DATAX</p><p>MUL DATAY</p><p>MOV DATAY,AX</p><p>MOV DATAY+2,DX</p><p>DATAX和DATAY两个双字数据相乘（用MUL）。</p><p>(4)</p><p>MOV AX,WORD PTR DATAX</p><p>MOV BX,WORD PTR DATAY</p><p>MUL BX</p><p>MOV RESULT,AX</p><p>MOV RESULT+2,DX</p><p>MOV AX,WORD PTR DATAX</p><p>MOV AX,WORD PTR DATAY+2</p><p>MUL BX</p><p>ADD RESULT+2,AX</p><p>ADC RESULT+4,DX</p><p>MOV AX,WORD PTR DATAX+2</p><p>MOV BX,WORD PTR DATAY</p><p>MUL BX</p><p>ADD RESULT+2,AX</p><p>ADC RESULT+4,DX</p><p>MOV AX,WORD PTR DATAX+2</p><p>MOV BX,WORD PTR DATAY+2</p><p>MUL BX</p><p>ADD RESULT+4,AX</p><p>ADC RESULT+6,DX</p><p>DATAX除以23（用DIV）。</p><p>(5)  MOV AX, DATAX</p><p>MOV BL, 23</p><p>DIV    BL</p><p>MOV  BL,AH</p><p>MOV  AH, 0</p><p>MOV  DATAY, AX    ;存放商</p><p>MOV  AL,BL</p><p>MOV  DATAY+2, AX ;存放余数</p><p>DATAX双字除以字DATAY（用DIV）。</p><p>(6) MOV AX, DATAX</p><p>MOV DX, DATAX+2</p><p>DIV   DATAY</p><p>MOV DATAY, AX</p><p>MOV DATAY+2, DX</p><p>五、软件设计</p><p>1、以BUF1和BUF2开头的2个字符串开头的2个字符串，其长度相等，试编程实现将两个字符串的内容对调。</p><p>DDD0  SEGMENT                                BUF1  DB “QWERTYUIOPASDFGHJKLR”</p><p>BUF2  DB “A1234567890ZXCVBNMPJ”<br>LEN   EQU LENGTH BLOCK1<br>DDD0  ENDS<br>ESEG  SEGMENT<br>BUF3  DB 20 DUP(?)<br>ESEG  ENDS<br>CSEG  SEGMENT<br>ASSUME CS:CSEG,DS:DDD0,ES:ESEG<br>START: CLD<br>MOV AX，DDD0<br>MOV DS，AX<br>MOV AX，ESEG<br>MOV ES，AX<br>MOV CX,LEN<br>LEA SI， BUF1</p><p>LEA DI， BUF3<br>REP MOVSB<br>MOV CX,LEN                                       LEA SI， BUF2                                           LEA DI， BUF1                                          REP MOVSB                                           MOV CX,LEN                                       LEA SI， BUF3                                   LEA DI， BUF2                                         REP MOVSB                                             CSEG   ENDS                                         END START</p><p>2、 在ABC和BCD两地址起，各有5个字节的无符号数，试编程实现这两个无符号数的加法并将结果分别存放到CBA开始的存储单元中去。</p><p>DDD0  SEGMENT                                 ABC   DB 9FH，26H，12H，5AH，23H                                    BCD   DH 74H，D3H，54H，43H，7DH                                     CBA   DB 6 DUP(?)                                                                   DDD0  ENDS                                CSEG  SEGMENT                                     ASSUME CS:CSEG,DS:DDD0                                START: MOV AX，DDD0                                     MOV DS，AX                                       MOV CX，5                                           CLC                                                 LEA SI,ABC；可做间址寄存器的有SI，DI，BX，BP及它们的组合                            LEA DI，BCD                                         LEA BX，CBA                                        XYZ： MOV AL，[SI]                                      ADC AL，[DI]                                        MOV [BX]，AL                                        INC SI                                         INC DI                                            INC BX                                        LOOP XYZ                                         MOV AL，0                                       ADC AL，0                                       MOV[BX]，AL                                         LEA BX，CBA                                       MOV [BX]，AX                                                                                                                    CSEG ENDS                                          END START</p><p>\3. 把0-100之间的30个数，存入首地址为GRAD的字数组中，GRAD+i表示学号为i+1的学生成绩。另一个数组RANK是30个学生的名次表，其中RANK+I的内容是学号为i+1的学生的名次。试编写程序，根据GRAD中的学生成绩，将排列的名次填入RANK数组中（提示：一个学生的名次等于成绩高于这个学生的人数加1）。</p><p>dseg  segment</p><p>grade dw 30 dup(?)</p><p>rank    dw 30 dup(?)</p><p>dseg  ends</p><p>cseg    segment</p><p>main  proc    far</p><p>assume cs:cseg, ds:dseg, es:dseg</p><p>start: push  ds</p><p>​    sub   ax,ax</p><p>​    push  ax</p><p>​    mov   ax,dseg</p><p>​    mov   ds,ax</p><p>​    mov   es,ax</p><p>begin: mov   di,0</p><p>​    mov   cx,30</p><p>loop1: push  cx</p><p>​    mov   cx,30</p><p>​    mov   si,0</p><p>​    mov   ax,grade[di]</p><p>​    mov   dx,0</p><p>loop2: cmp   grade[si],ax</p><p>​    jbe   go_on</p><p>​    inc   dx</p><p>go_on: add   si,2</p><p>​    loop    loop2</p><p>​    pop   cx</p><p>​    inc   dx</p><p>​    mov   rank[di],dx</p><p>​    sdd   di,2</p><p>​    loop    loop1</p><p>​    ret</p><p>main  endp</p><p>cseg    ends</p><p>​    end   start</p>]]></content>
    
    
    <summary type="html">微机原理的填空题与部分大题</summary>
    
    
    
    <category term="微机原理" scheme="https://www.darkfox.top/categories/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="微机原理" scheme="https://www.darkfox.top/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>微机原理复习</title>
    <link href="https://www.darkfox.top/posts/d157d84d/"/>
    <id>https://www.darkfox.top/posts/d157d84d/</id>
    <published>2021-04-28T13:10:33.000Z</published>
    <updated>2021-04-28T13:13:59.083Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p>1、简述存储器的分段结构，并简要说明ROM和RAM的区别?</p><p>答： (1)为了对1M存储单元进行管理，8086对存储器进行分段管理，分为许多逻辑段每个逻辑段最多可达64K个存储单元，允许它们在整个存储空间中浮动，各个逻辑段之间可以紧密相连，也可以互相重叠 。(2)ROM表示的是<a href="https://www.baidu.com/s?wd=%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">只读存储器</a>，ROM只能被CPU读取，而不能由CPU任意写入，断电后信息不会丢失。RAM表示的是随机读写存储器，可被CPU随机的读写，用于存放将要被CPU执行的用户程序、数据以及部分系统程序，断电后存放的信息将丢失。</p><p>2、试说明指令周期、总线周期、时钟周期的基本概念和三者的关系?</p><p>答：(1)指令周期：微处理器执行一条指令的时间(包括取指令和执行指令所需的全部时间。</p><p>(2)   总线周期：微处理器通过外部总线对存储器或I/O端口进行一次读写操作的过程。</p><p>(3)   (3)时钟周期：系统主时钟一个周期信号所持续的时间。           关系:一个指令周期由若干个总线周期组成;一个总线周期由若干个时钟周期组成。</p><p>3、已知中断向量表中004CH单元中的内容为9918H,004EH单元中的内容为4268H,试说明:这些单元对应的中断类型号是什么?该类型中断的服务程序入口地址是什么?</p><p>答：根据中断服务程序入口地址表在内存中的位置可知,调用中断类型号为 N 的中断程序时,可将中断类型号 N 乘以 4 求出中断矢量的首字节地址 4N。已知该中断向量的首字节为 004CH,所以,中断类型号为 13H。 根据该中断向量表中的 4 个字节内容,可知该类型中断服务程序的入口地址 为:PA=CS×10H+IP=4268H×10H+9918=4BF98H</p><p>4、输入接口常接有三态缓冲器，而输出接口常接有锁存器，试述其理由?</p><p>答：为了协调高速CPU与慢速的外设之间的速度匹配，以及避免数据的丢失，接口中一般设有数据锁存器或缓冲器。在输出接口中，一般都要安排锁存器，以便锁存输出数据，使较慢的外设有足够的时间进行处理，避免数据丢失，而CPU和总线可以回头去忙自己的其它工作。在输入接口中，一般需要安排缓冲隔离环节，如三态门。特别是当有多个外设与CPU进行数据交换时，只有当CPU连通时，才允许某个选定的输入设备才进行数据传输，而其它外设此时数据总线隔离，避免干扰数据的传输。</p><p>5、指出下列指令中源操作数的寻找方式;</p><ol><li><p>MOV AX, ES: [2009H]；直接寻址方式</p></li><li><p>MOV AX, [BP+DI+2009H]；基址加变址相对寻址方式</p></li><li><p>MOV AX,[BX]；寄存器间接寻址方式</p></li><li><p>MOV AX, 2009H；立即数寻址方式</p></li><li><p>MOV AX, DX；寄存器寻址方式</p></li></ol><p>\6. 假设在数据段中有一字符串 stringl,其长度为20，要求把它们传送到附加段string2中，假设DS和ES都初始化在同一数据段中。</p><p>答：LEA SI,STRING1</p><p>LEA DI,STRING2</p><p>MOV CX,20</p><p>CLD</p><p>REP MOVSB</p><p>HLT</p><p>7.若要测试AL寄存器中第2位是否为1 (但不能改变AL的值)，如为1刚转移到EXIT去执行(不考虑做什么)。否则将其第5,3位变反。</p><p>答：MOV  DL, AL</p><p>TEST  DL, 00000100B</p><p>JNZ  EXIT</p><p>XOR  AL, 00101000B</p><p>EXIT:</p><p>8、何谓堆栈?试述其作用与特点?</p><p>答：堆栈是存储器中的一个区域，一般≦64KB，主要用于存放调用子程序时保存的入口信息和存放中断时所需保存的断点现场信息，堆栈操作主要是入栈和出栈两种，采用“先入后出”或“后入先出”和“向下增长”原理进行操作。</p><p>9.通常解决中断优先级的方法有哪儿种?各有什么优缺点？<br>答：软件查询法。优点：节省硬件。缺点：响应速度较慢。</p><p>硬件排队电路法。优点：可实现中断嵌套。缺点：硬件上需要做大量工作。</p><p>专用中断控制芯片法。优点：可解决复杂系统的中断优先级管理。缺点：操作复杂。</p><p>10.指出下列指令的错误<br>POP CS ; CS不能作为POP指令的操作数。<br>INC [CX];寄存器间接寻址方式址不能用CX，只能为SI、DI、BX。</p><p>MOV 2012H，DX;立即数不能为目的操作数。</p><p>OUT 2008H,AL；端口地址大于255应先将地址存放在DX中。</p><p>ROR AX,5；移位次数大于1应先将其放在CL中。</p><p>11、8086的储存器空间最大可以为多少?怎样用16位寄存器实现对20位地址的寻址? (5分)</p><p>答：1M字节；8086引入分段管理机制，当CPU寻址某个存储单元时，先将段寄存器内的内容左移4位，然后加上指令中提供的16位偏移地址形成20位物理地址。</p><p>12.“8086执行了一个总线周期”是指8086 做了哪些可能的操作?基本总线周期如何组成?在一个典 型的读存储器总线周期中，地址信号、ALE信号、RD信号、数据信号分别在何时产生?</p><p>答：（1）是指8086对片外的存储器或I/O接口进行了一次访问，读写数据或取指令。<br>（2）基本总线周期由4个时钟周期组成，分别记为T1、T2、T3、T4。<br>（3）地址信号、ALE信号在T1周期内产生，RD信号在T2周期内产生，数据信号一般在T3内产生，若T3来不及提供数据，可在某Tw内产生有效数据。</p><p>13.8086，8088在什么时候及什么条件下可以响应一个外部INTR中断请求？中断向量表在存储器的什么位置，向量表的内容是什么？ 8086如何将控制转向中断服务程序？</p><p>答：（1）8086/8088在当前指令执行完且IF=1的情况下可以响应一个外部INTR中断请求。</p><p>（2）中断向量表在存储器的0段0000—03FFH区域，向量表存放中断服务程序的入口地址。</p><p>（3）8086/8088响应INTR中断请求时，首先在连续的两个总线周期中发出INTA负脉冲，在第二个INTA信号期间，中断源经数据总线向8086/8088送出一字节中断向量“类型码”。8086/8088收到“类型码”后将其乘4形成中断向量表的入口，从此地址开始的4个单元中读出中断服务程序的入口地址（IP、CS），8086/8088从此地址取指令执行，将控制转向中断服务程序。</p><p>14.8255A的方式选择字和C口置位/复位字都写入什么端口?用什么方式区分它们？</p><p>答：8255A的方式选择字和置位复位字都写入控制端口（写入控制字寄存器中）。用特征位D7区分， D7=1，为方式选择控制字， D7=0，为C口的按位置位/复位。<br>15.指出下列指令的错误(5分)</p><p>(1)SUB AH，BX:数据类型不同</p><p>(2)ADD OAH,BL:立即数不能作为目的操作数</p><p>(3)MOV CS,AX :CS不能作为目的操作数</p><p><img src="https://i.loli.net/2021/04/27/qiPJglyhOxLXUo6.jpg" alt="img" loading="lazy">(4)MOV AX，[SI][DI]:无此种组台</p><p>(5)MOV BYTE PIR[BX],999：999超过8位</p><p>16.用256*4位RAM芯片和74LS139 (2:4译码器)构成一个1kb的存储器子系统，试计算需要256X4位RA芯片多少个?这些芯片要组成几组才能满足要求?试画出存储器系统与CPU的连接图?</p><p>17.假设有一组字节数据:5，-4，0，100，-51，99试编写一程序，判断:每个数是否大于0?等于0?小于0并输出判断结果，即:当数据大于0时，运行程序后在屏幕上显示y=1,当数据等于0时，输出y=0.当数据小于0时，输出y=-1.根据本题的判断，系统最后运行结果为y=1，y=-1，y=0，y=l，y=-1，y=1或者为其它格式均可。</p><p>答：DATA SEGMENT</p><p>​    X DB 5,-4,0,100,-51,99</p><p>DATA1 DB ‘Y=1’,0DH,0AH,’$’</p><p>DATA2 DB ‘Y=0’,0DH,0AH,’$’</p><p>DATA3 DB ‘Y=-1’,0DH,0AH,’$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV SI,OFFSET X</p><p>CLD</p><p>MOV CX,6</p><p>CHECK:</p><p>MOV AL,[SI]</p><p>CMP AL,00H</p><p>JE LOOP1</p><p>JG LOOP2</p><p>MOV DI,OFFSET DATA3</p><p>JMP DOWN</p><p>LOOP1:</p><p>MOV DI,OFFSET DATA2</p><p>JMP DOWN</p><p>LOOP2:</p><p>MOV DI,OFFSET DATA1</p><p>DOWN:</p><p>MOV DX,DI</p><p>MOV AH,09H</p><p>INT 21H</p><p>INC SI</p><p>LOOP CHECK</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>\18. 某微机系统的存储器地址空间为A8000H-CFFFFH,若采用单片容量为16K*1位的SRAM芯片，问:系统存储容量为多少?组成该存储系统共需该类芯片多少?整个系统芯片组应为多少？</p><p>答:（1）该计算机系统的存储器地址空间为 A8000H~CFFFFH，系统存储容量为：</p><p>（2）单片容量为 16K*1 为的 SRAM 芯片的存储容量为 16Kbit=2KB</p><p>组成该存储系统共需该类芯片 160KB/2KB=80 个</p><p>（3）系统位宽为 16bit，则每组芯片组需要 16 个单片容量为 16K*1 为的   SRAM芯片所有整个系统应分为 80/16=5 组芯片</p><p>19.编写程序，要求程中运行后在屏幕上输出字符串&quot;How are you！&quot;<br>答：DATA SEGMENT</p><p>BUF DB ‘How are you!$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV DX,OFFSET BUF</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>20.已知某系统中8253的连接如下图所示，要求通道1的CLK1接4MHZ的信号。OUT1输出周期为10ms的方波。(10 分)<br>（1）8253各通道及控制寄存器的地址是多少? (2分)</p><p>（2）该计数器的方式控制字和计数初值各为多少? (4分)</p><p>（3）编写8253的初始化程序。（4分）</p><p><img src="https://i.loli.net/2021/04/27/7QbWuVLPkqKBZy9.jpg" alt="img" loading="lazy"></p><p>解：略</p><p>21.编写一程序段，统计数组num中大于0，等于0，小于0的数的个数，并分别存入plus、zero、negative三个单元中。其中给出了数据段的定义如下。<br>DATA SEGMENT<br>num DB -1、0、3、-6、7、23、0、-50、3、1<br>plus DB ？</p><p>zero DB ?</p><p>negative DB ?</p><p>答：DATA SEGMENT</p><p>NUM DB -1,0,3,-6,7,23,0,-50,3,1</p><p>plus DB ‘0’,0DH,0AH,’$’</p><p>zero DB ‘0’,0DH,0AH,’$’</p><p>negative DB ‘0’ ,0DH,0AH,’$’</p><p>DATA ENDS</p><p>STACK SEGMENT</p><p>STACK ENDS</p><p>CODE SEGMENT</p><p>ASSUME CS:CODE,DS:DATA,SS:STACK</p><p>START:</p><p>MOV AX,DATA</p><p>MOV DS,AX</p><p>MOV SI,OFFSET NUM</p><p>CLD</p><p>MOV CX,10</p><p>CHECK:</p><p>MOV AL,[SI]</p><p>CMP AL,00H</p><p>JE LOOP1</p><p>JG LOOP2</p><p>INC negative</p><p>JMP DOWN</p><p>LOOP1:</p><p>INC zero</p><p>JMP DOWN</p><p>LOOP2:</p><p>INC plus</p><p>DOWN:</p><p>INC SI</p><p>LOOP CHECK</p><p>MOV DX,OFFSET plus</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV DX,OFFSET zero</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV DX,OFFSET negative</p><p>MOV AH,09H</p><p>INT 21H</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>MOV AH,4CH</p><p>INT 21H</p><p>CODE ENDS</p><p>END START</p><p>22、用2114（1K<em>4位）SARM芯片组一个容量为4K</em>8位的存储器，要几片2114？分成几组?每组几片?地址线如何分配?请面出简单连接图?</p><p><img src="https://i.loli.net/2021/04/27/pdbKQlw3H1rajf6.jpg" alt="@`~K7J8T70_8FP)FOOC@T1U" loading="lazy">答：共需（4/1）*（8/4）=8个芯片，分成4组，每组两片。<br>用A0-A9,10跟地址线对每组芯片进行片内寻址，同组芯片应被同时选中，故同组芯片的片选端应并联在一起。用2-4译码器对两根高位地址线A10、A11译码，产生四根片选信号线，分别与各组芯片的片选端相连。</p><p>23.8253通道2接有一发光二极管， 要使发光二极管以点亮3秒，熄灭3秒的间隔工作，请编程实现。( 8253 各通道地址分别为FFE9H -FFEFH或FFE8H一FFEEH, 选择可能的地址)</p><p><img src="https://i.loli.net/2021/04/27/ExOtYbrUAN7Xzqj.jpg" alt="33" loading="lazy"></p>]]></content>
    
    
    <summary type="html">微机原理的大题复习题，现在公开（因为考完了）</summary>
    
    
    
    <category term="微机原理" scheme="https://www.darkfox.top/categories/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="微机原理" scheme="https://www.darkfox.top/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>boot的烧写</title>
    <link href="https://www.darkfox.top/posts/fd45d1aa/"/>
    <id>https://www.darkfox.top/posts/fd45d1aa/</id>
    <published>2021-04-19T03:10:19.000Z</published>
    <updated>2021-04-24T06:21:42.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><h3 id="使用其他arduino板-烧写">使用其他Arduino板 烧写</h3><p>使用我们可以正常使用的Arduino 开发板也可作为烧写器给单片机芯片烧写BootLoader。在手上并没有如上2种方法的烧写/下载器等工具的时候，我们可以采用该种方法来完成Arduino BootLoader 的烧写。</p><p>在这里我们采用一块Arduino UNO 开发板作为烧写器对待烧写单片机进行Arduino BootLoader 的烧写。</p><h4 id="1-连接方式">（1）连接方式</h4><p>将Arduino 的 数字11、12、13引脚对应与待烧写的数字11、12、13引脚相连，UNO 的10号引脚连接到待烧写的RESET引脚上，并将UNO 板上的5V、GND接口与待烧写板的5V、GND分别相连。</p><p><em>也有说法称，当被烧写的电路板或对应最小系统电路为Arduino UNO 时，需要使用一个10uf的电容连接待烧写电路板的reset和GND。笔者未进行实验。</em></p><table><thead><tr><th>作为烧写器的Arduino UNO 板</th><th>待烧写单片机芯片/电路板</th></tr></thead><tbody><tr><td>D10</td><td>RESET</td></tr><tr><td>D11</td><td>D11</td></tr><tr><td>D12</td><td>D12</td></tr><tr><td>D13</td><td>D13</td></tr><tr><td>5V</td><td>5V</td></tr><tr><td>GND</td><td>GND</td></tr></tbody></table><h4 id="2-烧写arduinoisp固件">（2）烧写ArduinoISP固件</h4><p>1.将作为烧写器的Arduino UNO板通过USB线连接到电脑，打开Arduino IDE 。</p><p>2.选择并设置好开发板型号、处理器及COM口。（注意要选择的型号为作为烧写器的Arduino 型号）</p><p>3.在工具栏选择-&gt;文件-&gt;示例-&gt;11.Arduino ISP-&gt;ArduinoISP，打开ArduinoISP程序，编译（验证）、上传到开发板中。<br><img src="https://arduino.nxez.com/wp-content/uploads/2018/08/20180827224328520.png" alt="img" loading="lazy"></p><h4 id="3-bootloader烧写">（3）BootLoader烧写</h4><p>1.在在工具栏选择-&gt;工具-&gt;开发板型号，选择待烧写的Arduino型号。在工具-&gt;处理器，选择正确的处理器型号。</p><p>2.在工具-&gt;编译器 中，选择Arduino as ISP。</p><p><img src="https://arduino.nxez.com/wp-content/uploads/2018/08/20180827224328881.png" alt="img" loading="lazy"><br>3.点击 工具-&gt;烧录引导程序，等待下方提示烧录成功。</p>]]></content>
    
    
    <summary type="html">烧写arduino bootloader的方法</summary>
    
    
    
    <category term="arduino" scheme="https://www.darkfox.top/categories/arduino/"/>
    
    
    <category term="arduino" scheme="https://www.darkfox.top/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习</title>
    <link href="https://www.darkfox.top/posts/4f95e9f6/"/>
    <id>https://www.darkfox.top/posts/4f95e9f6/</id>
    <published>2021-04-19T02:32:13.000Z</published>
    <updated>2021-04-22T14:32:30.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span>]]></content>
    
    
    <summary type="html">汇编语言学习的一些内容</summary>
    
    
    
    <category term="汇编语言" scheme="https://www.darkfox.top/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="https://www.darkfox.top/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>bug_arduino_固件</title>
    <link href="https://www.darkfox.top/posts/18a167d7/"/>
    <id>https://www.darkfox.top/posts/18a167d7/</id>
    <published>2021-04-18T09:21:41.000Z</published>
    <updated>2021-04-18T14:37:56.271Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> bug的来源十分简单，github上的那个grbl例程包里面有个小问题。那个grbl的包只要刷进去开发板，你的开发板就不能再写入其他程序了。是不是很诡异  </center><span id="more"></span><p><img src="https://i.loli.net/2021/04/18/3mMUzEtJoV6pyR4.png" alt="" loading="lazy"></p><p><img src="https://i.loli.net/2021/04/18/cot1SMRln6zvNBE.png" alt="" loading="lazy"></p><p>包括arduino ide本身也不能再次刷进去程序了，很是诡异。一些老哥说是bootloader给刷掉了，改天刷一个看看是否能还原。</p><p>就目前的项目来看，只能再买一个开发板了。日了</p><p><img src="https://i.loli.net/2021/04/18/YC1wpWbiaUEeGRq.png" alt="" loading="lazy"></p><p>再也不刷这个包了。。。。。。</p>]]></content>
    
    
    <summary type="html">今天复刻了一遍固件的过程，发现了bug来源</summary>
    
    
    
    <category term="bug" scheme="https://www.darkfox.top/categories/bug/"/>
    
    
    <category term="bug" scheme="https://www.darkfox.top/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>小笑话_1</title>
    <link href="https://www.darkfox.top/posts/85ba8d1d/"/>
    <id>https://www.darkfox.top/posts/85ba8d1d/</id>
    <published>2021-04-17T07:20:03.000Z</published>
    <updated>2021-04-18T13:51:53.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://i.loli.net/2021/04/17/lwzstD4S8qYQWhe.jpg" alt="2" loading="lazy"></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/17/lwzstD4S8qYQWhe.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="fun" scheme="https://www.darkfox.top/categories/fun/"/>
    
    
    <category term="fun" scheme="https://www.darkfox.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>一些想法</title>
    <link href="https://www.darkfox.top/posts/2556b57a/"/>
    <id>https://www.darkfox.top/posts/2556b57a/</id>
    <published>2021-04-17T06:55:30.000Z</published>
    <updated>2021-04-17T07:22:01.254Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  都说人闲着的话能闲出来毛病，我为啥一闲下来就有一些奇怪的想法。。。。 </center><span id="more"></span><h4 id="idea">IDEA</h4><h4 id="1-迷你打印机">1.迷你打印机</h4><p>虽然这个玩意早就有了，但是我还是想要搞一个。</p><p>原因：</p><p>之前需要写很多报告之类的东西，动不动就成千上万字，很难受。但是还tm不让打印，你说抄那玩意干啥?你又不看，我们抄下来也不过脑子，实验也是水一下，图个啥吧。起初我是想搞个之前网上很火的那种写字机来着（并且我也搞了）。</p><img src="https://i.loli.net/2021/04/17/4cvlsnkxWe8iLFJ.jpg" alt="IMG_20210413_222131_1" style="zoom:67%;" / loading="lazy"><p>这个是半成品，再加个小舵机写字模块就行了，问题不大。但是这个玩意有个问题，就是写字太慢了，毕竟拿笔写哪里有直接印的快。</p><p>于是乎，做个小打印机的想法就出来了。就是那种扫描一下识别字体，然后修正成自己的字体，再打印出来的那种小玩意。但是仔细想想，这种东西好像也不适合偷懒写报告。<strong>BUT</strong>他是不是很适合做笔记呢？？？</p><p><strong>是不是？</strong></p><p>有时候，我们做笔记其实就是把课本上的照抄一下，是不是有点浪费时间，并且有的图表我们也是画不了太规范.使用工具进行绘制的话又太浪费时间。直接打印的话，还要编辑文档（word，cad啥的）然后只能打印到打印纸上，想弄到笔记上还要进行裁剪粘贴，时间都浪费了。如果有这样一个小玩意，扫描一下原文本就可以直接打印在我们的笔记上，岂不美哉。省了时间还不用裁剪之类的操作就可以把很多东西放到我们的笔记上（还是纸质的）。<strong>COOL!</strong></p><p>这个玩意太极客了，就是目前做不出来。。。。。</p><h4 id="2-还没想好名字">2.还没想好名字</h4><p>大概就是一种特殊的传输结构可以快速还原一些地形和形状，有点像我们玩的那种橡皮泥插上牙签的一个玩意。具体有啥用，还没想好，以后再加。</p><hr><p>下面的是一些别的大佬的玩具（真厉害），改天没事了复刻一个！</p><p><img src="https://i.loli.net/2021/04/17/VWwmqOoiHckdgvy.jpg" alt="2" style="zoom:67%;" / loading="lazy"><img src="https://i.loli.net/2021/04/17/lo8Xai92z1CjQdL.jpg" alt="3" style="zoom:67%;" / loading="lazy"></p>]]></content>
    
    
    <summary type="html">之前异想天开了一些想法，康康日后能不能做出来</summary>
    
    
    
    <category term="idea" scheme="https://www.darkfox.top/categories/idea/"/>
    
    
    <category term="idea" scheme="https://www.darkfox.top/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>评论系统</title>
    <link href="https://www.darkfox.top/posts/5f723dc9/"/>
    <id>https://www.darkfox.top/posts/5f723dc9/</id>
    <published>2021-04-16T12:12:23.000Z</published>
    <updated>2021-04-16T12:29:02.856Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><img src="https://i.loli.net/2021/04/16/qS1fsCkux9m5Jjy.png" alt="" loading="lazy"></p><span id="more"></span><h3 id="bug">BUG</h3><p>之前的评论系统在本地可以运行，但是部署到服务器之后就gg了，但是使用valine的话，不是很安全（因为信息没有加密传输），所以博客的评论系统挂了一段时间。<strong>今天</strong>，<strong>我tm才发现</strong>域名忘给白名单，以及忘了配置评论系统运行的环境（第一次用云端服务，不熟悉）。</p><p>总之，tm的解决了。哈哈哈哈</p><p><img src="https://i.loli.net/2021/04/16/V4iFs19E26wkU5c.png" alt="" loading="lazy"></p><p>这是我之前自己测试的时候的通知机器人（当然现在ip不会发给我），真不戳。</p><p>就是不知道这系统会不会抽风（毕竟没看手册）</p>]]></content>
    
    
    <summary type="html">芜湖，起飞，评论系统修复好了</summary>
    
    
    
    
    <category term="bug" scheme="https://www.darkfox.top/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>图床大升级——picgo</title>
    <link href="https://www.darkfox.top/posts/91c893f/"/>
    <id>https://www.darkfox.top/posts/91c893f/</id>
    <published>2021-04-16T03:07:00.000Z</published>
    <updated>2021-04-16T03:24:20.785Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 所以我使用了picgo  </center><span id="more"></span><h3 id="使用原因">使用原因</h3><p>之前的图片都是要打开网站，例如</p><p><img src="https://i.loli.net/2021/04/16/Ii28fB16ctFTVqU.png" alt="" loading="lazy"></p><p>然后手动上传，再打开之后复制链接，就像这样</p><img src="https://i.loli.net/2021/04/16/XZw2KBRjSHx6Idi.png" style="zoom: 67%;" / loading="lazy"><img src="https://i.loli.net/2021/04/16/Nn6O8ljI1rhiesc.png" style="zoom:67%;" / loading="lazy"><p>很麻烦，并且每次都要开开关关网页啦，编辑器啦</p><p>经过查询我用的markdown编辑器typora支持自动上传（芜湖起飞）</p><img src="https://i.loli.net/2021/04/16/7iBedgzM4LJs2T3.png" alt="Snipaste_2021-04-16_11-14-12" style="zoom:67%;" / loading="lazy"><p>于是乎就设置了一下，其实也很简单，去github下载picgo对应的版本然后注册图床账号，把接口放在picgo即可。剩下的就是点点鼠标的事情。</p><img src="https://i.loli.net/2021/04/16/xuHjwcayAzo2DSv.png" alt="picgo界面" style="zoom:67%;" / loading="lazy"><p><strong>真不戳！</strong></p><p>另外配合snipaste使用效果绝佳，因为snipaste有一个复制图片链接按键，picgo有一个快速上传的快捷键，两个相配合，绝了。甚至你可以自己搞个鼠标宏，一键解决。</p>]]></content>
    
    
    <summary type="html">之前的图片是放在了公共图床上面，审核古怪不说，还容易丢图，api还不方便使用</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一个小故事</title>
    <link href="https://www.darkfox.top/posts/ebff84ea/"/>
    <id>https://www.darkfox.top/posts/ebff84ea/</id>
    <published>2021-04-16T03:06:44.000Z</published>
    <updated>2021-04-16T03:24:20.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>   </center><span id="more"></span><p><img src="https://i.loli.net/2021/04/16/Wg7Z3QklswmCOMT.jpg" alt="" loading="lazy"></p><p><img src="https://i.loli.net/2021/04/16/eJDS2IduE8FVN9j.jpg" alt="" loading="lazy"></p>]]></content>
    
    
    <summary type="html">在群里看到了个小故事，很感人</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>bug_arduino_timeout</title>
    <link href="https://www.darkfox.top/posts/88471254/"/>
    <id>https://www.darkfox.top/posts/88471254/</id>
    <published>2021-04-16T01:26:50.000Z</published>
    <updated>2021-04-16T03:37:46.925Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center>  前面几天搞了个激光雕刻机玩玩，但是玩了一半的时候控制板gg了，所以我又刷了下固件，然后。。。。。 </center><p><img src="https://i.loli.net/2021/04/16/iD3tlZvuJBwzaex.png" alt="Snipaste_2021-04-16_09-29-21" loading="lazy"></p><span id="more"></span><p>Debug :</p><p>排除了bootload的问题</p><p>排除了芯片型号的问题</p><p>排除了驱动的问题</p><p>排除了接线的问题</p><p>排除了软件（上位机）问题</p><p>未排除下位机是否存在问题</p><p>未排除开发板是否短路</p><p>未排除开发板是否有故障</p><p>没有找到解决方案，打算换个控制系统试一下。</p>]]></content>
    
    
    <summary type="html">在做个小玩具的时候碰到了一点问题</summary>
    
    
    
    <category term="bug" scheme="https://www.darkfox.top/categories/bug/"/>
    
    
    <category term="bug" scheme="https://www.darkfox.top/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>如何学习（1）</title>
    <link href="https://www.darkfox.top/posts/3bd094ff/"/>
    <id>https://www.darkfox.top/posts/3bd094ff/</id>
    <published>2021-04-09T05:30:44.000Z</published>
    <updated>2021-04-09T05:52:31.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><center> 这个方法我是从知乎上看到的，文章内容略有改动。  </center><p>原文<a href="https://www.zhihu.com/question/30178891">传送门</a></p><span id="more"></span><h3 id="罗斯福专注力"><strong>罗斯福专注力</strong></h3><p>第26届美国总统<strong>西奥多·罗斯福</strong>，昵称Teddy。这位总统在年轻的时候是一个金牌学霸，他在哈佛大学求学期间，不但学业出色，而且涉猎广泛，包括拳击、摔跤、健身、舞蹈、读诗会等等，而且对大自然特别着迷，喜欢解剖动植物制作标本，在大一暑假的时候就出版了一本鸟类研究的著作。为了满足这些广泛的兴趣，罗斯福不得不大大压缩用于专业学习的时间，他的传记作家推测他每天最多只有1/4的时间用于学习。但他的成绩并不差，而且经常获得奖学金。(酸了)</p><p>传记作家用了一个很形象的词来描述罗斯福的专注程度：blistering intensity，就是在健身房撸铁的时候，要把手磨出血泡那种强度，等同于电脑游戏里的死亡模式。给自己设定一个几乎不可能完成的任务，然后用尽全力去完成。比如阅读，如果一篇文章平时需要10分钟读完，就设定一个5分钟的定时器，尽力在不影响理解的前提下快速读完；再比如背单词，如果平时能背20个单词，就要挑战50个。可以把设定的目标告诉别人，或者通过挑战、竞赛的方法给自己一些外部压力，来强迫自己完成目标。一开始的时候可能会很吃力，但是经过不断的训练以后你会为自己的潜能感到震惊，因为人的大脑和肌肉一样，是能够通过训练得到提升的。学习的目的并不只是掌握知识而已，还应该有意识提高学习的能力（包括深度思考理解问题的能力），知识本身更新换代的速度很快，但是学习研究的能力却是终身受用的。我们既要「<strong>鱼</strong>」也要「<strong>渔</strong>」。</p><p>罗斯福的经验告诉我们高效的学习效率离不开极高的专注力。互联网上碎片化的信息导致很多现代人出现了<strong>注意力缺失症</strong>（ADD-Attention Deficit Disorder）。说实话我就有这个毛病，特别是用到电脑的时候，只要qq是登录状态就老是想去查看一下，并且bilibili的更新订阅也时不时打扰分散我的注意力。以及我喜欢在学习的时候听点小曲，现在想来也是极其分散注意力。想要做到十分专注，从注意力缺失慢慢调整到专注力极高（想想你的高中时光）是一个十分痛苦的过程。但是会受益良多。我觉得可以慢慢加量，首先是设置一个时间段，比如四十分钟用于读书。你就找一个倒计时的钟表（手机上有很多app有这个功能），然后这四十分钟就别去做其他的事情了。中间发生了一些事情打断了读书的这个过程的话，就拿个<strong>小本本</strong>记录下来，看看是什么事情打断了，有哪些是可以避免下次不会遇到的，有哪些是可以延缓的。做到统筹规划。</p><h3 id="费曼方法"><strong>费曼方法</strong></h3><p>费曼是20世纪著名的理论物理学家，在研制原子弹的曼哈顿计划中担任重要角色，曾获诺贝尔物理学奖。除了在物理研究领域中作出巨大贡献之外，他在教学方面也有独到的见解。他提出的「4步学习」技巧是非常有效的学习方法：</p><ol><li><strong>Pick a topic you want to understand and start studying it.</strong> 选择一个学习主题，开始阅读关于它的所有资料，做必要的笔记。</li><li><strong>Pretend to teach your topic to a classroom. Make sure you’re able to explain the topic in simple terms.</strong> 假装你在教室里向学生解释这个主题，用尽量简单的词汇去描述它，力求学生能听懂。（听众可以是人，也可以是你的毛绒玩具）。</li><li><strong>Go back to the books when you get stuck.</strong> 当你讲解卡壳的时候，再回头阅读资料，弄清楚再继续讲解。</li><li><strong>Simplify and use analogies.</strong> 回到第一步，试图用更加简洁、直白的语言去讲述概念。</li></ol><p>说实话，这个方法我们也经常遇到。上课时的数学题，给别人讲一遍，脑中的思路会更加清晰。我们以前也经常听到一种说法，叫做「把书读薄」。能用自己的语言，用最直白的词汇去讲述一个概念，才说明你对它的理解足够深刻。而费曼则提供了一种有效的实践方法。</p><h3 id="达芬奇的笔记"><strong>达芬奇的笔记</strong></h3><p>说到达芬奇，大多数人的反应都会立刻想到「蒙娜丽莎」这幅名画。但实际上，列奥纳多·达·芬奇是一位在绘画、雕刻、医学、科学、机械等各个方面集大成的天才大师，留下了令后人惊叹的智慧宝藏与谜团。他留下的笔记能部分解释他所取得的成就，欣赏一下：</p><p><a href="https://imgtu.com/i/cN1akV"><img src="https://z3.ax1x.com/2021/04/09/cN1akV.jpg" alt="cN1akV.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1wfU"><img src="https://z3.ax1x.com/2021/04/09/cN1wfU.jpg" alt="cN1wfU.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1twq"><img src="https://z3.ax1x.com/2021/04/09/cN1twq.jpg" alt="cN1twq.jpg" loading="lazy"></a><br><a href="https://imgtu.com/i/cN1dYT"><img src="https://z3.ax1x.com/2021/04/09/cN1dYT.jpg" alt="cN1dYT.jpg" loading="lazy"></a></p><p>明显的可以看出，达芬奇的笔记特点十分明显。我们的笔记大部分都是列表格式，会使用思维导图来记笔记都算比较高级了。但是达芬奇的笔记图文并茂，充分调动了逻辑思维和形象思维，让左右脑都活跃起来。这种理性加感性、艺术与科学融合的创造性思考方法，也许就是破解达芬奇天才的密码吧。大佬就是大佬（酸了）</p>]]></content>
    
    
    <summary type="html">最近感觉自己的学习效率很差，并且工作量还很大，所以必须提高效率了</summary>
    
    
    
    <category term="学习" scheme="https://www.darkfox.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习方法" scheme="https://www.darkfox.top/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>电赛2004年题目</title>
    <link href="https://www.darkfox.top/posts/63fedec4/"/>
    <id>https://www.darkfox.top/posts/63fedec4/</id>
    <published>2021-04-09T04:30:02.000Z</published>
    <updated>2021-04-09T04:50:08.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><a href="https://imgtu.com/i/cNVbGR"><img src="https://z3.ax1x.com/2021/04/09/cNVbGR.md.png" alt="cNVbGR.md.png" loading="lazy"></a></p><span id="more"></span><h1>2004年江西省第15届学生电子现场赛 超温报警电路的模拟制作</h1><p>1、题意</p><p>​    在现实生活中，常有一种工程技术，即带有自动温度补偿的设备，在规定温度内正常工作。但是为设备安全，需设定工作的上限温度，万一温控补偿失效，设备温度一旦超出上限温度时，便立即切断工作电源并报警。而待设备修复之后，再投入使用。</p><p>2、模拟制作实训要求</p><p>为了能让作品在很短时间内模拟上述过程，将题目适当修改，即用数显电路代替工作件，当其接通市电后，数显电路会周而复始地按顺序“0-1-2-4-8-0-8-4-2-1”显示数字。用插上电源的电烙铁(20W或25W)代替发热件，当发热的电烙铁外壳靠近热敏元件，约几秒钟后，热敏元件感受的温度超过工作件温度的上限，温控电路便工作，首先切断发热件电源，红色发光二极管点亮，1秒钟后再切断工作件数显电路的电源，数显电路停止工作，并同时发出断续(不是连续)的报警声。随后电烙铁远离热敏元件，让其所感受的温度在上限温度以下，温控电路恢复常态，红色发光二极管熄灭，电烙铁重新得电、报警声停，数显电路重新工作。当电烙铁再次靠近热敏元件……远离热敏元件，作品重复上述过程。</p>]]></content>
    
    
    <summary type="html">2004年江西省电赛题目</summary>
    
    
    
    <category term="电赛" scheme="https://www.darkfox.top/categories/%E7%94%B5%E8%B5%9B/"/>
    
    
    <category term="省电赛题目" scheme="https://www.darkfox.top/tags/%E7%9C%81%E7%94%B5%E8%B5%9B%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
</feed>
